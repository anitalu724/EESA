%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: Technological Circuit Background-3 up-02.eps
%%Creator: Adobe Illustrator(R) 20.1
%%For: Ayib
%%CreationDate: 03/01/17
%%BoundingBox: 0 0 800 801
%%HiResBoundingBox: 0 0 800 800.0007
%%CropBox: 0 0 800 800.0007
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 20.1.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 20.1.0 x174 R agm 4.7740 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: font CooperHewitt-Book
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: CooperHewitt-Book
%%DocumentNeededFonts: CooperHewitt-Book
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                      
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c132 79.159284, 2016/04/19-13:13:40        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Technological Circuit Background-3 up-02</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:MetadataDate>2017-01-03T18:16:25+07:00</xmp:MetadataDate>
         <xmp:ModifyDate>2017-01-03T18:16:25+07:00</xmp:ModifyDate>
         <xmp:CreateDate>2017-01-03T18:16:25+07:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC 2015.3 (Macintosh)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A5VmQ4rsVT7yz/wAc/Xv+&#xA;YE/8nEyvJzHvYl1z/wAoRZf8x03/ACbTEfWfcvVIcsZOxV2Kpj5b/wCUi0v/AJjIP+Tq5HJ9J9yD&#xA;yQ+pf8dG6/4zSf8AEjhjySE18o/b1f8A7Zd3/wAQGQy9PeGMkhyxkz3VP+Ox5p/7Z0P/ABCDMaPK&#xA;PvYDoxzXv+OZoX/MG3/J+TLYcz72QVNa/wCUX8u/6l3/ANRBxh9Uvggcy7zl/wAdCz/5gbX/AJNj&#xA;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&#xA;sVdirsVdirsVdirsVdir/9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:f5e604e8-b652-4f1d-83a8-ad63156b5b99</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:f5e604e8-b652-4f1d-83a8-ad63156b5b99</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:c580f91c-0645-7845-affd-710a1211ed44</stRef:instanceID>
            <stRef:documentID>xmp.did:b2ba7f72-595e-4050-9754-88a620a250c9</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:9055feea-6df3-418a-84b0-35eb367eec15</stEvt:instanceID>
                  <stEvt:when>2016-04-18T22:41:34+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:f5e604e8-b652-4f1d-83a8-ad63156b5b99</stEvt:instanceID>
                  <stEvt:when>2017-01-03T18:16:25+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015.3 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>800.000000</stDim:w>
            <stDim:h>800.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>CooperHewitt-Book</stFnt:fontName>
                  <stFnt:fontFamily>Cooper Hewitt</stFnt:fontFamily>
                  <stFnt:fontFace>Book</stFnt:fontFace>
                  <stFnt:fontType>Open Type</stFnt:fontType>
                  <stFnt:versionString>1.000</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>CooperHewitt-Book.otf</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xmpTPg:Fonts>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Black</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Color Group 8</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=59 G=77 B=87</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>59</xmpG:red>
                           <xmpG:green>77</xmpG:green>
                           <xmpG:blue>87</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=157 G=191 B=159</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>157</xmpG:red>
                           <xmpG:green>191</xmpG:green>
                           <xmpG:blue>159</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Grays</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=100</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 15.00</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -800.001 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 800.001 li
800 800.001 li
800 0 li
cp
clp
799.995 800 mo
.00487929 800 li
.00487929 .000488 li
799.995 .000488 li
799.995 800 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
.774502 .592615 .502129 .329351 cmyk
f
485.64 758.58 mo
485.64 759.283 485.749 759.881 485.968 760.375 cv
486.187 760.869 486.486 761.24 486.866 761.49 cv
487.245 761.74 487.66 761.867 488.11 761.867 cv
488.566 761.867 488.982 761.748 489.359 761.51 cv
489.736 761.274 490.036 760.908 490.261 760.418 cv
490.486 759.928 490.598 759.313 490.598 758.58 cv
490.598 757.889 490.486 757.295 490.261 756.797 cv
490.036 756.301 489.733 755.922 489.349 755.658 cv
488.966 755.397 488.546 755.266 488.091 755.266 cv
487.616 755.266 487.192 755.401 486.818 755.668 cv
486.445 755.938 486.155 756.323 485.949 756.826 cv
485.742 757.33 485.64 757.914 485.64 758.58 cv
cp
490.741 762.389 mo
490.741 762.131 li
490.392 762.53 490.049 762.856 489.71 763.104 cv
489.371 763.356 489.004 763.545 488.608 763.674 cv
488.212 763.807 487.78 763.869 487.312 763.869 cv
486.691 763.869 486.116 763.739 485.587 763.477 cv
485.059 763.213 484.602 762.838 484.216 762.349 cv
483.828 761.864 483.536 761.291 483.337 760.631 cv
483.138 759.973 483.037 759.26 483.037 758.494 cv
483.037 756.873 483.434 755.61 484.225 754.703 cv
485.017 753.799 486.058 753.346 487.35 753.346 cv
488.097 753.346 488.727 753.474 489.24 753.731 cv
489.753 753.987 490.253 754.382 490.741 754.911 cv
490.741 751.086 li
490.741 750.553 490.846 750.153 491.059 749.878 cv
491.271 749.608 491.573 749.471 491.966 749.471 cv
492.359 749.471 492.66 749.596 492.872 749.846 cv
493.085 750.098 493.191 750.465 493.191 750.953 cv
493.191 762.389 li
493.191 762.882 493.077 763.252 492.849 763.5 cv
492.621 763.746 492.327 763.869 491.966 763.869 cv
491.612 763.869 491.319 763.742 491.087 763.487 cv
490.856 763.229 490.741 762.864 490.741 762.389 cv
cp
.406836 .111208 .4336 0 cmyk
f
497.103 757.764 mo
501.805 757.764 li
501.742 756.877 501.501 756.213 501.087 755.774 cv
500.672 755.332 500.127 755.114 499.449 755.114 cv
498.803 755.114 498.273 755.336 497.859 755.781 cv
497.444 756.229 497.193 756.889 497.103 757.764 cv
cp
502.174 759.237 mo
497.103 759.237 li
497.11 759.824 497.228 760.344 497.459 760.793 cv
497.69 761.242 497.997 761.582 498.38 761.809 cv
498.764 762.036 499.187 762.151 499.649 762.151 cv
499.958 762.151 500.241 762.115 500.498 762.043 cv
500.755 761.969 501.003 761.856 501.244 761.699 cv
501.486 761.545 501.706 761.378 501.909 761.201 cv
502.112 761.024 502.373 760.781 502.698 760.479 cv
502.83 760.365 503.021 760.307 503.268 760.307 cv
503.534 760.307 503.748 760.381 503.912 760.528 cv
504.077 760.674 504.16 760.877 504.16 761.145 cv
504.16 761.378 504.068 761.651 503.885 761.965 cv
503.7 762.28 503.423 762.58 503.054 762.867 cv
502.682 763.156 502.218 763.395 501.656 763.584 cv
501.097 763.776 500.452 763.869 499.724 763.869 cv
498.06 763.869 496.764 763.395 495.84 762.445 cv
494.915 761.496 494.453 760.207 494.453 758.58 cv
494.453 757.813 494.567 757.102 494.795 756.448 cv
495.024 755.791 495.356 755.231 495.792 754.762 cv
496.229 754.293 496.767 753.934 497.408 753.684 cv
498.046 753.434 498.756 753.309 499.534 753.309 cv
500.547 753.309 501.416 753.522 502.141 753.949 cv
502.866 754.377 503.41 754.93 503.771 755.606 cv
504.13 756.283 504.312 756.974 504.312 757.676 cv
504.312 758.33 504.125 758.752 503.752 758.945 cv
503.379 759.139 502.853 759.237 502.174 759.237 cv
cp
f
513.99 760.479 mo
513.99 761.194 513.816 761.807 513.467 762.316 cv
513.119 762.826 512.605 763.213 511.923 763.477 cv
511.243 763.739 510.415 763.869 509.44 763.869 cv
508.509 763.869 507.711 763.727 507.046 763.441 cv
506.382 763.158 505.891 762.801 505.574 762.375 cv
505.258 761.945 505.1 761.518 505.1 761.086 cv
505.1 760.801 505.2 760.559 505.404 760.356 cv
505.606 760.155 505.863 760.053 506.173 760.053 cv
506.445 760.053 506.654 760.119 506.799 760.252 cv
506.946 760.385 507.085 760.573 507.217 760.811 cv
507.483 761.276 507.802 761.617 508.172 761.848 cv
508.542 762.074 509.047 762.19 509.688 762.19 cv
510.206 762.19 510.632 762.073 510.965 761.842 cv
511.297 761.61 511.463 761.346 511.463 761.049 cv
511.463 760.592 511.291 760.262 510.946 760.053 cv
510.6 759.844 510.031 759.643 509.241 759.453 cv
508.348 759.233 507.621 758.998 507.061 758.753 cv
506.5 758.512 506.052 758.19 505.717 757.791 cv
505.381 757.393 505.213 756.901 505.213 756.319 cv
505.213 755.801 505.368 755.309 505.679 754.846 cv
505.99 754.385 506.447 754.016 507.052 753.74 cv
507.655 753.465 508.385 753.326 509.241 753.326 cv
509.911 753.326 510.515 753.397 511.049 753.536 cv
511.585 753.674 512.032 753.864 512.389 754.098 cv
512.747 754.33 513.019 754.59 513.205 754.875 cv
513.392 755.16 513.486 755.438 513.486 755.711 cv
513.486 756.007 513.386 756.252 513.187 756.444 cv
512.988 756.631 512.704 756.729 512.336 756.729 cv
512.071 756.729 511.844 756.653 511.658 756.498 cv
511.471 756.348 511.257 756.119 511.017 755.816 cv
510.821 755.563 510.59 755.36 510.323 755.207 cv
510.058 755.055 509.697 754.981 509.241 754.981 cv
508.772 754.981 508.383 755.078 508.073 755.28 cv
507.762 755.479 507.607 755.727 507.607 756.024 cv
507.607 756.297 507.721 756.52 507.948 756.694 cv
508.177 756.869 508.484 757.014 508.87 757.127 cv
509.257 757.24 509.787 757.378 510.466 757.543 cv
511.27 757.74 511.926 757.974 512.437 758.246 cv
512.946 758.518 513.332 758.84 513.596 759.211 cv
513.859 759.582 513.99 760.003 513.99 760.479 cv
cp
f
517.921 754.799 mo
517.921 762.293 li
517.921 762.813 517.797 763.205 517.55 763.471 cv
517.303 763.737 516.99 763.869 516.61 763.869 cv
516.23 763.869 515.921 763.735 515.684 763.461 cv
515.446 763.19 515.327 762.799 515.327 762.293 cv
515.327 754.875 li
515.327 754.364 515.446 753.977 515.684 753.717 cv
515.921 753.457 516.23 753.326 516.61 753.326 cv
516.99 753.326 517.303 753.457 517.55 753.717 cv
517.797 753.977 517.921 754.338 517.921 754.799 cv
cp
516.638 752.121 mo
516.278 752.121 515.969 752.01 515.712 751.789 cv
515.456 751.569 515.327 751.253 515.327 750.848 cv
515.327 750.481 515.459 750.18 515.722 749.941 cv
515.985 749.703 516.29 749.584 516.638 749.584 cv
516.974 749.584 517.272 749.691 517.53 749.908 cv
517.79 750.123 517.921 750.436 517.921 750.848 cv
517.921 751.248 517.793 751.559 517.54 751.783 cv
517.287 752.007 516.987 752.121 516.638 752.121 cv
cp
f
521.767 758.514 mo
521.767 759.565 521.995 760.36 522.454 760.897 cv
522.913 761.436 523.508 761.705 524.236 761.705 cv
524.666 761.705 525.073 761.588 525.455 761.358 cv
525.839 761.127 526.151 760.778 526.392 760.313 cv
526.632 759.848 526.753 759.283 526.753 758.617 cv
526.753 757.561 526.521 756.737 526.055 756.149 cv
525.589 755.561 524.977 755.266 524.216 755.266 cv
523.475 755.266 522.882 755.547 522.436 756.112 cv
521.99 756.674 521.767 757.474 521.767 758.514 cv
cp
529.28 755.227 mo
529.28 762.757 li
529.28 763.619 529.187 764.362 529.003 764.983 cv
528.821 765.602 528.526 766.115 528.12 766.52 cv
527.715 766.924 527.185 767.227 526.53 767.422 cv
525.874 767.619 525.059 767.717 524.083 767.717 cv
523.191 767.717 522.393 767.592 521.69 767.342 cv
520.988 767.09 520.446 766.768 520.066 766.373 cv
519.687 765.977 519.495 765.57 519.495 765.153 cv
519.495 764.836 519.604 764.576 519.82 764.378 cv
520.034 764.178 520.294 764.078 520.598 764.078 cv
520.978 764.078 521.31 764.246 521.595 764.582 cv
521.734 764.752 521.878 764.926 522.027 765.099 cv
522.176 765.276 522.341 765.424 522.521 765.547 cv
522.701 765.67 522.918 765.762 523.171 765.823 cv
523.425 765.881 523.717 765.911 524.045 765.911 cv
524.717 765.911 525.238 765.819 525.609 765.631 cv
525.979 765.445 526.238 765.184 526.387 764.848 cv
526.536 764.514 526.623 764.155 526.649 763.77 cv
526.674 763.387 526.693 762.772 526.705 761.922 cv
526.306 762.481 525.846 762.905 525.323 763.195 cv
524.801 763.487 524.178 763.632 523.457 763.632 cv
522.589 763.632 521.831 763.41 521.182 762.967 cv
520.534 762.524 520.034 761.905 519.687 761.106 cv
519.338 760.307 519.164 759.387 519.164 758.342 cv
519.164 757.565 519.27 756.86 519.482 756.235 cv
519.695 755.606 519.997 755.078 520.389 754.647 cv
520.781 754.217 521.235 753.893 521.747 753.674 cv
522.26 753.455 522.823 753.346 523.438 753.346 cv
524.172 753.346 524.809 753.489 525.347 753.768 cv
525.885 754.051 526.386 754.492 526.848 755.094 cv
526.848 754.742 li
526.848 754.293 526.958 753.945 527.18 753.698 cv
527.402 753.451 527.687 753.326 528.035 753.326 cv
528.535 753.326 528.867 753.49 529.031 753.816 cv
529.196 754.143 529.28 754.614 529.28 755.227 cv
cp
f
533.401 754.762 mo
533.401 755.074 li
533.856 754.473 534.355 754.031 534.896 753.75 cv
535.438 753.469 536.059 753.326 536.762 753.326 cv
537.446 753.326 538.057 753.477 538.596 753.774 cv
539.133 754.073 539.536 754.492 539.801 755.035 cv
539.973 755.354 540.083 755.695 540.134 756.063 cv
540.185 756.43 540.211 756.899 540.211 757.469 cv
540.211 762.293 li
540.211 762.813 540.092 763.205 539.854 763.471 cv
539.617 763.737 539.308 763.869 538.928 763.869 cv
538.541 763.869 538.229 763.735 537.988 763.461 cv
537.746 763.19 537.627 762.799 537.627 762.293 cv
537.627 757.971 li
537.627 757.117 537.508 756.463 537.271 756.01 cv
537.032 755.559 536.56 755.33 535.85 755.33 cv
535.389 755.33 534.967 755.469 534.587 755.744 cv
534.207 756.02 533.929 756.399 533.751 756.878 cv
533.625 757.266 533.562 757.987 533.562 759.045 cv
533.562 762.293 li
533.562 762.819 533.439 763.213 533.196 763.477 cv
532.952 763.739 532.638 763.869 532.251 763.869 cv
531.877 763.869 531.571 763.735 531.329 763.461 cv
531.089 763.19 530.969 762.799 530.969 762.293 cv
530.969 754.799 li
530.969 754.305 531.076 753.936 531.291 753.691 cv
531.507 753.449 531.801 753.326 532.174 753.326 cv
532.403 753.326 532.609 753.381 532.793 753.489 cv
532.976 753.598 533.123 753.757 533.235 753.973 cv
533.345 754.188 533.401 754.451 533.401 754.762 cv
cp
f
544.104 757.764 mo
548.805 757.764 li
548.742 756.877 548.502 756.213 548.088 755.774 cv
547.673 755.332 547.127 755.114 546.449 755.114 cv
545.803 755.114 545.273 755.336 544.858 755.781 cv
544.443 756.229 544.193 756.889 544.104 757.764 cv
cp
549.175 759.237 mo
544.104 759.237 li
544.111 759.824 544.228 760.344 544.46 760.793 cv
544.691 761.242 544.997 761.582 545.381 761.809 cv
545.763 762.036 546.187 762.151 546.649 762.151 cv
546.959 762.151 547.242 762.115 547.499 762.043 cv
547.755 761.969 548.003 761.856 548.245 761.699 cv
548.485 761.545 548.706 761.378 548.91 761.201 cv
549.112 761.024 549.374 760.781 549.698 760.479 cv
549.83 760.365 550.021 760.307 550.268 760.307 cv
550.534 760.307 550.749 760.381 550.913 760.528 cv
551.078 760.674 551.16 760.877 551.16 761.145 cv
551.16 761.378 551.069 761.651 550.885 761.965 cv
550.7 762.28 550.424 762.58 550.053 762.867 cv
549.683 763.156 549.218 763.395 548.657 763.584 cv
548.097 763.776 547.452 763.869 546.725 763.869 cv
545.06 763.869 543.765 763.395 542.839 762.445 cv
541.916 761.496 541.453 760.207 541.453 758.58 cv
541.453 757.813 541.568 757.102 541.795 756.448 cv
542.023 755.791 542.356 755.231 542.793 754.762 cv
543.23 754.293 543.768 753.934 544.407 753.684 cv
545.046 753.434 545.756 753.309 546.535 753.309 cv
547.548 753.309 548.416 753.522 549.141 753.949 cv
549.867 754.377 550.409 754.93 550.771 755.606 cv
551.131 756.283 551.313 756.974 551.313 757.676 cv
551.313 758.33 551.126 758.752 550.752 758.945 cv
550.379 759.139 549.853 759.237 549.175 759.237 cv
cp
f
554.645 758.58 mo
554.645 759.283 554.753 759.881 554.972 760.375 cv
555.191 760.869 555.49 761.24 555.87 761.49 cv
556.25 761.74 556.664 761.867 557.113 761.867 cv
557.571 761.867 557.987 761.748 558.363 761.51 cv
558.74 761.274 559.041 760.908 559.265 760.418 cv
559.49 759.928 559.603 759.313 559.603 758.58 cv
559.603 757.889 559.49 757.295 559.265 756.797 cv
559.041 756.301 558.737 755.922 558.354 755.658 cv
557.97 755.397 557.551 755.266 557.095 755.266 cv
556.62 755.266 556.196 755.401 555.823 755.668 cv
555.449 755.938 555.159 756.323 554.953 756.826 cv
554.747 757.33 554.645 757.914 554.645 758.58 cv
cp
559.744 762.389 mo
559.744 762.131 li
559.397 762.53 559.053 762.856 558.714 763.104 cv
558.375 763.356 558.009 763.545 557.613 763.674 cv
557.218 763.807 556.785 763.869 556.317 763.869 cv
555.696 763.869 555.121 763.739 554.593 763.477 cv
554.064 763.213 553.607 762.838 553.22 762.349 cv
552.833 761.864 552.541 761.291 552.342 760.631 cv
552.142 759.973 552.042 759.26 552.042 758.494 cv
552.042 756.873 552.438 755.61 553.23 754.703 cv
554.021 753.799 555.063 753.346 556.355 753.346 cv
557.102 753.346 557.732 753.474 558.244 753.731 cv
558.757 753.987 559.258 754.382 559.744 754.911 cv
559.744 751.086 li
559.744 750.553 559.851 750.153 560.064 749.878 cv
560.275 749.608 560.578 749.471 560.971 749.471 cv
561.363 749.471 561.665 749.596 561.877 749.846 cv
562.089 750.098 562.196 750.465 562.196 750.953 cv
562.196 762.389 li
562.196 762.882 562.082 763.252 561.854 763.5 cv
561.626 763.746 561.332 763.869 560.971 763.869 cv
560.617 763.869 560.323 763.742 560.092 763.487 cv
559.861 763.229 559.744 762.864 559.744 762.389 cv
cp
f
570.466 758.656 mo
570.466 759.688 570.702 760.481 571.174 761.033 cv
571.646 761.588 572.265 761.867 573.031 761.867 cv
573.683 761.867 574.245 761.584 574.716 761.016 cv
575.188 760.449 575.424 759.637 575.424 758.58 cv
575.424 757.897 575.326 757.307 575.13 756.813 cv
574.933 756.319 574.656 755.938 574.294 755.668 cv
573.933 755.401 573.512 755.266 573.031 755.266 cv
572.537 755.266 572.096 755.401 571.71 755.668 cv
571.324 755.938 571.021 756.326 570.798 756.836 cv
570.577 757.346 570.466 757.953 570.466 758.656 cv
cp
570.343 750.953 mo
570.343 754.911 li
570.83 754.406 571.327 754.018 571.834 753.75 cv
572.34 753.481 572.968 753.346 573.715 753.346 cv
574.576 753.346 575.33 753.551 575.981 753.957 cv
576.628 754.367 577.132 754.959 577.49 755.735 cv
577.848 756.51 578.028 757.43 578.028 758.494 cv
578.028 759.28 577.927 759.998 577.728 760.655 cv
577.529 761.311 577.238 761.878 576.859 762.36 cv
576.479 762.84 576.018 763.213 575.477 763.477 cv
574.935 763.739 574.338 763.869 573.687 763.869 cv
573.287 763.869 572.911 763.823 572.561 763.727 cv
572.209 763.632 571.909 763.507 571.663 763.352 cv
571.417 763.198 571.206 763.036 571.031 762.873 cv
570.858 762.709 570.627 762.461 570.343 762.131 cv
570.343 762.389 li
570.343 762.875 570.226 763.244 569.992 763.496 cv
569.758 763.746 569.46 763.869 569.099 763.869 cv
568.732 763.869 568.439 763.746 568.22 763.496 cv
568.001 763.244 567.893 762.875 567.893 762.389 cv
567.893 751.066 li
567.893 750.541 567.998 750.143 568.21 749.875 cv
568.422 749.606 568.719 749.471 569.099 749.471 cv
569.498 749.471 569.805 749.599 570.02 749.856 cv
570.235 750.114 570.343 750.477 570.343 750.953 cv
cp
f
581.389 764.194 mo
581.626 763.614 li
578.435 755.578 li
578.238 755.117 578.14 754.78 578.14 754.57 cv
578.14 754.349 578.198 754.145 578.311 753.955 cv
578.425 753.764 578.581 753.612 578.781 753.498 cv
578.981 753.382 579.188 753.326 579.404 753.326 cv
579.777 753.326 580.058 753.445 580.249 753.684 cv
580.44 753.92 580.607 754.26 580.752 754.703 cv
582.946 761.086 li
585.027 755.151 li
585.191 754.67 585.339 754.293 585.473 754.02 cv
585.606 753.748 585.746 753.565 585.895 753.471 cv
586.043 753.375 586.254 753.326 586.527 753.326 cv
586.724 753.326 586.911 753.378 587.092 753.485 cv
587.273 753.588 587.411 753.729 587.51 753.906 cv
587.608 754.084 587.657 754.27 587.657 754.467 cv
587.631 754.586 587.591 754.757 587.534 754.981 cv
587.476 755.201 587.407 755.428 587.325 755.655 cv
583.944 764.506 li
583.652 765.285 583.367 765.895 583.088 766.338 cv
582.81 766.781 582.442 767.123 581.982 767.36 cv
581.523 767.598 580.904 767.717 580.125 767.717 cv
579.365 767.717 578.795 767.635 578.416 767.471 cv
578.035 767.305 577.846 767.003 577.846 766.566 cv
577.846 766.27 577.936 766.039 578.117 765.878 cv
578.297 765.717 578.565 765.635 578.918 765.635 cv
579.058 765.635 579.195 765.655 579.327 765.694 cv
579.492 765.731 579.634 765.75 579.754 765.75 cv
580.052 765.75 580.286 765.707 580.458 765.617 cv
580.628 765.53 580.781 765.375 580.918 765.156 cv
581.054 764.94 581.211 764.617 581.389 764.194 cv
cp
f
618.951 753.551 mo
619.571 753.551 li
619.571 752.774 li
619.571 751.959 619.67 751.316 619.877 750.836 cv
620.08 750.358 620.432 750.01 620.924 749.791 cv
621.414 749.574 622.086 749.465 622.94 749.465 cv
624.459 749.465 625.213 749.832 625.213 750.578 cv
625.213 750.816 625.133 751.024 624.973 751.194 cv
624.819 751.364 624.629 751.449 624.414 751.449 cv
624.315 751.449 624.137 751.432 623.887 751.391 cv
623.651 751.358 623.436 751.334 623.264 751.334 cv
622.797 751.334 622.498 751.474 622.36 751.75 cv
622.233 752.026 622.164 752.418 622.164 752.934 cv
622.164 753.551 li
622.797 753.551 li
623.787 753.551 624.278 753.848 624.278 754.448 cv
624.278 754.865 624.151 755.137 623.885 755.252 cv
623.623 755.365 623.262 755.422 622.797 755.422 cv
622.164 755.422 li
622.164 762.293 li
622.164 762.805 622.043 763.194 621.795 763.461 cv
621.553 763.735 621.24 763.867 620.852 763.867 cv
620.485 763.867 620.182 763.735 619.934 763.461 cv
619.69 763.194 619.571 762.805 619.571 762.293 cv
619.571 755.422 li
618.856 755.422 li
618.467 755.422 618.174 755.338 617.963 755.16 cv
617.754 754.99 617.649 754.762 617.649 754.483 cv
617.649 753.86 618.082 753.551 618.951 753.551 cv
f
627.442 760.125 mo
627.442 762.293 li
627.442 762.816 627.309 763.213 627.067 763.473 cv
626.821 763.739 626.508 763.867 626.129 763.867 cv
625.748 763.867 625.442 763.737 625.203 763.467 cv
624.967 763.203 624.842 762.811 624.842 762.293 cv
624.842 755.07 li
624.842 753.905 625.262 753.323 626.104 753.323 cv
626.537 753.323 626.846 753.457 627.037 753.731 cv
627.227 754.003 627.332 754.405 627.354 754.938 cv
627.662 754.405 627.979 754.003 628.303 753.731 cv
628.635 753.457 629.065 753.323 629.612 753.323 cv
630.16 753.323 630.684 753.457 631.198 753.731 cv
631.713 754.003 631.969 754.367 631.969 754.815 cv
631.969 755.128 631.858 755.395 631.643 755.596 cv
631.422 755.805 631.188 755.908 630.936 755.908 cv
630.836 755.908 630.606 755.846 630.244 755.729 cv
629.879 755.615 629.555 755.555 629.281 755.555 cv
628.901 755.555 628.588 755.658 628.35 755.854 cv
628.108 756.059 627.918 756.349 627.785 756.74 cv
627.656 757.135 627.567 757.606 627.512 758.145 cv
627.463 758.686 627.442 759.348 627.442 760.125 cv
f
634.287 757.757 mo
638.988 757.757 li
638.926 756.873 638.692 756.209 638.276 755.772 cv
637.858 755.33 637.317 755.112 636.635 755.112 cv
635.988 755.112 635.457 755.332 635.043 755.781 cv
634.629 756.227 634.375 756.885 634.287 757.757 cv
639.362 759.233 mo
634.287 759.233 li
634.297 759.82 634.412 760.344 634.643 760.791 cv
634.877 761.239 635.182 761.578 635.567 761.809 cv
635.951 762.035 636.371 762.149 636.836 762.149 cv
637.147 762.149 637.428 762.115 637.686 762.036 cv
637.94 761.967 638.19 761.852 638.43 761.695 cv
638.672 761.543 638.891 761.377 639.094 761.195 cv
639.297 761.022 639.561 760.78 639.885 760.477 cv
640.02 760.364 640.209 760.303 640.453 760.303 cv
640.721 760.303 640.934 760.377 641.102 760.526 cv
641.268 760.672 641.346 760.875 641.346 761.143 cv
641.346 761.377 641.256 761.651 641.078 761.961 cv
640.891 762.28 640.615 762.578 640.242 762.867 cv
639.867 763.153 639.403 763.395 638.844 763.582 cv
638.285 763.772 637.639 763.867 636.912 763.867 cv
635.242 763.867 633.949 763.395 633.026 762.445 cv
632.102 761.494 631.635 760.203 631.635 758.578 cv
631.635 757.811 631.752 757.099 631.983 756.444 cv
632.207 755.785 632.539 755.227 632.981 754.756 cv
633.416 754.285 633.951 753.928 634.594 753.678 cv
635.231 753.428 635.94 753.303 636.721 753.303 cv
637.733 753.303 638.602 753.518 639.328 753.949 cv
640.051 754.371 640.602 754.926 640.957 755.604 cv
641.319 756.283 641.498 756.971 641.498 757.678 cv
641.498 758.326 641.311 758.748 640.938 758.944 cv
640.565 759.137 640.039 759.233 639.362 759.233 cv
f
645.076 757.757 mo
649.778 757.757 li
649.713 756.873 649.473 756.209 649.063 755.772 cv
648.641 755.33 648.1 755.112 647.42 755.112 cv
646.774 755.112 646.244 755.332 645.826 755.781 cv
645.414 756.227 645.16 756.885 645.076 757.757 cv
650.149 759.233 mo
645.076 759.233 li
645.082 759.82 645.201 760.344 645.43 760.791 cv
645.662 761.239 645.969 761.578 646.352 761.809 cv
646.735 762.035 647.156 762.149 647.623 762.149 cv
647.93 762.149 648.215 762.115 648.467 762.036 cv
648.727 761.967 648.973 761.852 649.217 761.695 cv
649.459 761.543 649.678 761.377 649.881 761.195 cv
650.08 761.022 650.346 760.78 650.67 760.477 cv
650.805 760.364 650.996 760.303 651.238 760.303 cv
651.506 760.303 651.721 760.377 651.889 760.526 cv
652.053 760.672 652.129 760.875 652.129 761.143 cv
652.129 761.377 652.041 761.651 651.856 761.961 cv
651.678 762.28 651.401 762.578 651.026 762.867 cv
650.655 763.153 650.186 763.395 649.629 763.582 cv
649.073 763.772 648.422 763.867 647.696 763.867 cv
646.028 763.867 644.737 763.395 643.809 762.445 cv
642.885 761.494 642.42 760.203 642.42 758.578 cv
642.42 757.811 642.535 757.099 642.768 756.444 cv
642.994 755.785 643.326 755.227 643.764 754.756 cv
644.199 754.285 644.737 753.928 645.377 753.678 cv
646.016 753.428 646.729 753.303 647.506 753.303 cv
648.516 753.303 649.385 753.518 650.119 753.949 cv
650.84 754.371 651.385 754.926 651.74 755.604 cv
652.1 756.283 652.285 756.971 652.285 757.678 cv
652.285 758.326 652.094 758.748 651.725 758.944 cv
651.35 759.137 650.824 759.233 650.149 759.233 cv
f
660.912 758.549 mo
660.912 757.864 660.807 757.276 660.598 756.785 cv
660.389 756.293 660.1 755.918 659.733 755.658 cv
659.365 755.395 658.949 755.262 658.5 755.262 cv
657.785 755.262 657.182 755.545 656.692 756.106 cv
656.199 756.672 655.951 757.5 655.951 758.598 cv
655.951 759.625 656.196 760.432 656.688 761.003 cv
657.174 761.578 657.774 761.864 658.5 761.864 cv
658.928 761.864 659.33 761.737 659.698 761.49 cv
660.069 761.239 660.362 760.864 660.58 760.364 cv
660.801 759.862 660.912 759.256 660.912 758.549 cv
655.828 754.781 mo
655.828 755.092 li
656.315 754.49 656.823 754.049 657.354 753.768 cv
657.871 753.483 658.471 753.34 659.135 753.34 cv
659.93 753.34 660.67 753.549 661.342 753.957 cv
662.014 754.371 662.541 754.973 662.932 755.764 cv
663.321 756.559 663.518 757.494 663.518 758.578 cv
663.518 759.373 663.405 760.11 663.182 760.78 cv
662.957 761.448 662.645 762.006 662.252 762.459 cv
661.86 762.908 661.397 763.26 660.863 763.503 cv
660.321 763.746 659.752 763.867 659.135 763.867 cv
658.397 763.867 657.772 763.719 657.27 763.42 cv
656.768 763.128 656.287 762.688 655.828 762.115 cv
655.828 766.007 li
655.828 767.143 655.412 767.717 654.584 767.717 cv
654.094 767.717 653.776 767.57 653.613 767.278 cv
653.461 766.979 653.379 766.555 653.379 765.987 cv
653.379 754.793 li
653.379 754.299 653.487 753.934 653.699 753.686 cv
653.914 753.448 654.211 753.323 654.584 753.323 cv
654.953 753.323 655.25 753.448 655.481 753.695 cv
655.715 753.949 655.828 754.307 655.828 754.781 cv
f
667.412 754.793 mo
667.412 762.295 li
667.412 762.811 667.289 763.203 667.043 763.467 cv
666.793 763.737 666.483 763.867 666.102 763.867 cv
665.721 763.867 665.416 763.735 665.174 763.461 cv
664.94 763.186 664.819 762.797 664.819 762.295 cv
664.819 754.867 li
664.819 754.358 664.94 753.973 665.174 753.713 cv
665.416 753.449 665.721 753.323 666.102 753.323 cv
666.483 753.323 666.793 753.449 667.043 753.713 cv
667.289 753.973 667.412 754.336 667.412 754.793 cv
666.129 752.115 mo
665.766 752.115 665.459 752 665.205 751.78 cv
664.946 751.557 664.819 751.248 664.819 750.844 cv
664.819 750.474 664.949 750.174 665.215 749.934 cv
665.477 749.699 665.781 749.578 666.129 749.578 cv
666.469 749.578 666.764 749.684 667.022 749.897 cv
667.281 750.115 667.412 750.432 667.412 750.844 cv
667.412 751.242 667.285 751.555 667.035 751.78 cv
666.781 752 666.481 752.115 666.129 752.115 cv
f
675.772 762.684 mo
673.488 758.918 li
672.08 760.246 li
672.08 762.313 li
672.08 762.811 671.948 763.194 671.684 763.461 cv
671.426 763.735 671.117 763.867 670.778 763.867 cv
670.379 763.867 670.063 763.737 669.836 763.467 cv
669.61 763.203 669.492 762.811 669.492 762.293 cv
669.492 751.231 li
669.492 750.656 669.608 750.219 669.824 749.916 cv
670.047 749.612 670.369 749.465 670.778 749.465 cv
671.176 749.465 671.49 749.602 671.727 749.875 cv
671.961 750.147 672.08 750.549 672.08 751.078 cv
672.08 757.371 li
674.996 754.309 li
675.358 753.932 675.629 753.668 675.823 753.53 cv
676.012 753.391 676.242 753.323 676.512 753.323 cv
676.838 753.323 677.106 753.426 677.328 753.631 cv
677.539 753.836 677.649 754.096 677.649 754.405 cv
677.649 754.783 677.295 755.293 676.594 755.926 cv
675.217 757.188 li
677.875 761.371 li
678.069 761.684 678.215 761.914 678.299 762.076 cv
678.383 762.237 678.43 762.397 678.43 762.539 cv
678.43 762.951 678.315 763.274 678.088 763.514 cv
677.863 763.75 677.565 763.867 677.203 763.867 cv
676.887 763.867 676.639 763.786 676.469 763.612 cv
676.299 763.44 676.063 763.128 675.772 762.684 cv
f
681.409 763.867 mo
681.016 763.867 680.68 763.742 680.395 763.487 cv
680.11 763.239 679.965 762.881 679.965 762.422 cv
679.965 762.036 680.104 761.703 680.375 761.428 cv
680.651 761.149 680.983 761.007 681.383 761.007 cv
681.781 761.007 682.119 761.149 682.406 761.42 cv
682.686 761.695 682.828 762.033 682.828 762.422 cv
682.828 762.875 682.686 763.231 682.406 763.483 cv
682.119 763.742 681.787 763.867 681.409 763.867 cv
f
694.307 760.658 mo
694.307 760.979 694.209 761.326 694.016 761.691 cv
693.824 762.063 693.528 762.41 693.129 762.742 cv
692.735 763.074 692.238 763.344 691.635 763.545 cv
691.034 763.748 690.354 763.852 689.604 763.852 cv
687.998 763.852 686.746 763.382 685.846 762.451 cv
684.951 761.516 684.5 760.262 684.5 758.691 cv
684.5 757.623 684.705 756.686 685.119 755.867 cv
685.528 755.053 686.123 754.42 686.901 753.973 cv
687.68 753.526 688.617 753.303 689.696 753.303 cv
690.369 753.303 690.983 753.401 691.547 753.598 cv
692.108 753.793 692.58 754.049 692.973 754.358 cv
693.36 754.672 693.659 755 693.862 755.349 cv
694.069 755.701 694.17 756.03 694.17 756.336 cv
694.17 756.645 694.057 756.908 693.826 757.123 cv
693.592 757.338 693.311 757.448 692.988 757.448 cv
692.77 757.448 692.59 757.391 692.448 757.281 cv
692.303 757.17 692.143 756.992 691.969 756.74 cv
691.651 756.262 691.323 755.899 690.973 755.66 cv
690.629 755.418 690.192 755.299 689.659 755.299 cv
688.897 755.299 688.276 755.596 687.805 756.195 cv
687.338 756.791 687.102 757.615 687.102 758.651 cv
687.102 759.139 687.164 759.59 687.285 759.998 cv
687.403 760.405 687.576 760.753 687.805 761.041 cv
688.035 761.328 688.309 761.547 688.631 761.695 cv
688.955 761.849 689.313 761.922 689.696 761.922 cv
690.217 761.922 690.662 761.801 691.031 761.561 cv
691.409 761.32 691.735 760.953 692.018 760.459 cv
692.176 760.168 692.346 759.941 692.528 759.776 cv
692.709 759.612 692.936 759.526 693.203 759.526 cv
693.52 759.526 693.784 759.649 693.988 759.889 cv
694.199 760.128 694.307 760.387 694.307 760.658 cv
f
702.893 758.598 mo
702.893 757.539 702.659 756.717 702.196 756.128 cv
701.733 755.533 701.106 755.24 700.321 755.24 cv
699.813 755.24 699.365 755.373 698.979 755.635 cv
698.592 755.897 698.297 756.283 698.088 756.799 cv
697.879 757.313 697.774 757.911 697.774 758.598 cv
697.774 759.276 697.875 759.865 698.082 760.371 cv
698.291 760.881 698.584 761.268 698.969 761.536 cv
699.354 761.803 699.803 761.941 700.321 761.941 cv
701.106 761.941 701.733 761.645 702.196 761.049 cv
702.659 760.459 702.893 759.639 702.893 758.598 cv
705.496 758.598 mo
705.496 759.367 705.375 760.082 705.141 760.737 cv
704.895 761.389 704.549 761.949 704.092 762.414 cv
703.637 762.882 703.09 763.242 702.459 763.494 cv
701.821 763.742 701.11 763.869 700.321 763.869 cv
699.535 763.869 698.828 763.742 698.199 763.487 cv
697.576 763.239 697.03 762.873 696.574 762.405 cv
696.113 761.928 695.766 761.371 695.522 760.729 cv
695.293 760.084 695.172 759.373 695.172 758.598 cv
695.172 757.811 695.295 757.092 695.53 756.44 cv
695.772 755.785 696.119 755.227 696.569 754.766 cv
697.02 754.305 697.563 753.949 698.199 753.695 cv
698.844 753.448 699.549 753.323 700.321 753.323 cv
701.106 753.323 701.819 753.448 702.459 753.703 cv
703.098 753.955 703.643 754.319 704.104 754.783 cv
704.561 755.257 704.906 755.813 705.143 756.455 cv
705.377 757.106 705.496 757.815 705.496 758.598 cv
f
715.389 758.786 mo
715.389 762.235 li
715.389 762.781 715.268 763.186 715.02 763.461 cv
714.77 763.735 714.448 763.869 714.041 763.869 cv
713.649 763.869 713.328 763.735 713.09 763.461 cv
712.844 763.186 712.719 762.781 712.719 762.235 cv
712.719 758.104 li
712.719 757.449 712.698 756.941 712.655 756.578 cv
712.61 756.224 712.487 755.924 712.293 755.695 cv
712.096 755.461 711.784 755.344 711.362 755.344 cv
710.512 755.344 709.955 755.635 709.686 756.224 cv
709.418 756.801 709.28 757.639 709.28 758.733 cv
709.28 762.235 li
709.28 762.772 709.156 763.18 708.918 763.457 cv
708.668 763.731 708.35 763.869 707.953 763.869 cv
707.557 763.869 707.237 763.731 706.987 763.457 cv
706.735 763.18 706.61 762.772 706.61 762.235 cv
706.61 754.815 li
706.61 754.326 706.721 753.955 706.946 753.703 cv
707.174 753.448 707.471 753.323 707.834 753.323 cv
708.192 753.323 708.487 753.445 708.727 753.678 cv
708.963 753.916 709.08 754.244 709.08 754.661 cv
709.08 754.906 li
709.534 754.371 710.016 753.974 710.526 753.727 cv
711.041 753.467 711.608 753.34 712.238 753.34 cv
712.889 753.34 713.449 753.471 713.916 753.731 cv
714.385 753.99 714.77 754.385 715.076 754.906 cv
715.516 754.378 715.985 753.985 716.487 753.727 cv
716.987 753.469 717.539 753.34 718.149 753.34 cv
718.854 753.34 719.469 753.483 719.983 753.76 cv
720.492 754.036 720.875 754.44 721.129 754.955 cv
721.35 755.428 721.459 756.164 721.459 757.172 cv
721.459 762.235 li
721.459 762.781 721.338 763.186 721.092 763.461 cv
720.846 763.735 720.518 763.869 720.113 763.869 cv
719.719 763.869 719.399 763.731 719.149 763.457 cv
718.899 763.18 718.772 762.772 718.772 762.235 cv
718.772 757.873 li
718.772 757.315 718.748 756.869 718.703 756.535 cv
718.656 756.198 718.526 755.914 718.321 755.688 cv
718.108 755.461 717.789 755.344 717.367 755.344 cv
717.026 755.344 716.701 755.451 716.393 755.653 cv
716.086 755.849 715.846 756.128 715.672 756.465 cv
715.487 756.903 715.389 757.678 715.389 758.786 cv
f
594.684 757.969 mo
594.682 757.965 594.682 757.959 594.682 757.951 cv
594.682 757.959 594.682 757.965 594.684 757.969 cv
cp
f
594.815 758.799 mo
594.817 758.799 594.817 758.799 594.818 758.799 cv
594.768 758.563 594.729 758.328 594.698 758.096 cv
594.729 758.33 594.768 758.565 594.815 758.799 cv
cp
f
595.673 761.205 mo
595.667 761.195 595.662 761.184 595.656 761.172 cv
595.662 761.184 595.667 761.195 595.673 761.205 cv
cp
f
595.591 761.045 mo
595.569 761 595.547 760.955 595.526 760.91 cv
595.547 760.957 595.569 761 595.591 761.045 cv
cp
f
595.056 759.724 mo
595.183 760.125 595.335 760.514 595.513 760.882 cv
595.332 760.506 595.183 760.117 595.059 759.724 cv
595.058 759.724 595.057 759.724 595.056 759.724 cv
cp
f
604.721 748.033 mo
605.223 748.033 605.592 748.073 606.016 748.145 cv
606.137 747.381 li
606.137 747.381 604.965 747.022 603.426 747.147 cv
603.305 746.733 li
603.784 746.631 604.143 746.205 604.143 745.698 cv
604.143 745.115 603.668 744.645 603.085 744.645 cv
602.502 744.645 602.03 745.115 602.03 745.698 cv
602.03 746.205 602.388 746.631 602.865 746.733 cv
602.999 747.195 li
601.365 747.42 600.065 748.057 600.065 748.057 cv
600.295 748.762 li
601.284 748.434 602.141 748.233 602.919 748.149 cv
603.681 748.069 604.254 748.033 604.721 748.033 cv
cp
f
595.654 751.891 mo
595.659 751.882 li
595.698 751.834 595.735 751.786 595.773 751.74 cv
595.459 751.516 li
594.972 751.158 li
594.945 751.198 594.177 751.903 593.571 753.207 cv
593.545 753.166 593.515 753.125 593.481 753.088 cv
593.299 752.889 593.045 752.786 592.722 752.793 cv
592.718 752.793 592.713 752.793 592.707 752.793 cv
592.508 752.793 592.37 752.727 592.281 752.647 cv
592.37 752.533 592.424 752.391 592.424 752.233 cv
592.424 751.865 592.124 751.565 591.754 751.565 cv
591.386 751.565 591.086 751.865 591.086 752.233 cv
591.086 752.604 591.386 752.903 591.754 752.903 cv
591.813 752.903 591.867 752.893 591.921 752.881 cv
592.086 753.065 592.347 753.223 592.729 753.215 cv
592.926 753.213 593.07 753.264 593.166 753.371 cv
593.278 753.492 593.315 753.666 593.326 753.799 cv
593.325 753.801 593.325 753.803 593.323 753.803 cv
592.888 754.992 593.012 756.473 593.012 756.473 cv
594.07 756.516 li
594.091 755.977 594.168 755.033 594.441 754.285 cv
594.967 752.836 595.626 751.93 595.654 751.891 cv
cp
f
613.92 748.916 mo
613.553 748.916 613.252 749.215 613.252 749.586 cv
613.252 749.643 613.26 749.698 613.276 749.75 cv
613.092 749.916 612.932 750.178 612.938 750.561 cv
612.942 750.757 612.891 750.901 612.784 750.998 cv
612.699 751.073 612.592 751.114 612.488 751.139 cv
611.701 750.035 610.733 749.364 610.733 749.364 cv
609.973 750.176 li
610.547 750.698 611.133 751.352 611.701 752.166 cv
612.096 752.731 612.5 753.457 612.838 754.182 cv
613.862 753.695 li
613.862 753.695 613.395 752.539 612.737 751.503 cv
612.85 751.463 612.965 751.401 613.067 751.311 cv
613.268 751.131 613.365 750.875 613.36 750.553 cv
613.358 750.346 613.426 750.205 613.508 750.112 cv
613.623 750.199 613.766 750.253 613.92 750.253 cv
614.291 750.253 614.59 749.955 614.59 749.586 cv
614.59 749.215 614.291 748.916 613.92 748.916 cv
cp
f
611.264 758.119 mo
609.854 758.805 607.535 759.713 604.482 760.139 cv
603.284 760.305 602.122 760.365 601.054 760.365 cv
599.663 760.365 598.434 760.262 597.492 760.143 cv
596.415 760.007 595.573 759.842 595.059 759.724 cv
595.183 760.117 595.332 760.506 595.513 760.882 cv
595.516 760.893 595.521 760.905 595.526 760.91 cv
595.547 760.955 595.569 761 595.591 761.045 cv
595.613 761.088 595.634 761.131 595.656 761.172 cv
595.662 761.184 595.667 761.195 595.673 761.205 cv
595.976 761.776 596.339 762.299 596.753 762.753 cv
598.194 764.328 599.66 764.578 599.674 764.58 cv
599.698 764.582 li
599.719 764.59 li
599.732 764.596 601.032 765.016 603.01 765.016 cv
604.955 765.016 606.865 764.623 608.684 763.848 cv
610.031 763.158 611.307 762.112 611.938 761.178 cv
612.426 760.455 612.78 759.686 612.988 758.885 cv
613.1 758.459 613.188 757.778 613.135 757.059 cv
612.738 757.326 612.112 757.705 611.264 758.119 cv
cp
f
600.134 751.489 mo
601.691 751.489 602.95 752.75 602.95 754.307 cv
602.95 755.862 601.691 757.121 600.134 757.121 cv
598.579 757.121 597.318 755.862 597.318 754.307 cv
597.318 752.75 598.579 751.489 600.134 751.489 cv
cp
608.375 751.559 mo
609.336 751.559 610.119 752.34 610.119 753.301 cv
610.119 754.264 609.336 755.045 608.375 755.045 cv
607.414 755.045 606.633 754.264 606.633 753.301 cv
606.633 752.34 607.414 751.559 608.375 751.559 cv
cp
596.106 752.224 mo
596.065 752.285 595.453 753.151 594.971 754.479 cv
594.609 755.473 594.625 756.922 594.625 756.938 cv
594.625 756.941 li
594.625 757.281 594.644 757.617 594.682 757.951 cv
594.682 757.959 594.682 757.965 594.684 757.969 cv
594.688 758.012 594.695 758.053 594.698 758.096 cv
594.729 758.328 594.768 758.563 594.818 758.799 cv
595.518 758.977 599.696 759.951 604.365 759.301 cv
607.293 758.893 609.516 758.028 610.865 757.373 cv
611.987 756.83 612.707 756.338 612.985 756.135 cv
612.707 755.108 611.944 753.494 611.242 752.489 cv
609.237 749.623 607.074 748.889 605.965 748.705 cv
605.541 748.637 605.201 748.596 604.721 748.596 cv
604.274 748.596 603.719 748.632 602.978 748.711 cv
602.235 748.786 601.406 748.983 600.446 749.307 cv
599.098 749.757 597.878 750.465 596.919 751.354 cv
596.886 751.385 li
596.744 751.516 596.448 751.791 596.106 752.224 cv
cp
f
317.002 632.44 mo
317.002 627.37 312.892 623.26 307.823 623.26 cv
302.754 623.26 298.644 627.37 298.644 632.44 cv
298.644 637.509 302.754 641.619 307.823 641.619 cv
312.892 641.619 317.002 637.509 317.002 632.44 cv
cp
f
361.014 612.416 mo
361.014 607.347 356.904 603.237 351.835 603.237 cv
346.765 603.237 342.656 607.347 342.656 612.416 cv
342.656 617.486 346.765 621.595 351.835 621.595 cv
356.904 621.595 361.014 617.486 361.014 612.416 cv
cp
f
215.031 656.485 mo
215.031 651.415 210.922 647.305 205.852 647.305 cv
200.783 647.305 196.673 651.415 196.673 656.485 cv
196.673 661.554 200.783 665.664 205.852 665.664 cv
210.922 665.664 215.031 661.554 215.031 656.485 cv
cp
f
294.266 684.743 mo
294.266 679.673 290.156 675.564 285.087 675.564 cv
280.017 675.564 275.908 679.673 275.908 684.743 cv
275.908 689.813 280.017 693.922 285.087 693.922 cv
290.156 693.922 294.266 689.813 294.266 684.743 cv
cp
f
264.096 684.743 mo
264.096 679.673 259.987 675.564 254.917 675.564 cv
249.848 675.564 245.738 679.673 245.738 684.743 cv
245.738 689.813 249.848 693.922 254.917 693.922 cv
259.987 693.922 264.096 689.813 264.096 684.743 cv
cp
f
181.358 684.743 mo
181.358 679.673 177.248 675.564 172.179 675.564 cv
167.109 675.564 163 679.673 163 684.743 cv
163 689.813 167.109 693.922 172.179 693.922 cv
177.248 693.922 181.358 689.813 181.358 684.743 cv
cp
f
317.002 600.336 mo
317.002 595.266 312.892 591.156 307.823 591.156 cv
302.754 591.156 298.644 595.266 298.644 600.336 cv
298.644 605.405 302.754 609.515 307.823 609.515 cv
312.892 609.515 317.002 605.405 317.002 600.336 cv
cp
f
269.003 573.018 mo
269.003 567.949 264.894 563.839 259.824 563.839 cv
254.755 563.839 250.645 567.949 250.645 573.018 cv
250.645 578.088 254.755 582.198 259.824 582.198 cv
264.894 582.198 269.003 578.088 269.003 573.018 cv
cp
f
239.922 548.418 mo
239.922 543.349 235.812 539.239 230.743 539.239 cv
225.673 539.239 221.564 543.349 221.564 548.418 cv
221.564 553.488 225.673 557.598 230.743 557.598 cv
235.812 557.598 239.922 553.488 239.922 548.418 cv
cp
f
459.534 600.336 mo
459.534 595.266 455.425 591.156 450.355 591.156 cv
445.286 591.156 441.176 595.266 441.176 600.336 cv
441.176 605.405 445.286 609.515 450.355 609.515 cv
455.425 609.515 459.534 605.405 459.534 600.336 cv
cp
f
426.925 693.315 mo
426.925 688.245 422.815 684.136 417.746 684.136 cv
412.676 684.136 408.567 688.245 408.567 693.315 cv
408.567 698.385 412.676 702.494 417.746 702.494 cv
422.815 702.494 426.925 698.385 426.925 693.315 cv
cp
f
743.348 632.545 mo
743.348 627.476 739.239 623.366 734.169 623.366 cv
729.1 623.366 724.99 627.476 724.99 632.545 cv
724.99 637.615 729.1 641.725 734.169 641.725 cv
739.239 641.725 743.348 637.615 743.348 632.545 cv
cp
f
463.277 709.574 mo
463.277 704.504 459.167 700.394 454.098 700.394 cv
449.028 700.394 444.918 704.504 444.918 709.574 cv
444.918 714.643 449.028 718.753 454.098 718.753 cv
459.167 718.753 463.277 714.643 463.277 709.574 cv
cp
f
659.958 685.906 mo
659.958 680.837 655.848 676.727 650.778 676.727 cv
645.709 676.727 641.599 680.837 641.599 685.906 cv
641.599 690.976 645.709 695.086 650.778 695.086 cv
655.848 695.086 659.958 690.976 659.958 685.906 cv
cp
f
601.536 685.906 mo
601.536 680.837 597.427 676.727 592.357 676.727 cv
587.288 676.727 583.178 680.837 583.178 685.906 cv
583.178 690.976 587.288 695.086 592.357 695.086 cv
597.427 695.086 601.536 690.976 601.536 685.906 cv
cp
f
594.195 641.619 mo
594.195 636.549 590.086 632.44 585.016 632.44 cv
579.947 632.44 575.837 636.549 575.837 641.619 cv
575.837 646.688 579.947 650.798 585.016 650.798 cv
590.086 650.798 594.195 646.688 594.195 641.619 cv
cp
f
621.733 641.619 mo
621.733 636.549 617.623 632.44 612.554 632.44 cv
607.484 632.44 603.375 636.549 603.375 641.619 cv
603.375 646.688 607.484 650.798 612.554 650.798 cv
617.623 650.798 621.733 646.688 621.733 641.619 cv
cp
f
695.793 641.619 mo
695.793 636.549 691.683 632.44 686.614 632.44 cv
681.544 632.44 677.434 636.549 677.434 641.619 cv
677.434 646.688 681.544 650.798 686.614 650.798 cv
691.683 650.798 695.793 646.688 695.793 641.619 cv
cp
f
513.12 629.741 mo
513.12 624.671 509.011 620.562 503.941 620.562 cv
498.872 620.562 494.762 624.671 494.762 629.741 cv
494.762 634.81 498.872 638.92 503.941 638.92 cv
509.011 638.92 513.12 634.81 513.12 629.741 cv
cp
f
560.601 619.996 mo
560.601 614.927 556.492 610.817 551.422 610.817 cv
546.353 610.817 542.243 614.927 542.243 619.996 cv
542.243 625.066 546.353 629.176 551.422 629.176 cv
556.492 629.176 560.601 625.066 560.601 619.996 cv
cp
f
603.375 599.351 mo
603.375 594.282 599.265 590.172 594.195 590.172 cv
589.126 590.172 585.016 594.282 585.016 599.351 cv
585.016 604.421 589.126 608.531 594.195 608.531 cv
599.265 608.531 603.375 604.421 603.375 599.351 cv
cp
f
733.348 583.392 mo
733.348 578.322 729.238 574.212 724.169 574.212 cv
719.099 574.212 714.99 578.322 714.99 583.392 cv
714.99 588.461 719.099 592.571 724.169 592.571 cv
729.238 592.571 733.348 588.461 733.348 583.392 cv
cp
f
769.391 581.999 mo
769.391 576.93 765.281 572.82 760.211 572.82 cv
755.142 572.82 751.032 576.93 751.032 581.999 cv
751.032 587.069 755.142 591.179 760.211 591.179 cv
765.281 591.179 769.391 587.069 769.391 581.999 cv
cp
f
675.41 620.169 mo
675.41 615.099 671.301 610.99 666.231 610.99 cv
661.161 610.99 657.052 615.099 657.052 620.169 cv
657.052 625.238 661.161 629.348 666.231 629.348 cv
671.301 629.348 675.41 625.238 675.41 620.169 cv
cp
f
244.148 472.141 mo
244.148 467.071 240.038 462.961 234.968 462.961 cv
229.899 462.961 225.789 467.071 225.789 472.141 cv
225.789 477.21 229.899 481.32 234.968 481.32 cv
240.038 481.32 244.148 477.21 244.148 472.141 cv
cp
f
124.293 563.839 mo
124.293 558.77 120.183 554.66 115.114 554.66 cv
110.044 554.66 105.934 558.77 105.934 563.839 cv
105.934 568.909 110.044 573.018 115.114 573.018 cv
120.183 573.018 124.293 568.909 124.293 563.839 cv
cp
f
95.9062 559.409 mo
95.9062 554.34 91.7965 550.23 86.727 550.23 cv
81.6575 550.23 77.5478 554.34 77.5478 559.409 cv
77.5478 564.479 81.6575 568.588 86.727 568.588 cv
91.7965 568.588 95.9062 564.479 95.9062 559.409 cv
cp
f
125.36 529.197 mo
125.36 524.127 121.251 520.017 116.181 520.017 cv
111.112 520.017 107.002 524.127 107.002 529.197 cv
107.002 534.266 111.112 538.376 116.181 538.376 cv
121.251 538.376 125.36 534.266 125.36 529.197 cv
cp
f
107.706 596.906 mo
107.706 591.836 103.596 587.727 98.5269 587.727 cv
93.4573 587.727 89.3477 591.836 89.3477 596.906 cv
89.3477 601.975 93.4573 606.085 98.5269 606.085 cv
103.596 606.085 107.706 601.975 107.706 596.906 cv
cp
f
95.9062 642.75 mo
95.9062 637.68 91.7965 633.57 86.727 633.57 cv
81.6575 633.57 77.5478 637.68 77.5478 642.75 cv
77.5478 647.819 81.6575 651.929 86.727 651.929 cv
91.7965 651.929 95.9062 647.819 95.9062 642.75 cv
cp
f
55.4029 668.033 mo
55.4029 662.964 51.2933 658.854 46.2237 658.854 cv
41.1542 658.854 37.0446 662.964 37.0446 668.033 cv
37.0446 673.103 41.1542 677.212 46.2237 677.212 cv
51.2933 677.212 55.4029 673.103 55.4029 668.033 cv
cp
f
114.249 680.226 mo
114.249 675.156 110.139 671.047 105.069 671.047 cv
99.9999 671.047 95.8903 675.156 95.8903 680.226 cv
95.8903 685.295 99.9999 689.405 105.069 689.405 cv
110.139 689.405 114.249 685.295 114.249 680.226 cv
cp
f
217.699 502.11 mo
217.699 497.04 213.589 492.93 208.52 492.93 cv
203.45 492.93 199.34 497.04 199.34 502.11 cv
199.34 507.179 203.45 511.289 208.52 511.289 cv
213.589 511.289 217.699 507.179 217.699 502.11 cv
cp
f
197.25 467.861 mo
197.25 462.791 193.14 458.682 188.071 458.682 cv
183.001 458.682 178.891 462.791 178.891 467.861 cv
178.891 472.931 183.001 477.04 188.071 477.04 cv
193.14 477.04 197.25 472.931 197.25 467.861 cv
cp
f
221.319 445.865 mo
221.319 440.796 217.209 436.686 212.14 436.686 cv
207.07 436.686 202.961 440.796 202.961 445.865 cv
202.961 450.935 207.07 455.045 212.14 455.045 cv
217.209 455.045 221.319 450.935 221.319 445.865 cv
cp
f
163.9 485.279 mo
163.9 480.21 159.791 476.1 154.721 476.1 cv
149.652 476.1 145.542 480.21 145.542 485.279 cv
145.542 490.349 149.652 494.458 154.721 494.458 cv
159.791 494.458 163.9 490.349 163.9 485.279 cv
cp
f
178.683 443.505 mo
178.683 438.435 174.573 434.326 169.504 434.326 cv
164.434 434.326 160.325 438.435 160.325 443.505 cv
160.325 448.574 164.434 452.684 169.504 452.684 cv
174.573 452.684 178.683 448.574 178.683 443.505 cv
cp
f
95.5789 423.87 mo
95.5789 418.8 91.4692 414.691 86.3997 414.691 cv
81.3302 414.691 77.2205 418.8 77.2205 423.87 cv
77.2205 428.939 81.3302 433.049 86.3997 433.049 cv
91.4692 433.049 95.5789 428.939 95.5789 423.87 cv
cp
f
197.25 421.662 mo
197.25 416.592 193.14 412.483 188.071 412.483 cv
183.001 412.483 178.891 416.592 178.891 421.662 cv
178.891 426.731 183.001 430.841 188.071 430.841 cv
193.14 430.841 197.25 426.731 197.25 421.662 cv
cp
f
77.6128 452.327 mo
77.6128 447.258 73.5032 443.148 68.4337 443.148 cv
63.3641 443.148 59.2545 447.258 59.2545 452.327 cv
59.2545 457.397 63.3641 461.507 68.4337 461.507 cv
73.5032 461.507 77.6128 457.397 77.6128 452.327 cv
cp
f
379.26 515.761 mo
379.26 510.691 375.15 506.581 370.081 506.581 cv
365.011 506.581 360.901 510.691 360.901 515.761 cv
360.901 520.83 365.011 524.94 370.081 524.94 cv
375.15 524.94 379.26 520.83 379.26 515.761 cv
cp
f
332.629 526.338 mo
332.629 521.268 328.519 517.159 323.45 517.159 cv
318.38 517.159 314.271 521.268 314.271 526.338 cv
314.271 531.407 318.38 535.517 323.45 535.517 cv
328.519 535.517 332.629 531.407 332.629 526.338 cv
cp
f
335.009 491.11 mo
335.009 486.04 330.899 481.931 325.829 481.931 cv
320.76 481.931 316.65 486.04 316.65 491.11 cv
316.65 496.179 320.76 500.289 325.829 500.289 cv
330.899 500.289 335.009 496.179 335.009 491.11 cv
cp
f
436.104 517.609 mo
436.104 512.54 431.995 508.43 426.925 508.43 cv
421.856 508.43 417.746 512.54 417.746 517.609 cv
417.746 522.679 421.856 526.789 426.925 526.789 cv
431.995 526.789 436.104 522.679 436.104 517.609 cv
cp
f
464.259 489.732 mo
464.259 484.663 460.15 480.553 455.08 480.553 cv
450.011 480.553 445.901 484.663 445.901 489.732 cv
445.901 494.802 450.011 498.911 455.08 498.911 cv
460.15 498.911 464.259 494.802 464.259 489.732 cv
cp
f
371.826 443.148 mo
371.826 438.079 367.716 433.969 362.647 433.969 cv
357.577 433.969 353.468 438.079 353.468 443.148 cv
353.468 448.218 357.577 452.327 362.647 452.327 cv
367.716 452.327 371.826 448.218 371.826 443.148 cv
cp
f
286.05 406.123 mo
286.05 401.053 281.94 396.944 276.871 396.944 cv
271.801 396.944 267.691 401.053 267.691 406.123 cv
267.691 411.192 271.801 415.302 276.871 415.302 cv
281.94 415.302 286.05 411.192 286.05 406.123 cv
cp
f
408.725 398.113 mo
408.725 393.044 404.616 388.934 399.546 388.934 cv
394.476 388.934 390.367 393.044 390.367 398.113 cv
390.367 403.183 394.476 407.292 399.546 407.292 cv
404.616 407.292 408.725 403.183 408.725 398.113 cv
cp
f
436.596 346.671 mo
436.596 341.601 432.487 337.492 427.417 337.492 cv
422.348 337.492 418.238 341.601 418.238 346.671 cv
418.238 351.74 422.348 355.85 427.417 355.85 cv
432.487 355.85 436.596 351.74 436.596 346.671 cv
cp
f
365.843 408.69 mo
365.843 403.62 361.733 399.511 356.664 399.511 cv
351.594 399.511 347.485 403.62 347.485 408.69 cv
347.485 413.76 351.594 417.869 356.664 417.869 cv
361.733 417.869 365.843 413.76 365.843 408.69 cv
cp
f
363.109 365.569 mo
363.109 360.499 358.999 356.39 353.93 356.39 cv
348.86 356.39 344.75 360.499 344.75 365.569 cv
344.75 370.638 348.86 374.748 353.93 374.748 cv
358.999 374.748 363.109 370.638 363.109 365.569 cv
cp
f
379.26 480.553 mo
379.26 475.483 375.15 471.374 370.081 471.374 cv
365.011 471.374 360.901 475.483 360.901 480.553 cv
360.901 485.623 365.011 489.732 370.081 489.732 cv
375.15 489.732 379.26 485.623 379.26 480.553 cv
cp
f
128.723 305.569 mo
128.723 300.5 124.614 296.39 119.544 296.39 cv
114.475 296.39 110.365 300.5 110.365 305.569 cv
110.365 310.639 114.475 314.748 119.544 314.748 cv
124.614 314.748 128.723 310.639 128.723 305.569 cv
cp
f
128.723 263.315 mo
128.723 258.246 124.614 254.136 119.544 254.136 cv
114.475 254.136 110.365 258.246 110.365 263.315 cv
110.365 268.385 114.475 272.494 119.544 272.494 cv
124.614 272.494 128.723 268.385 128.723 263.315 cv
cp
f
150.02 117.05 mo
150.02 111.981 145.91 107.871 140.841 107.871 cv
135.771 107.871 131.661 111.981 131.661 117.05 cv
131.661 122.12 135.771 126.23 140.841 126.23 cv
145.91 126.23 150.02 122.12 150.02 117.05 cv
cp
f
120.878 157.783 mo
120.878 152.713 116.769 148.603 111.699 148.603 cv
106.63 148.603 102.52 152.713 102.52 157.783 cv
102.52 162.852 106.63 166.962 111.699 166.962 cv
116.769 166.962 120.878 162.852 120.878 157.783 cv
cp
f
54.0274 105.031 mo
54.0274 99.9613 49.9177 95.8517 44.8482 95.8517 cv
39.7787 95.8517 35.669 99.9613 35.669 105.031 cv
35.669 110.1 39.7787 114.21 44.8482 114.21 cv
49.9177 114.21 54.0274 110.1 54.0274 105.031 cv
cp
f
37.5144 123.389 mo
37.5144 118.32 33.4047 114.21 28.3352 114.21 cv
23.2657 114.21 19.156 118.32 19.156 123.389 cv
19.156 128.459 23.2657 132.568 28.3352 132.568 cv
33.4047 132.568 37.5144 128.459 37.5144 123.389 cv
cp
f
215.842 114.21 mo
215.842 109.14 211.732 105.031 206.663 105.031 cv
201.593 105.031 197.483 109.14 197.483 114.21 cv
197.483 119.28 201.593 123.389 206.663 123.389 cv
211.732 123.389 215.842 119.28 215.842 114.21 cv
cp
f
163.041 305.569 mo
163.041 300.5 158.931 296.39 153.862 296.39 cv
148.792 296.39 144.682 300.5 144.682 305.569 cv
144.682 310.639 148.792 314.748 153.862 314.748 cv
158.931 314.748 163.041 310.639 163.041 305.569 cv
cp
f
206.429 305.569 mo
206.429 300.5 202.319 296.39 197.25 296.39 cv
192.18 296.39 188.071 300.5 188.071 305.569 cv
188.071 310.639 192.18 314.748 197.25 314.748 cv
202.319 314.748 206.429 310.639 206.429 305.569 cv
cp
f
239.864 275.035 mo
239.864 269.965 235.754 265.855 230.685 265.855 cv
225.615 265.855 221.506 269.965 221.506 275.035 cv
221.506 280.104 225.615 284.214 230.685 284.214 cv
235.754 284.214 239.864 280.104 239.864 275.035 cv
cp
f
329.871 238.128 mo
329.871 233.059 325.762 228.949 320.692 228.949 cv
315.623 228.949 311.513 233.059 311.513 238.128 cv
311.513 243.198 315.623 247.307 320.692 247.307 cv
325.762 247.307 329.871 243.198 329.871 238.128 cv
cp
f
320.692 290.081 mo
320.692 285.011 316.583 280.901 311.513 280.901 cv
306.444 280.901 302.334 285.011 302.334 290.081 cv
302.334 295.15 306.444 299.26 311.513 299.26 cv
316.583 299.26 320.692 295.15 320.692 290.081 cv
cp
f
287.709 311.268 mo
287.709 306.199 283.599 302.089 278.53 302.089 cv
273.46 302.089 269.351 306.199 269.351 311.268 cv
269.351 316.338 273.46 320.447 278.53 320.447 cv
283.599 320.447 287.709 316.338 287.709 311.268 cv
cp
f
266.464 337.468 mo
266.464 332.399 262.355 328.289 257.285 328.289 cv
252.216 328.289 248.106 332.399 248.106 337.468 cv
248.106 342.538 252.216 346.648 257.285 346.648 cv
262.355 346.648 266.464 342.538 266.464 337.468 cv
cp
f
313.543 337.468 mo
313.543 332.399 309.433 328.289 304.364 328.289 cv
299.294 328.289 295.185 332.399 295.185 337.468 cv
295.185 342.538 299.294 346.648 304.364 346.648 cv
309.433 346.648 313.543 342.538 313.543 337.468 cv
cp
f
343.297 328.289 mo
343.297 323.22 339.187 319.11 334.117 319.11 cv
329.048 319.11 324.938 323.22 324.938 328.289 cv
324.938 333.359 329.048 337.468 334.117 337.468 cv
339.187 337.468 343.297 333.359 343.297 328.289 cv
cp
f
417.904 328.289 mo
417.904 323.22 413.795 319.11 408.725 319.11 cv
403.656 319.11 399.546 323.22 399.546 328.289 cv
399.546 333.359 403.656 337.468 408.725 337.468 cv
413.795 337.468 417.904 333.359 417.904 328.289 cv
cp
f
362.647 262.107 mo
362.647 257.037 358.537 252.928 353.468 252.928 cv
348.398 252.928 344.288 257.037 344.288 262.107 cv
344.288 267.176 348.398 271.286 353.468 271.286 cv
358.537 271.286 362.647 267.176 362.647 262.107 cv
cp
f
378.346 239.612 mo
378.346 234.542 374.236 230.432 369.166 230.432 cv
364.097 230.432 359.987 234.542 359.987 239.612 cv
359.987 244.681 364.097 248.791 369.166 248.791 cv
374.236 248.791 378.346 244.681 378.346 239.612 cv
cp
f
529.826 308.156 mo
529.826 303.086 525.716 298.977 520.646 298.977 cv
515.577 298.977 511.467 303.086 511.467 308.156 cv
511.467 313.225 515.577 317.335 520.646 317.335 cv
525.716 317.335 529.826 313.225 529.826 308.156 cv
cp
f
459.798 238.128 mo
459.798 233.059 455.689 228.949 450.619 228.949 cv
445.549 228.949 441.44 233.059 441.44 238.128 cv
441.44 243.198 445.549 247.307 450.619 247.307 cv
455.689 247.307 459.798 243.198 459.798 238.128 cv
cp
f
619.747 290.646 mo
619.747 285.577 615.638 281.467 610.568 281.467 cv
605.498 281.467 601.389 285.577 601.389 290.646 cv
601.389 295.716 605.498 299.826 610.568 299.826 cv
615.638 299.826 619.747 295.716 619.747 290.646 cv
cp
f
619.747 258.119 mo
619.747 253.05 615.638 248.94 610.568 248.94 cv
605.498 248.94 601.389 253.05 601.389 258.119 cv
601.389 263.189 605.498 267.299 610.568 267.299 cv
615.638 267.299 619.747 263.189 619.747 258.119 cv
cp
f
652.416 230.432 mo
652.416 225.363 648.307 221.253 643.237 221.253 cv
638.167 221.253 634.058 225.363 634.058 230.432 cv
634.058 235.502 638.167 239.612 643.237 239.612 cv
648.307 239.612 652.416 235.502 652.416 230.432 cv
cp
f
619.747 230.432 mo
619.747 225.363 615.638 221.253 610.568 221.253 cv
605.498 221.253 601.389 225.363 601.389 230.432 cv
601.389 235.502 605.498 239.612 610.568 239.612 cv
615.638 239.612 619.747 235.502 619.747 230.432 cv
cp
f
775.358 250.053 mo
775.358 244.984 771.248 240.874 766.178 240.874 cv
761.109 240.874 756.999 244.984 756.999 250.053 cv
756.999 255.123 761.109 259.232 766.178 259.232 cv
771.248 259.232 775.358 255.123 775.358 250.053 cv
cp
f
750.517 281.691 mo
750.517 276.622 746.408 272.512 741.338 272.512 cv
736.269 272.512 732.159 276.622 732.159 281.691 cv
732.159 286.761 736.269 290.87 741.338 290.87 cv
746.408 290.87 750.517 286.761 750.517 281.691 cv
cp
f
775.358 222.975 mo
775.358 217.905 771.248 213.796 766.178 213.796 cv
761.109 213.796 756.999 217.905 756.999 222.975 cv
756.999 228.044 761.109 232.154 766.178 232.154 cv
771.248 232.154 775.358 228.044 775.358 222.975 cv
cp
f
775.358 195.62 mo
775.358 190.55 771.248 186.441 766.178 186.441 cv
761.109 186.441 756.999 190.55 756.999 195.62 cv
756.999 200.689 761.109 204.799 766.178 204.799 cv
771.248 204.799 775.358 200.689 775.358 195.62 cv
cp
f
706.197 157.783 mo
706.197 152.713 702.088 148.603 697.018 148.603 cv
691.949 148.603 687.839 152.713 687.839 157.783 cv
687.839 162.852 691.949 166.962 697.018 166.962 cv
702.088 166.962 706.197 162.852 706.197 157.783 cv
cp
f
652.416 157.783 mo
652.416 152.713 648.307 148.603 643.237 148.603 cv
638.167 148.603 634.058 152.713 634.058 157.783 cv
634.058 162.852 638.167 166.962 643.237 166.962 cv
648.307 166.962 652.416 162.852 652.416 157.783 cv
cp
f
551.048 157.783 mo
551.048 152.713 546.938 148.603 541.869 148.603 cv
536.799 148.603 532.689 152.713 532.689 157.783 cv
532.689 162.852 536.799 166.962 541.869 166.962 cv
546.938 166.962 551.048 162.852 551.048 157.783 cv
cp
f
385.229 182.947 mo
385.229 177.877 381.119 173.768 376.05 173.768 cv
370.98 173.768 366.871 177.877 366.871 182.947 cv
366.871 188.016 370.98 192.126 376.05 192.126 cv
381.119 192.126 385.229 188.016 385.229 182.947 cv
cp
f
412.954 182.947 mo
412.954 177.877 408.845 173.768 403.775 173.768 cv
398.706 173.768 394.596 177.877 394.596 182.947 cv
394.596 188.016 398.706 192.126 403.775 192.126 cv
408.845 192.126 412.954 188.016 412.954 182.947 cv
cp
f
495.668 182.947 mo
495.668 177.877 491.559 173.768 486.489 173.768 cv
481.419 173.768 477.31 177.877 477.31 182.947 cv
477.31 188.016 481.419 192.126 486.489 192.126 cv
491.559 192.126 495.668 188.016 495.668 182.947 cv
cp
f
416.326 148.603 mo
416.326 143.534 412.216 139.424 407.147 139.424 cv
402.077 139.424 397.967 143.534 397.967 148.603 cv
397.967 153.673 402.077 157.783 407.147 157.783 cv
412.216 157.783 416.326 153.673 416.326 148.603 cv
cp
f
443.189 148.603 mo
443.189 143.534 439.079 139.424 434.01 139.424 cv
428.94 139.424 424.83 143.534 424.83 148.603 cv
424.83 153.673 428.94 157.783 434.01 157.783 cv
439.079 157.783 443.189 153.673 443.189 148.603 cv
cp
f
386.512 147.991 mo
386.512 142.921 382.402 138.812 377.333 138.812 cv
372.263 138.812 368.153 142.921 368.153 147.991 cv
368.153 153.06 372.263 157.17 377.333 157.17 cv
382.402 157.17 386.512 153.06 386.512 147.991 cv
cp
f
482.331 130.245 mo
482.331 125.175 478.221 121.066 473.152 121.066 cv
468.082 121.066 463.973 125.175 463.973 130.245 cv
463.973 135.314 468.082 139.424 473.152 139.424 cv
478.221 139.424 482.331 135.314 482.331 130.245 cv
cp
f
482.331 95.2891 mo
482.331 90.2196 478.221 86.1099 473.152 86.1099 cv
468.082 86.1099 463.973 90.2196 463.973 95.2891 cv
463.973 100.359 468.082 104.468 473.152 104.468 cv
478.221 104.468 482.331 100.359 482.331 95.2891 cv
cp
f
522.528 95.2891 mo
522.528 90.2196 518.418 86.1099 513.349 86.1099 cv
508.279 86.1099 504.169 90.2196 504.169 95.2891 cv
504.169 100.359 508.279 104.468 513.349 104.468 cv
518.418 104.468 522.528 100.359 522.528 95.2891 cv
cp
f
558.662 95.2891 mo
558.662 90.2196 554.553 86.1099 549.483 86.1099 cv
544.414 86.1099 540.304 90.2196 540.304 95.2891 cv
540.304 100.359 544.414 104.468 549.483 104.468 cv
554.553 104.468 558.662 100.359 558.662 95.2891 cv
cp
f
619.747 121.066 mo
619.747 115.996 615.638 111.887 610.568 111.887 cv
605.498 111.887 601.389 115.996 601.389 121.066 cv
601.389 126.135 605.498 130.245 610.568 130.245 cv
615.638 130.245 619.747 126.135 619.747 121.066 cv
cp
f
752.279 96.1236 mo
752.279 91.0541 748.169 86.9444 743.099 86.9444 cv
738.03 86.9444 733.92 91.0541 733.92 96.1236 cv
733.92 101.193 738.03 105.303 743.099 105.303 cv
748.169 105.303 752.279 101.193 752.279 96.1236 cv
cp
f
523.906 453.458 mo
523.906 448.388 519.797 444.279 514.727 444.279 cv
509.658 444.279 505.548 448.388 505.548 453.458 cv
505.548 458.527 509.658 462.637 514.727 462.637 cv
519.797 462.637 523.906 458.527 523.906 453.458 cv
cp
f
565.187 458.547 mo
565.187 453.478 561.077 449.368 556.008 449.368 cv
550.938 449.368 546.828 453.478 546.828 458.547 cv
546.828 463.617 550.938 467.727 556.008 467.727 cv
561.077 467.727 565.187 463.617 565.187 458.547 cv
cp
f
599.48 461.28 mo
599.48 456.21 595.371 452.101 590.301 452.101 cv
585.232 452.101 581.122 456.21 581.122 461.28 cv
581.122 466.349 585.232 470.459 590.301 470.459 cv
595.371 470.459 599.48 466.349 599.48 461.28 cv
cp
f
724.169 472.78 mo
724.169 467.71 720.059 463.6 714.99 463.6 cv
709.92 463.6 705.81 467.71 705.81 472.78 cv
705.81 477.849 709.92 481.959 714.99 481.959 cv
720.059 481.959 724.169 477.849 724.169 472.78 cv
cp
f
752.185 441.595 mo
752.185 436.525 748.075 432.415 743.006 432.415 cv
737.936 432.415 733.826 436.525 733.826 441.595 cv
733.826 446.664 737.936 450.774 743.006 450.774 cv
748.075 450.774 752.185 446.664 752.185 441.595 cv
cp
f
759.862 485.078 mo
759.862 480.009 755.752 475.899 750.682 475.899 cv
745.613 475.899 741.503 480.009 741.503 485.078 cv
741.503 490.148 745.613 494.257 750.682 494.257 cv
755.752 494.257 759.862 490.148 759.862 485.078 cv
cp
f
748.247 397.862 mo
748.247 392.793 744.137 388.683 739.068 388.683 cv
733.998 388.683 729.889 392.793 729.889 397.862 cv
729.889 402.932 733.998 407.042 739.068 407.042 cv
744.137 407.042 748.247 402.932 748.247 397.862 cv
cp
f
658.42 453.534 mo
658.42 448.464 654.311 444.355 649.241 444.355 cv
644.172 444.355 640.062 448.464 640.062 453.534 cv
640.062 458.603 644.172 462.713 649.241 462.713 cv
654.311 462.713 658.42 458.603 658.42 453.534 cv
cp
f
678.452 425.951 mo
678.452 420.882 674.342 416.772 669.272 416.772 cv
664.203 416.772 660.093 420.882 660.093 425.951 cv
660.093 431.021 664.203 435.13 669.272 435.13 cv
674.342 435.13 678.452 431.021 678.452 425.951 cv
cp
f
645.917 383.81 mo
645.917 378.74 641.807 374.63 636.737 374.63 cv
631.668 374.63 627.558 378.74 627.558 383.81 cv
627.558 388.879 631.668 392.989 636.737 392.989 cv
641.807 392.989 645.917 388.879 645.917 383.81 cv
cp
f
307.823 630.148 mo
187.883 630.148 li
123.676 694.356 li
0 694.356 li
0 698.938 li
125.573 698.938 li
189.781 634.73 li
307.823 634.73 li
307.823 630.148 li
cp
f
307.823 598.045 mo
187.883 598.045 li
123.676 662.253 li
68.3648 662.253 li
40.7653 634.653 li
0 634.653 li
0 639.235 li
38.8681 639.235 li
66.4675 666.834 li
125.573 666.834 li
189.781 602.627 li
307.823 602.627 li
307.823 598.045 li
cp
f
69.7072 0 mo
65.1252 0 li
65.1252 305.638 li
150.103 390.615 li
306.874 390.615 li
361.027 444.768 li
364.267 441.528 li
308.771 386.033 li
152 386.033 li
69.7072 303.74 li
69.7072 0 li
cp
f
236.588 470.521 mo
233.349 473.76 li
317.404 557.817 li
799.995 557.817 li
799.995 553.235 li
319.302 553.235 li
236.588 470.521 li
cp
f
516.348 451.838 mo
513.108 455.077 li
583.859 525.829 li
799.995 525.829 li
799.995 521.247 li
585.756 521.247 li
516.348 451.838 li
cp
f
310.114 0 mo
305.532 0 li
305.532 161.437 li
362.491 218.394 li
496.802 218.394 li
538.818 260.411 li
610.568 260.411 li
610.568 255.829 li
540.715 255.829 li
498.7 213.812 li
364.388 213.812 li
310.114 159.54 li
310.114 0 li
cp
f
280.821 0 mo
276.239 0 li
276.239 179.953 li
152.242 303.949 li
155.481 307.189 li
280.821 181.85 li
280.821 0 li
cp
f
246.503 0 mo
241.921 0 li
241.921 179.953 li
117.924 303.949 li
121.164 307.189 li
246.503 181.85 li
246.503 0 li
cp
f
460.815 214.484 mo
457.575 217.723 li
532.789 292.937 li
610.568 292.937 li
610.568 288.355 li
534.686 288.355 li
460.815 214.484 li
cp
f
336.272 0 mo
331.69 0 li
331.69 141.828 li
374.431 184.566 li
377.67 181.327 li
336.272 139.93 li
336.272 0 li
cp
f
357.306 0 mo
352.724 0 li
352.724 126.623 li
375.713 149.61 li
378.953 146.371 li
357.306 124.726 li
357.306 0 li
cp
f
474.772 128.625 mo
471.533 131.864 li
515.726 176.058 li
800 176.058 li
800 171.476 li
517.623 171.476 li
474.772 128.625 li
cp
f
474.772 93.6688 mo
471.533 96.9084 li
515.726 141.103 li
800 141.103 li
800 136.521 li
517.623 136.521 li
474.772 93.6688 li
cp
f
409.437 0 mo
404.855 0 li
404.855 147.991 li
409.437 147.991 li
409.437 0 li
cp
f
436.301 0 mo
431.719 0 li
431.719 147.991 li
436.301 147.991 li
436.301 0 li
cp
f
486.488 180.655 mo
403.775 180.655 li
403.775 185.237 li
486.488 185.237 li
486.488 180.655 li
cp
f
661.807 202.508 mo
546.31 202.508 li
515.232 233.586 li
518.472 236.825 li
548.207 207.09 li
659.91 207.09 li
705.165 252.345 li
766.178 252.345 li
766.178 247.763 li
707.062 247.763 li
661.807 202.508 li
cp
f
660.304 172.148 mo
657.064 175.387 li
706.943 225.266 li
766.178 225.266 li
766.178 220.684 li
708.84 220.684 li
660.304 172.148 li
cp
f
766.178 193.329 mo
680.536 193.329 li
680.536 197.911 li
766.178 197.911 li
766.178 193.329 li
cp
f
514.968 94.1252 mo
511.728 97.3648 li
554.795 140.432 li
558.035 137.192 li
514.968 94.1252 li
cp
f
551.104 94.1252 mo
547.864 97.3648 li
590.931 140.432 li
594.17 137.192 li
551.104 94.1252 li
cp
f
800 118.774 mo
610.568 118.774 li
610.568 123.356 li
800 123.356 li
800 118.774 li
cp
f
574.554 72.5486 mo
571.314 75.7882 li
593.942 98.4149 li
743.099 98.4149 li
743.099 93.8329 li
595.839 93.8329 li
574.554 72.5486 li
cp
f
242.592 137.805 mo
118.701 261.695 li
121.941 264.935 li
245.831 141.045 li
242.592 137.805 li
cp
f
88.5558 0 mo
83.9738 0 li
83.9738 306.518 li
152.489 375.032 li
187.027 375.032 li
322.312 239.747 li
319.072 236.508 li
185.13 370.45 li
154.386 370.45 li
88.5558 304.62 li
88.5558 0 li
cp
f
294.667 0 mo
290.085 0 li
290.085 212.394 li
229.065 273.414 li
232.305 276.654 li
294.667 214.291 li
294.667 0 li
cp
f
195.63 303.949 mo
140.138 359.442 li
143.377 362.682 li
198.87 307.189 li
195.63 303.949 li
cp
f
143.131 117.05 mo
138.549 117.05 li
138.549 171.902 li
84.645 225.806 li
87.8846 229.045 li
143.131 173.799 li
143.131 117.05 li
cp
f
205.042 112.59 mo
161.412 156.221 li
161.412 182.66 li
84.645 259.427 li
87.8846 262.666 li
165.994 184.557 li
165.994 158.118 li
208.282 115.83 li
205.042 112.59 li
cp
f
198.245 72.5486 mo
179.637 91.157 li
109.583 91.157 li
109.583 157.17 li
114.165 157.17 li
114.165 95.7391 li
181.534 95.7391 li
201.485 75.7882 li
198.245 72.5486 li
cp
f
30.6258 123.389 mo
26.0438 123.389 li
26.0438 444.476 li
0 470.521 li
0 477 li
30.6258 446.373 li
30.6258 123.389 li
cp
f
47.1387 107.871 mo
42.5567 107.871 li
42.5567 455.57 li
0 498.127 li
.0137793 504.593 li
47.1387 457.467 li
47.1387 107.871 li
cp
f
799.995 358.771 mo
703.526 358.771 li
665.235 397.062 li
485.54 397.062 li
368.461 514.141 li
371.701 517.381 li
487.437 401.644 li
667.132 401.644 li
705.423 363.353 li
799.995 363.353 li
799.995 358.771 li
cp
f
799.995 323.563 mo
703.526 323.563 li
665.235 361.854 li
485.54 361.854 li
368.461 478.933 li
371.701 482.173 li
487.437 366.436 li
667.132 366.436 li
705.423 328.145 li
799.995 328.145 li
799.995 323.563 li
cp
f
644.857 228.813 mo
641.618 232.052 li
722.409 312.843 li
799.995 312.843 li
799.995 308.261 li
724.306 308.261 li
644.857 228.813 li
cp
f
742.958 280.071 mo
739.718 283.311 li
768.581 312.172 li
771.82 308.932 li
742.958 280.071 li
cp
f
695.398 282.593 mo
638.72 339.273 li
460.143 339.273 li
408.661 287.79 li
311.513 287.79 li
311.513 292.372 li
406.764 292.372 li
458.246 343.855 li
640.617 343.855 li
698.638 285.833 li
695.398 282.593 li
cp
f
409.304 259.816 mo
353.467 259.816 li
353.467 264.398 li
407.407 264.398 li
472.204 329.195 li
631.839 329.195 li
686.919 274.114 li
683.679 270.874 li
629.942 324.613 li
474.101 324.613 li
409.304 259.816 li
cp
f
423.795 237.321 mo
369.167 237.321 li
369.167 241.903 li
421.897 241.903 li
509.132 329.138 li
512.371 325.899 li
423.795 237.321 li
cp
f
452.238 236.508 mo
448.999 239.747 li
519.026 309.775 li
522.266 306.536 li
452.238 236.508 li
cp
f
540.64 211.417 mo
537.401 214.657 li
555.466 232.724 li
610.568 232.724 li
610.568 228.142 li
557.364 228.142 li
540.64 211.417 li
cp
f
800 155.492 mo
697.018 155.492 li
697.018 160.074 li
800 160.074 li
800 155.492 li
cp
f
643.232 155.492 mo
541.868 155.492 li
541.868 160.074 li
643.232 160.074 li
643.232 155.492 li
cp
f
666.231 617.878 mo
580.19 617.878 li
533.933 664.135 li
402.746 664.135 li
342.668 724.213 li
345.908 727.452 li
404.643 668.717 li
535.83 668.717 li
582.087 622.46 li
666.231 622.46 li
666.231 617.878 li
cp
f
448.736 598.452 mo
336.581 710.606 li
0 710.606 li
0 715.188 li
338.478 715.188 li
451.976 601.691 li
448.736 598.452 li
cp
f
416.126 691.695 mo
383.609 724.213 li
386.849 727.452 li
419.366 694.935 li
416.126 691.695 li
cp
f
799.982 652.061 mo
768.427 683.615 li
650.779 683.615 li
650.779 688.197 li
770.324 688.197 li
800 658.522 li
799.982 652.061 li
cp
f
798.38 707.283 mo
454.098 707.283 li
454.098 711.865 li
798.38 711.865 li
798.38 707.283 li
cp
f
583.397 641.557 mo
542.269 682.684 li
451.542 682.684 li
410.013 724.213 li
413.252 727.452 li
453.439 687.266 li
544.166 687.266 li
586.636 644.797 li
583.397 641.557 li
cp
f
685.553 580.69 mo
552.078 580.69 li
533.621 599.147 li
490.965 599.147 li
425.306 664.806 li
428.545 668.046 li
492.862 603.729 li
535.518 603.729 li
553.975 585.272 li
683.655 585.272 li
732.549 634.165 li
735.789 630.926 li
685.553 580.69 li
cp
f
672.148 597.563 mo
594.196 597.563 li
594.196 602.145 li
670.251 602.145 li
742.4 674.293 li
762.713 674.293 li
800 637.005 li
800 630.526 li
760.816 669.711 li
744.297 669.711 li
672.148 597.563 li
cp
f
502.321 628.121 mo
484.3 646.142 li
444.918 646.142 li
444.918 650.724 li
486.198 650.724 li
505.561 631.36 li
502.321 628.121 li
cp
f
549.803 618.376 mo
503.373 664.806 li
506.612 668.046 li
553.043 621.616 li
549.803 618.376 li
cp
f
686.613 639.328 mo
612.554 639.328 li
612.554 643.909 li
686.613 643.909 li
686.613 639.328 li
cp
f
662.144 660.948 mo
614.076 660.948 li
590.737 684.286 li
593.976 687.526 li
615.974 665.53 li
660.247 665.53 li
682.243 687.526 li
685.482 684.286 li
662.144 660.948 li
cp
f
725.788 581.772 mo
722.549 585.011 li
785.651 648.114 li
788.891 644.875 li
725.788 581.772 li
cp
f
761.831 580.38 mo
758.592 583.619 li
799.995 625.023 li
800 618.549 li
761.831 580.38 li
cp
f
439.556 553.906 mo
339.16 654.302 li
208.519 654.302 li
208.519 658.884 li
341.057 658.884 li
442.795 557.146 li
439.556 553.906 li
cp
f
490.565 572.088 mo
443.969 572.088 li
333.607 682.452 li
285.087 682.452 li
285.087 687.034 li
335.504 687.034 li
445.866 576.67 li
488.668 576.67 li
515.055 603.058 li
518.294 599.818 li
490.565 572.088 li
cp
f
254.918 682.452 mo
172.179 682.452 li
172.179 687.034 li
254.918 687.034 li
254.918 682.452 li
cp
f
544.758 515.318 mo
426.925 515.318 li
426.925 519.901 li
542.861 519.901 li
565.797 542.836 li
799.995 542.836 li
799.995 538.254 li
567.694 538.254 li
544.758 515.318 li
cp
f
551.002 487.441 mo
455.08 487.441 li
455.08 492.023 li
551.002 492.023 li
551.002 487.441 li
cp
f
585.965 426.366 mo
485.907 426.366 li
358.368 553.906 li
361.608 557.146 li
487.804 430.948 li
584.068 430.948 li
628.189 475.071 li
714.99 475.071 li
714.99 470.489 li
630.087 470.489 li
585.965 426.366 li
cp
f
799.995 378.955 mo
776.85 402.1 li
776.85 488.783 li
759.379 506.255 li
607.165 506.255 li
557.628 456.717 li
554.388 459.957 li
605.267 510.837 li
761.277 510.837 li
781.432 490.68 li
781.432 403.997 li
800 385.429 li
799.995 378.955 li
cp
f
591.921 459.66 mo
588.681 462.9 li
622.695 496.912 li
723.126 496.912 li
736.38 510.166 li
739.619 506.926 li
725.023 492.33 li
624.592 492.33 li
591.921 459.66 li
cp
f
611.517 412.57 mo
536.755 412.57 li
522.287 427.037 li
525.527 430.277 li
538.652 417.152 li
609.62 417.152 li
647.621 455.153 li
650.861 451.914 li
611.517 412.57 li
cp
f
799.995 372.123 mo
719.859 372.123 li
667.653 424.331 li
670.892 427.571 li
721.757 376.705 li
799.995 376.705 li
799.995 372.123 li
cp
f
737.448 396.243 mo
662.531 471.16 li
665.77 474.4 li
740.687 399.482 li
737.448 396.243 li
cp
f
776.067 372.794 mo
760.69 388.171 li
760.69 471.83 li
749.062 483.458 li
752.302 486.698 li
765.272 473.729 li
765.272 390.068 li
779.306 376.034 li
776.067 372.794 li
cp
f
741.503 439.304 mo
718.839 439.304 li
686.983 471.16 li
690.223 474.4 li
720.737 443.886 li
741.503 443.886 li
741.503 439.304 li
cp
f
475.69 339.945 mo
452.571 363.063 li
399.051 363.063 li
355.043 407.07 li
358.283 410.309 li
400.949 367.645 li
454.468 367.645 li
478.929 343.184 li
475.69 339.945 li
cp
f
432.119 363.735 mo
397.927 397.925 li
401.166 401.166 li
435.358 366.974 li
432.119 363.735 li
cp
f
428.9 308.977 mo
278.53 308.977 li
278.53 313.559 li
428.9 313.559 li
428.9 308.977 li
cp
f
255.665 335.849 mo
204.809 386.704 li
208.049 389.944 li
258.905 339.089 li
255.665 335.849 li
cp
f
302.744 335.412 mo
251.452 386.704 li
254.691 389.944 li
305.984 338.651 li
302.744 335.412 li
cp
f
427.418 344.38 mo
335.043 344.38 li
315.768 363.656 li
294.828 363.656 li
271.78 386.704 li
275.019 389.944 li
296.726 368.238 li
317.665 368.238 li
336.941 348.962 li
427.418 348.962 li
427.418 344.38 li
cp
f
408.725 325.999 mo
334.117 325.999 li
334.117 330.581 li
408.725 330.581 li
408.725 325.999 li
cp
f
488.108 362.525 mo
484.869 365.765 li
504.262 385.156 li
636.737 385.156 li
636.737 380.574 li
506.159 380.574 li
488.108 362.525 li
cp
f
407.106 553.906 mo
350.215 610.797 li
353.455 614.036 li
410.345 557.146 li
407.106 553.906 li
cp
f
253.326 521.941 mo
153.772 521.941 li
113.494 562.219 li
116.734 565.459 li
155.669 526.523 li
251.429 526.523 li
297.695 572.789 li
393.752 572.789 li
393.752 568.207 li
299.592 568.207 li
253.326 521.941 li
cp
f
208.519 499.818 mo
84.6867 499.818 li
0 584.505 li
.00977928 590.975 li
86.584 504.4 li
208.519 504.4 li
208.519 499.818 li
cp
f
187.057 386.704 mo
183.818 389.944 li
321.83 527.958 li
325.069 524.718 li
187.057 386.704 li
cp
f
238.872 400.913 mo
200.316 400.913 li
200.316 405.495 li
236.975 405.495 li
324.21 492.73 li
327.45 489.49 li
238.872 400.913 li
cp
f
278.49 404.503 mo
275.25 407.743 li
345.193 477.685 li
345.193 555.526 li
349.775 555.526 li
349.775 475.788 li
278.49 404.503 li
cp
f
55.7434 608.526 mo
0 608.526 li
0 613.108 li
53.8461 613.108 li
85.1073 644.37 li
88.347 641.13 li
55.7434 608.526 li
cp
f
259.823 570.934 mo
188.519 570.934 li
96.5296 662.924 li
99.7692 666.163 li
190.416 575.516 li
259.823 575.516 li
259.823 570.934 li
cp
f
230.743 546.127 mo
177.088 546.127 li
110.086 613.129 li
86.8793 613.129 li
68.3648 594.615 li
0 594.615 li
0 599.197 li
66.4675 599.197 li
84.982 617.711 li
111.983 617.711 li
178.985 550.709 li
230.743 550.709 li
230.743 546.127 li
cp
f
188.071 465.57 mo
85.4504 465.57 li
51.0763 499.944 li
27.513 499.944 li
0 527.457 li
0 533.937 li
29.4102 504.526 li
52.9736 504.526 li
87.3476 470.152 li
188.071 470.152 li
188.071 465.57 li
cp
f
46.4675 311.268 mo
43.2278 314.508 li
66.1424 337.422 li
66.1424 452.328 li
70.7244 452.328 li
70.7244 335.525 li
46.4675 311.268 li
cp
f
88.5558 325.854 mo
83.9738 325.854 li
83.9738 356.799 li
151.129 423.953 li
188.071 423.953 li
188.071 419.371 li
153.026 419.371 li
88.5558 354.902 li
88.5558 325.854 li
cp
f
70.0532 373.507 mo
66.8136 376.747 li
135.863 445.796 li
169.503 445.796 li
169.503 441.214 li
137.76 441.214 li
70.0532 373.507 li
cp
f
88.69 423.87 mo
84.108 423.87 li
84.108 467.861 li
88.69 467.861 li
88.69 423.87 li
cp
f
352.31 363.949 mo
317.879 398.38 li
321.118 401.62 li
355.549 367.189 li
352.31 363.949 li
cp
f
154.72 482.988 mo
81.8871 482.988 li
38.6563 526.219 li
26.8194 526.219 li
0 553.04 li
0 559.52 li
28.7166 530.802 li
40.5535 530.802 li
83.7843 487.57 li
154.72 487.57 li
154.72 482.988 li
cp
f
81.5962 576.358 mo
38.9889 576.358 li
20.0612 595.286 li
23.3009 598.526 li
40.8861 580.94 li
79.699 580.94 li
96.9069 598.148 li
100.146 594.909 li
81.5962 576.358 li
cp
f
86.7271 557.118 mo
28.3348 557.118 li
28.3348 561.7 li
86.7271 561.7 li
86.7271 557.118 li
cp
f
116.181 526.906 mo
81.993 526.906 li
51.1091 557.789 li
54.3488 561.029 li
83.8902 531.488 li
116.181 531.488 li
116.181 526.906 li
cp
f
214.431 445.866 mo
209.849 445.866 li
209.849 480.23 li
234.02 504.4 li
264.936 504.4 li
264.936 499.818 li
235.917 499.818 li
214.431 478.333 li
214.431 445.866 li
cp
f
31.0673 649.638 mo
0 649.638 li
0 654.22 li
29.1701 654.22 li
44.6045 669.653 li
47.8442 666.413 li
31.0673 649.638 li
cp
f
105.07 677.935 mo
66.035 677.935 li
48.9419 695.028 li
52.1816 698.267 li
67.9322 682.517 li
105.07 682.517 li
105.07 677.935 li
cp
f
201.485 .00013 mo
196.903 .00013 li
196.903 75.7882 li
201.485 75.7882 li
201.485 .00013 li
cp
f
575.896 .00013 mo
571.314 .00013 li
571.314 75.7882 li
575.896 75.7882 li
575.896 .00013 li
cp
f
347.25 724.213 mo
342.668 724.213 li
342.668 800.001 li
347.25 800.001 li
347.25 724.213 li
cp
f
414.595 724.213 mo
410.013 724.213 li
410.013 800.001 li
414.595 800.001 li
414.595 724.213 li
cp
f
388.191 724.213 mo
383.609 724.213 li
383.609 800.001 li
388.191 800.001 li
388.191 724.213 li
cp
f
%%IncludeResource: font CooperHewitt-Book
/WEZKBQ+CooperHewitt-Book /CooperHewitt-Book findfont ct_VMDictPut/WEZKBQ+CooperHewitt-Book*1 [32{/.notdef}rp /space 33{/.notdef}rp /B /C 16{/.notdef}rp /T 12{/.notdef}rp /a /.notdef /c /d /e /.notdef /g /h /i /.notdef /k /l /.notdef /n /o 2{/.notdef}rp /r /.notdef /t /u 138{/.notdef}rp]WEZKBQ+CooperHewitt-Book nfWEZKBQ+CooperHewitt-Book*1 [19.7548 0 0 -19.7548 0 0 ]msf31.4883 763.858 mo(Technological Circuit Background)[8.04004 10.7471 10.3115 10.4307 10.4307 10.7461 4.2666 10.7471 10.6074 4.26758 10.3115 10.1143 4.2666 3.95117 12.208 4.2666 6.10449 10.3115 10.4307 4.26758 7.90137 3.95117 11.5762 10.1143 10.3115 9.30469 10.6074 6.10449 10.7471 10.4297 10.4307 0 ]xsh%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/WEZKBQ+CooperHewitt-Book*1 ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 15.0%%AI8_CreatorVersion: 20.1.0%%For: (Ayib) ()%%Title: (Technological Circuit Background-3 up-02.eps)%%CreationDate: 03/01/17 6.16 PM%%Canvassize: 16383%AI9_DataStream%Gb",KkBc./ddVG_g]PCR,a"9F3>aH;k_oZNO:_ak@WlC5]\!.*[g3$\&G@(_]U\Sp#>fPE=6N6sUt6u]fq_,4"psGLO?2=:eFils%X)T6VKWFbA**":F.2^9[@1,?mfb4Vkp_;2JNQDK6@@8aiECkms=>$CEr[&uW&hsA^#k^>Pe'(&A"ANu.U*^ai_F%.SR?DBHr.j9W%H\,\E+?(S!,CB!3n[u?%TkH4!Y[`8dj1#2D5N8hh@RebYS(Y;=Z6;*npV<EWD)Am0#K?qZ"/"PurcW`!I]8Gl%ql0'5Tfi5l+S:;%$2j)XH\-\_%R0[c5s4?s+#*1'p^kA_O4UQn4]]Z*`UPLq;p==U4NGT"dkS\!\.pg_Hk`1(amkTBGZ%p.N]Fae]*EugLqh/B!OW1c%kWt:-!RR/\(^-Je!lR\Tj=cDg-`#%M7#tj^B#Roe7f<A;iuS^N"oKl5WQo1?D+lA!Bcm7%-uc6*oLM"GF^s8l6PG8Ikl:GCY5hBH%fE'(r*Fe4Mj8gB:JH8<:8Gjg.HFO+]jXE3h1JK\u^Xo=UWGr12=6"is:lSs+n25am[sQWm^_.m+pa^Fo4+UZgqY'gb5^jFjd5"?(%W(G'gGlXIg5!db&QKkS?m<>N3_B20u,9Zh9\G/i:/>/KqaiU%f5fJm4Oih'l;@T9n:O5TE%,&sXD[E'F';.cN1D$-05GKU!q/!'W%<4RY,pDLl4*9`;-eNogK^_4CQ2=:f2j#r91_%Y*3B>J(jZ:jm>RO4P=U-%C,k7%soS91&5?n,f!fn'c##h5?-kY`tYN'9u8lQfLb%6@/cVhHb4uU6[8V.5W>>:!$sF9'DiZ?mlTq[=js@mT!"OJ7Sjc7Kgmc@2WK%1BDSEJBh2g.d(USgEQn)P'-K6!(kVl"oNOa4NZ$5%$BFI>c#\&?1emPd.D\=\9SZBi@SBIA*?&mR7Iq5ceoQ#&l#34D6f&.3D3'?+eL?GcM9[hap`A+4`m`3g7haZS[JX`2caY\eRB:uT%s8F>mcLG`BB@RdQia7H-oh!LF2'LrA0u8!F2#OWZ+MdGem-c`nK1,F#IjRq]h_%W^d79j8<0s7DK4V)IR)IKbHPcim+_bu@n2/h]%=5O-U!/jQG+m%LDk`X6$+H6)#g#i=1SIF#18Il6O8WM1_8<Eq2;5]=*6D*Jrl?D4-*qbGC$F43rP3;S_:OSN?,at=0$lUR`.Ec_+%Dl>a_ZVLURkNW(%4+YGFQl]3<,jWuClOY&H*$G(Z5kuQZj+*#cS8j[KVF@-;JnCgFK1cTRaU>lH`Tin!!p'TYZ2di>os^U+/3l#p%Lk`F/L@D,H-,jkg;q+t^`0fbo:u?i?7pn_$9aG0"$StuJ*6ol5Jt7m8@`F%Ga@s[;ZV,glWd5R$;X\b?c2l6';W!"[JhKE%.R!#O%0H(4rgKQ:4_C7]1\&"Th%0]sBIh3.lgUKMDNq\nN=oUW2<KFX#T?hN8_qe)'/+S*Xd,9i.8PT%hY401p1D'*^!<<3o&l@TWM[C!Q%E$>?N^f(BlU\]Bd+EWQiZuaAF]ic/=#n$=G6\>WT%g8Hb0f^B+.Qlp;!il;KPo:20S\u4!pieoZ@)/0SBb975E6hdQ_$p6/:'RNJ%jhW&n%<T3fq`X@$FPA8B4*P3:l!Aq]D8>`M&/]L:WgbGb&nkA1)0hBWRFsD]kqae&if(GTll2>?J&n4mgj'!/b\@fK@+9<Q;*YBE%q\$n7:fHu2mXSYS8[\%!Zp\7;s6afr,5WMV=u@+F9i$5#1m%LtG6)T2IheE>&?HfK^?i!n!H2'`!..`e69p^K;pZbF$Du/rr)sMA%U\>c/U.>(m'nNLDli?tgo^3fU*A%lcBqV^b7V#U+:m'SIej^qB*H(R4s7K;R<sX6\JoY86\Rc#_f+jVqkCqgee"7n9dm0LjlDbNa%N#Se_$pu]FQ?^-^,CY@g_3Xsqf"*O^A#6E35?]8"s*S?:.]C1Z4:u,0NG/m,M$\jq6CT4=[;7(A#<Y*`*.m.H\FE2`U0fCsZ#j]c%p)?Da8o3:Q_'"O6'33%#m=_J;6\+E.UcLT8,pX,u8<EbKCGUhq=#5sV:LT-aXpp4:M'uIkes7>&Ti2a(-+eT7_nn.e;6?5i3B7qi%b.7GK%]PtBV;_qT-K2uZK`X;erOqM_=DdnY$t@m2Ba<F$W=B2nJ>oi*k_s)0%>aE``'Q"8J^7V:B--i*jYQ[ers^EbWD&]9XEK1`%(IT3QNJBgJ3oDZCSdCMYmKT0m@g!#AJOXd`FSo05a7!r>"36X)ndj:2LPi(!6Q\0S6PAN5MFh!%IlU6nHok)!LI<(_8f?.]OF,'"%0OIQ^K7[]4NDh8pI:UJsND-Umf%Saj:in7#P+T"M)2S4%Uf-ml9bm51J`j(nV??E>V$@b>1,+Cb9MfUn2d1ViKhuYZ.:c"f7OpD]%$h,gIBu8AE$3WI`l/E72/<q`XW,$7aS3iQ?dO);?\]YZ$%\QMN7#;)1)*biFr6g=+A3%cC6?BFNpC8'gZ#FI%N9ud2+Zi]jr[*L+%6qtB]j7\IN71$'N_2<hRH<(K8gA4[14gT$#7':Hu4=FRs:^3h>mee`XJO16N6ZApD^,gX:!KVknEsd0)'V/J9kW,Pks+qF$Xh,5<%%7>,"/.#9\`&Qq1)l0$G_#G:+MTtEH#<_1"k8`u]".jSL:M>U@oi&036RXtc4OE][o"Y>U3h\Yi62i(mg5tMQs84Mc"A^C6;B3#_%HnRqfU<oLL"6*0tUG!Fj&G)Qbs//7I*I>07Hi8ZBkaNcL/2?0EMO5[_dWg]O[c3_);sqPLhr2K`;6aW'/kj%+Oo0Z^3k]QcEck;%%r:U'f`n=]gU,ou5Y;go[)mO$4_'YQV`tK-J3k!l6)jUR9V)&#<PaRUTTQ8TPbGh:G5RKH-G0u/gIti<V<H3EYRoWiTSjRufKo5U7%EAP%!FNI^Q3/"<>7VBd7$!Q8'.*qV2ShCECNlB;t]bmX!$6=E."31nEjg[r)G1RnEr)$/2T5P-,.L\2nMh`!&r\q5WZ8VH6`OTJ>%^$+ZF4*EO*hi^\2b]T-\Q%+8PEltZ>"NB5,ZmW<q#m5d.I9*/2&@Z[HgttAQEf'-34,=45I+snc@B80?`M9d"5L&LBT0CDWo#UJ5%KFf]R&'#s!>ie`&N?0(Vr>/c'l/^6IQc'ECO5D5/'$1VSaN;m=M%2E55?K32]5a?"*rVp%SGn;.i==MpEnj)C*'`mR3f/8T8VWoP%/4oh<]WQ??Jc\GdZ:@`1LZ4NFn<UMNEgA8l^HUC489GXO.Gpi85B(t:@R<hd7aRpg`PPuF<e"2,bcoP>]N&$QLiGOkb7Cstb"l=`%\TRd(2XSPU"?bGGA%$+FT<j[SY`fMdCs*;J%X7!B9X.,`D=db+DVtE'G6B<(btdkjJ<"+8No%>r\'rB8hNXo?-PEKYr*(*SD[AYc%g@4dlWN(3>,rm4t'9]M\1jX4pnqEF4L0n:(=1eh1;'NIgIQ<O;G(>E#aC.Rk^?_kS@X?>Vp\89>.c0oM)"2!Y*Mk0%8eYJC^1495%9M`t^N=!ssimkc,aHb85s/WUmibKX$;N3jhO-:@;?U)@:]*e(qc+%eLFR3UEYtRop7O5X-;h=a(7^L]DS1#ET<)J*Rr<2S:3P_@0%],a_LE;tL<^\rdC:%]s(5%JRDr>g$I4lLs*SOrX"3!/I:erY,GGq@$a"!R/V[=mP!nK@So_UhF2VJ4T=lXO2=lII*`#FNLkoU"%E%Osl5d8ef\=;=H0)MWn;%q"b(OMVYFk^'4?P7"S;\f3986,gp=nZ#YJWJA5Nl@%pmH]A;.b[XT6P=B;.C?b`"breL9NfReVRK.#<(%!YPP5RkbXd6B)Ke`W,.\b%Y44B+Op)D):#>[[CVuKp7MVe4LqJD)64ks*&=Lq<@?Lm/EB#1C"c^A%-C>I5<7[DasPfR-0Gb?gjW4%)eXWB`Yla@`G'.Yl2I'01I&tZrj[qD#6]>8NAKaW1Oj9%%/sVe37Ig\)eTY"8B5VfcPpMWdHl#%)eVoSj3.N>mF^gA0l3@?KdEJB%g&?&C%67BJ^IaY;Hs,D/4!Dqe38J@6:.H*"]5`5e(k0\oOn!f\Ke>N&+'/><'Ek"f(K4XP3g%UKIcPY;kNdE=p?fckc1bSRDi0B9%gUFM;4576.Z>XFmr,</'cK=NHbo6s(ok`I0f'RGBFq3BSf'R;0cIVB\=Z>lV;>[SW$U;kV.45%tXPf]".cGXc*AE?Js5chJR/$7u%3_uLC8Q;D_-0Yb2r,*U"aRU0l"+B>?OM:R?%nu@j]S09$CA!*_S>$dsA-Z7Xbj;r=ijA-L_3NmjEr;9Pi+bC@_UQ(3r5I1D^G,Ek%rXFJblCYL,R@D'oCQq_>8f-)UP9/DT-@9+K/)Jf8,mcbXJ:`Y^I/P,_o>NhiE\WVAcZ\T_nshA=q9N;VF"F"akE+;X+8I@:Y>((m%V5XBghO/YFmet0:$llN_Na9i>b]q9L+Gqbsp?9ieSMo?FqnKK^FW0S$VfJ:g\PUArZO;X`;569S7ZfAIkj]]B*:;F+,UUJ.*D*>A%6M@LrM$`^BLm^FQfCQbl8FL5iOE/6$Ed^Gib#8.V9_->Sc077;"7q9IU+8Btjc9q?Q1HHC%ufP]rquNBT+AO;o,-dekOn"DjIOnp%\(Pe.J,XJbKe(M&/:<N\T?<Voc[As=H-Q/tk'UKVr^nrlCX2*#k@7h(3j1Q9f::0&cAG40VnM5o\<>C;qY_:%-CG1E^D#`"fkU9S%M2>\O0k:)'XK!:aZ2.Y!j'<0,k/h&=XgRtFdcR"i;gd.lg>-bABMN,Ym5IVcbWe_!U8btj#LDdCG[7R`l8G-&95rclK)8..,o6,3%4CCa$&dJ&a$r`?22.4;9.#')E0MD,V$qj:f/[:g]EuT4lCNJ[mgpo=eLr2:jkfs@CF+Nb`:aD]Yac-!^NG&0\[ge5FD#s[u]&lpb%'1mg0#M&',/\\@`PG1lVUBjTS2t*;/#t\9>DP^-J![uV7DG#)'ojeT97Vt*^L5b.h.b"DmJN*E*Q)fY[9]ZR]h0r6RB;$k@n=U94%GL+6uF"ui7M`LCWNDRie=*@D7k?Q5>cGc;p1$;fc3>Zb^`LM!(k;[NcH@J6=FI')UQ)Sh9l8(f,bu;j8/PUX98Nu>9k6j>bIp_Dh%nP&JXDS\F.lT(3eC2ptZj/DG-3Gul);ga:lp+9pIT%?iBFm#ec^<qo]\ukbo6B>jG*4ZG?hf*^S0(_tYF"6&<I'_AVI=?tKr(n^#%^Z\![B-Y4.-KTWUeHa+a]jph/[p%=:7$%0,r(<g*B<JU&*V6*%lE^"is.bBHc\MH6`s?$')9&c]m4!K'/HS(M'g)-R_Y!^Fa[:bk%akf=<i)DHnj_D9F!K,Fqhf#k'AL+S]<0$Hf/cEN-_QaC0CR0fP7kWsMm`:SO47:WLePkQniSSSCD21r^4K/+:QjWRqMCJ@Vl5d+L%D[ua='Y0K-1aEUb-as6YEgg%jO7S@fs,HT)mp,ke>hjA<\`p[&nWf7DSBE"p2dLl]q*V^HS]`+ql@dLFO!D+!kOQ[(r,GWr&"(<*%_uUg1c7.O?Vf7'Mkjek)_beMM*=IiAEb9meX#Gkr']8K1+ZM6pP4(2IdT%>oDm]@]!kX4&=VSH2n!L'0s4uh?UQrs#,R>'\``%8/%:I.uck^h*'ME]rRQaJ_Y?\qdqSU<13Q[u::FT?.8-E#o>Ibt#r5O&"jbb=eX1H_Gf;)@)pb5"5t;nYuk#N%af5X9SZf+/l5-MLYT%XPCrCi,8m&cF55S"3dBcS'q>4P#S'YSJ_m6r<\c.%nHte4H2DZOn)j=STZX'mdeQtT<SVq3?:W(!tG-I44"J1k_+,PXZUiTcSYpi%,n/pK/7J#TK=4]_^qbEo$3laL\R'`"olA#UL;'<cIa.sY0r</ui&M2Cb>[So"eN'9Eu'#G!fnc<<#e;uZbVdM!e9W-2T9kSSC>7_%d`uRbs,9:`8pO/6cY;;t%6UP>k;;ZA(HMDX7.:a[N]\'KrjYqs!/aN"'l5TuDnm".h8hSe4R"utTEFCJIPOB4OF=_7C](CQaII2$%fSo0W`@h(U$Uu!;<ud`jM*'T2ngRLV[$0^gG$i<l=1`/XedCld%WuHZ3sr$BT9q(TV>/rA"3SV's-m%q#+n84rRomlh?AAp<pq/?%:+]5^5XdfK.E/!m$^:Tn2*60:n+NnKZderAql,$``VWc]T&RpPjtEW+1)'<NG3/8MB"K_J5fHqm\/F$K\n%p9*"igb2>[0Tm9s&b%0\Y+3HoYnr^(0hW^%"ljFUo22WHd?NL'QMc5f6#"nD(/hbRtMsg$Fr\lY,WLk2IiFXk5E@J#Mo(J47*sr0J)Y;gb2L8V8Z$XVcjt%Hs<P7U/2\(4CeK`Irnm[8hbk9q1Sa`Z/=QcWWrcYgC:o+Mt<WAVZ32B'Cl6)Xr<mAgiMO%;eA)g-,o'2km'XQkMYSE4Iq,&5$=B0%_:+C854lG^ZZA/Df?a?8Q'mI.6</H@#>ufU#l=57cP.%ukIMZg+mu*PAC&7%0d3-,S+8d[h]tqd'nY/+EhArT;6G&aNUk0`%>59D%`=L#M!A=X;,r^/69%2II*n/V!EYk`<(-&qQj7G6Bn+f-';u+WtHd?X&Sf]G8r"hN[l'/3o09nZZaQS-A^.q0Ds1<9@Sm)'A)j#OH%7CYSO:%LtqcT/\+o]KTKFB!1sqk"`#;nh"#9Rs8[?i=pNp)R4EoD_I3>5k7\AFrI(68$&L^dK6UdEdEAh#;_5VgG]]*=aVLR"34j%3;s#HM>X:`l:Xo6Ia`s2m41WlMY!!@^Jj2d$9_`i;u+J+(Ufs>j#@ZEE,alZm#qZT^#@J?s1lgGJ*'MAO.3c]k$#u1-b7B,[![c$%pIFSh.G6u*B3rmrpt>+b;WmKE,b(L[A#Q+AMk#'eUKkg:;"Je.'c5O8mENP+RVQcSmio!hUg#uFU[mH0c/D`6lMlUMA^BZ8rT].;%=,^ACRl@@?HjF%<:hPUkf2qs[MrW4aNs%SC&B"k_&ml9kS]`D<GH0q53Vf:?#49Ege+>X@qP8[&DZfsR350SF+*iR*5+]g"G'_S@%^<-f^jFt@UDjX*"FFc&@YmWcDa8n.15>^00iKJf]UdEDCh_KNNN62k'0ca/_?t\7k>p:W6J7R2A[Kjg^qjCW4Qm?@6)@/6E%U!E]%g'Rc(\jM=p::&Xt$jMZ>D('n%,ajdGU!!ni/8SR3H.4g.U&X'N?,CKU^H1_Sn0H<M20ejVVfEP"bWcd5"jB82I"LY%2a@u5goOB5%.8;Fd@d:6+F*KBG_!P'1%NNMp=9*a<\D_Z$_2!Ac!Vjb)$">O^K?NY)"k@gMC:+N:mPjo]%6hFUTDel@W_;WtB2%+`5MoHQi*B.?%7(^lu$8155[Q`&.n1+NumITbn0"6AIs.a!&$k?Vui55D2I"%-skCF`1!?^HX,BjAUDYOK]qd!P'$gn'q"jmRY#LF)b:(&[A$PET(%ge&!%AQ^0iP35D);5L$S/G?\p6phLr+r^@rp^MTV@^sJET+B?A=9\(PSjhag^b3R`5H;uc<L)u1]1aeu%24']3N`s5@fXmsTtYKR%$#P/iB3Ah)<<p_J>@deknpA#?EP+RR:aYr<F5\b(O4tCkHQg'T2aHAW^L2<5#Cg`?E89nL33&>%TK7GapT"so!WRQ*+4F?=(CmsB%]u5O_kRI7j(Lot#ioQOlbEh38cl2E24nu4"#pql';b8N_@NkS8-?]tl<]is^<"8qV`.@u=J0*6iO#maZ]D6q#2mN@W9]u#PVO6df%$kgi"_%S;HgU[(hjt?QY%Xl.e<E-@(:c>f`TSr=!J)A4Pk[2?uleB$<3.9OlQuMG""NuMDHboa_$\.>Mi"c@/E[9Go[hIj5n7e["%`m@D'7.,D1*u`*"de:@rFf5UoHQTD@2P;$IP.s:Nm&*VfrKkJ&8P\W0I._>FoM`!DVaU(L9(eDqHK^^TW=D5/=ed-ch&46hj6sBd%s#W@PE<H\JU!Eg>9W:)Pcf[_+m?B\uU&9RHb4Ycp@W21hdt"3mm]"rM&G<)p<Ka#!#Zm-r^YA&-!uU190FZi/c>P#ir;LSS!#Z)t%fg/)_iIQV1P't'g;?Kn?ge61@S*qX9Lhr]j(2jQ;9AB"`iSR<?e3VtUWg7Q2hb2Pc7H)9qmXucGHKFk0]7&V-^3^,qOsbPu$Ms*K%JtF$<XuA!q.+'IU0`5KB#88pcp?Kl/\a"G<=V^4rkc&dr1eTVFK!(9c)9pF8gO_^SQH1+))lp"ba3_/<iGPuB+4&uWH<E'*@FK%m%cHnhkaU-(h.kJf)]R#j]iSN[Xiq]7Y6ukY;Q/HnMV>d,+TEq%6_Mt\*.*q\QN8N)R_ItLd4Q)&0^=Ig'].W(_(`ug%IrC]k5aGb_%Rn]f2!)AL\OQuBiP+Ao.K(%P]0X/p=$H^.HK6ZYtR:W@()qsMoP0\$4hrg>WK^Y4;X,B*s[:7H/@#b9K16\6LT\s-:i$:nC8MJ7&%6^@$RTe?eW=;>4,o795?cNOUYI6/Ze!2D00^IW[?=dZe8'KS&1Bkfu73M'eO9+/3H19F]l)G0)t*lnV[-J<d(6VjOpitAZ=F9rj8%Q5EX2:l"Uq=Qet.HQ9i4M^I()T$PVoHD)3N^`"mln8p[7QK7j0j:N&s;?LMBgd4;N8YJWP+h.?4@M_i>bHG,-!9e1LV@5*tdq*jd%5&m=L?qm)q.Y<UFL?OfjaadEbW!GT1OpdI$56qD&2N#0]?o;#uJXs`Us5h4S:O]+?*dq@ugUdi82>^pWlCtM#*hQIM?jE?=hZ@,u%;In8Q-;a=]2S\gYU2c$(ouP$/.InRRcb`EOh*iRkf*_X$ci2noaFkafh/!7LT3lS[LZ)J-e*"S23rh_',d4*WE'm>_hLJt9?_gGk%NqZYiq=2+'FMe,YBOX:d.?<[icjE+:Oh4hkmcBoAI"!1[.&9#sRJZ=W`=7B['o8hMUIeM-&+Yo*q/;!s3W;:?5Y0;\"f2s-o`r1'%%l`q2f>j%kcjGY1=n*o+4_tQo.IB!ub=m4+[/Su,`.M/a9Xu6H-8IPu.>]Jp_34<\!Qb(@(o*2Z02g%G!gL6.$@(@KA@3V,;cnM;%aqonSZ7,^XrrS`FX;V5&/(5_%bUuUaeQi@p*rf6Hj8`:&DBVceG7is((aKF!!aj<u3bUu6WKWgf+tG5N:E2Wp5*INRNO'lB8)8'L%\Mg1OJ-uIRp2B8S841u@!:r@MM;KV2*R3W036QL_K'fN`cIn$UlD8oe=6I?n>_&N!2221heX<Ff=(!Z941DHkY#R&FGp@](g3IQj%i;%]fc$&ZbJ.P4p)k:.+G@S[[0ceW:TK3Ig#Y7\G!:cbo4Agafe4CdH<SWY;P]\K*.2%i\N#7ZA$8\5I[mMoU]h#3RUC#BiJZqg2%J3*kA5_J>N0a.p/;<&NG_N'NuB4<$sj]e;,"-IF;&6X*UTn1DI$HRk2^rTQ-fKND\iK*_"Xp2*Z(AG*]1*q7[%@2qZDR?)H*/Ice%q&;ZRRo59+Q6;.Kf$b*_'NQK'FaV1bbA9ruU6B,`Lc]rlQe[^#"q%/l;!UA%JJL;u6UfWR&,3)"#o6jU#>e>^TG`5;NT%a)j<ls<%4isokDVJFU6Ga.JGo^Dtl?&'g=Xl1/Mn/3b\<j-1)P/3$^Be_BBnW1]\c;oegD6[?H,K,eO4SDmgnb3[ca#s"K%(HthE4BeQ'Mf;%MD0s>P7fc?j54[[NX8db/%(",$*Ep]&rEqar$"eL,#Q/K/5-Tk#It^D"#mJi6VgMd%`N5*Hp6I_OjN7-LDl.!4UY;n'5c!B2!Rgr%bIM"?6g34H7'0hE(#@gfNJ;:Y)M9D=NJ5M05"K6W:O`H-qq3Z5a;1\'rqt/Wbc`IT`a[G41o>&j8g!O<e)`fprrFYh=,ai;j5@fY%$bt9QroX:k53Qq$+)N-iLlkgs*lAOQpVrZJmq2(*BLH4VYMK+6r#/%3'CJ-\$@XQ7_"EJ##_)08YOTE1HO;s(['9!i4A^=hK2:W&%ppI9QB8qq]%=GTL+Dj!:+5OHC-ef)HSPE'fh$LijJU17TWgs56lo9<[8WrF%r7Z[.mHN6d]*Wp/^n78Yi>QlAoG,ad"=*M`a/eBk%AH2JrO70nD*Mto@9Ugm7AoWU<G\(kBSG#Rfrm'aal%I"ZG\qb%G:l4CWP1*b:DIL0(W8)I9XdWTQu@uM1db=omk2.K(QTa+[>@ub%r%UkufU1!/9auJmqu)-tXg'7D_f=2;OG?F=rur%BiALIQiE8V\_N1Fh(G&sR:(-l6D5/1=C[gpQ+OaG;!C)XD"fsTbV,M8a-i*%B%[!nf&M;-`a_#8B8^pAmpLMFKU].tY[:7VWMa5e)M^K=F^d:M%Igf^q>-f8]K'^F@\n+TdJUe7[ob<XB]^EW5qL=(?qbRA*O81%^;%q$PqiP.JkkXQ`UpO1enCrRQ'FF5q=Kbdr<'3(MR(NA\kbr],`\f:dH6(7QSK5n?@@rp`q:OWq=dJ,5k28]3qSD^/ngDtWnGO*G/E%1o5/_bE^NsbVk@qmWEq#aZ""P*kZnpja29J8tVbdZo^R#oc:g)an=J0[[Y=>UYmqu*no@aJ@Wb>CGX5^RRk'eff7:2Xg+\,'+`_9%g/Qu/jA%!nV<FdI"^1gj3rDLC1ZNY<cIj4R[(Y7a7[%S4JBkGlNTTMpLZ?n0AS&;4CGk7D]6B5\'XSu'7rebEo,2=iL>R(j',/1\%pf_jp)WT%o!.8=4\ud]#["db*7V>BMBJ*Q@N^iIB;qGtkp&a&/L9Rc!F@AE/bip%@YnY%bNV->Ad+Fd?9o]*#rMFRVlt25u5[A-/%ETL5RF+.$If'sOppT3?&GR]dNNR+JKdJ35iWsQ^:DG;hFa_='Nc&3q(Kj/XVQ\Lf5'9-=b2-8&GJL3:kXdVZ!P0tTtF_sk,^g:\0%Q1pXmVk6.eo&ZiG;m=U-RNeGDCMp;VAkg8&bA1uWECs0QQTU]@G1Y(tB5^tu*Fh`X*nlrJJE?$uiRb`tdSH=`]%<hD1oiK.mr!HF%l1^o@c&a)nc,bFs1uls]]7qarZC:N*lWqE_>WJo5:X$2WBqhC\,]j6mBmA7V>*E$Tf$<Me[9/7kCYa5LXO:mtDkUr`i5THYL-q.P%D:D*EZn_:R?(2g7CYI!*_5#7>k@nf'.9G)dHR4`]9&ECN%DGushIE4NV`:g/[VM>?[PJ,Tqr,1\9/Ss>A)6c[408YV!"3^]piP4.%H_E6?Y(etneS4:72.'+6]C,h_YJG)+"[L_8MnFfA\leXm6'o0n0'dO8/>F`(7[L^/e#c,AJ%N)RmWE-:mQ!8WlA,e`lGu8.XF#"'%hGegWUm`:g3(&(4Te0XE09!@#i55>R*F<.4_V9cGdhlEpTA&`MdDAk(O\F`RMjukH^F35hhM\Cn]=_f;6J78EB<uVEKQN7krDI'K%0m_qn(K3N`ctgM)99ih%\@X3TXY]"$*krjFH646<l6A6BW'5e*C\mDeG,R&/0$X6]h\">pC\^'j$U&gfpYI<jriQ-&d80YqYsHh`%49jiEGAD.7``%N1Y72F;(&ZGjUZ*VchN7Cf$\m*cBO[nZCmTm3gMFnq@$J\c+MEhj8ZLl+bj=JXdD30V7Q]kI1O>M9%V,8lr+&J8%(lpCYY4[a=Vs'DN7@C$mQeATRm/-4Q`c3`j2Y*Wq'sN2-kbZ;[kQgQM^7[,i\pOnTVK=/4B.<q_BW=jC#1M$7d5CU"VaV8i^jIIm%;:(bk$*n>i-ES#h^K?G`Y?j2D3W#E-bSA0sB>1uQ[`kq6VI69qFb%I/:'\EIIHoX'E>Ta>(>j2uh/\ePN%@!`"_kM)0SJPZ+^Zc@%RWu,sW96YYca4drB(Os6l3]4^CH/6Z=AuD*hg/d*dFM@_NjTL':2bP2"WUQL>P5&h2H*hHYdlOb)dC8+4PJ4gL9d)VSBc<X>]JN0%YO8c7g_mNdg.?^'\*Kei]0BhegZ(6]/UN':1\R^?a_cNUC6e-17s/L;%3@3Y2=Xdhp^A1s&K=IG(.Y'4C,qa%aG#6p1ia*&H9s^$%fC"ID?EJC@JY(0Q9[7Z3c>n_b4!,Bm02A0r?KZ[sV1Y10nHe8pkXO3iQcNRdHprfJ#H8Ki\TN8($,DJbo;86SO5i02-[o2S&+Mc5%Q1,"<GMsQ)al&@fV<QFC;fS/idV*blR5F:\,[]tFG8<^""Ys8rlb05Q]$75.`9m/`?en<BCVsHJ-a):O_2F]XXZ-T2[&l*\dX.L3%dd"B%p^Nh\H`P_=B=Zq`jS]8FiS56>f/g5,hI+O1ok'CZ]slrOS%W,)!;!qZ/:O51P.:&dnCO0`PAo*#okLVrld.!4pE$t+pao8_%T0I#WAUm"g^(g#5c)>F=n$.hjch3rL.@"+g81lh1'Trbui#s#Q#uH?.>>SC]\UlH>:^JHWc"ZZ*4cBMNaU9f[!tebY6J^OR65cm0%fW;,ikaibh6WF">V:(,P$8`Fi,dWnX.V7\Xp!e%;ghU17_`WLX,+(sbNPpuu<2;;9js*:PaW,Tp5J1=VYO7U@;+o5_Gs`"PQgNp(%iGs83F[p<%!ZSgHFe5?e"\V&5IOG6]8#OkdE+QL+7p"(WpA(^N/QT$1N%K1k:5NB&=jB'<EPL6FX-rUK=Dp<j`\fEqUUZe<UuLXq%r?0r8[/0;O,;Dk/,GV_9n9-]b'W)_:GY)FgM(.2eWq8m'NQ%HI]8G!HNT[L/rD'eh]""7&;Z?4rQb"e2*3&,P0V4`IQ>1-3+\JRE%!K/toGgaOZP\#670t,rK9\;?6Ao>[e,L\+5>ZMLn?Y7"F^e6S(^&_?Ach_N.qee9t3@n9'k#)q;Pe.m3UUdX`*oq2268TcCS)<dr%a)3[4(<j)9k*bPt3_J\=f<tJEq0L[=UBOTlOXj[#]JL!=V$I-L8b#5JJA!UB[Ts3)^0!22/]D/inZ??A29f$`8gI(&#3@>J-,Q)i%X+)h9M>P_^2_D6$k%5TY8sLEn9XpU=_-H(lmEAU[:QLGLf9"?ZnlJVn8t1=hD`,l>fkhkLBQ)'[P?t*#m9>#$Wl\D[W`SUIJ$g/5%?<,$)NU*$s1c/rMB=1Zb.@[5XNV:It&(Id,oh*;)Xq1;VVd\gJFcF=L+k1b8`GQW24ZmJ*?S:k\Bc&EZqhF`IbFGMV<;KXCcu694%!d\^Am75WL^>/>7?.is"h[N&Om_/;d_LJ2(DKP<=+'jF&%70Y/6Gqg56erMe*l_o8nIb52QH+T(nFG4YksV/fQX.j7;GTG<4a!XL%B?dd#T[H&[DaL#X`bhjQbg^A,Mhgfd?HS^lrX7hs1tmsZ,MgY7E.>KH2mg;f4o*cHEe9?Y?QT"qEKT]P&Qc5LMg1%XC;_Z1\a>'N%PtIt-CK<KtV,QacDYU)$hlUnnA!\Y*M4W$OGjF1/0t'#Y5+5'h2<H28QOaCc:55ftGOE0!0=U@]rD>fA*k5MDr1I:NZj.h9d1"j?%POPg9*&iZFLh/$]P;u=m2F<JSjJE3WcSo4-Rt%J%=iYI062km=1sip51DTYF\@3nQ8(+jIqL40_A*r)33fZXDj7/$XF$27HK#UC9%Ld+VF:@+.Kq&MS=STD9-@4)t]]!/JX>,eo:Vi4VsXjXrh?DHBO<h@[D)Rk?0@uf_!gU?m`S6=_[ra0bMoQ%'k=;@.d;`(IKU"p&(%/]Kppd6ceMkc,c0Y5g9F`jsfhie3_C-'`0t$5.WQStU3d$k'*Ke7=XdVF#-O>-.6HMo?VU.5)Z6[<BAp#g<3dFa1dLl%AZJ$:@bJ%hj]<H.6:)FK]rtLAk](hIjW&3f<+V^NWIXS@aZLR<NSe?84]FXerb1Ml@GTnAdE^rHmscac4\Uj*^GB!XVE2hQJ76:JSo:;fEEbO%6qp/J#ESs!DNPsL/30nEf7uVHe-&FEq&ua*$0>SQ8+KK93;#L'Eh_]P?a-h19[k7\;^4FP3;Bh!X:ZRWQKB1P#)BbmJ(HdZc-4[9%TNQ#AU*^%\7Atq."p?e\;eq2*C4L-RF96,Uo*ju[9<'E^!Y]=;p^M#U5R]p@KRG3f4@oj6Q_/g+QPrOuh$DX[5Xf9mFA.1<T&S8+%aTrq4FDTS%V'HS_m]t>aXg5?)q5U/P,!/e9N:sa!=an+fX5j75:2ihG+=u4qKs!5\rBmLp"#<+*1]&?]/2\3&f"HhF5alIgefE]<%f\O]%'WB"A,/2P&e7K_oTc%IZ=/"b-2Z*:C+G)8j=PH(bCEC8b5f_VEMe.lok9LcNEa;YU<^?P0"f=JRNB7f*U?Cn!8&dmAJ-N1o%-8W5=4)K0+#,Ii$U!Ud52<6cPlsu9Ir"?I:LcpT5Qb!N."u<uXJ8+Tc_i@c`hP=sSc]>a<?7h6fC^;Qm0P/>tX=XFpdO8iQVGA?r%_<1k8odGsmEO`ZnfX$rj/^Za>O*@4/?HoGH(ejLFL\\?I]ToO]S;^blMkat+TsBZ=4(]44Q:;f8=&Ra07HU$e0h:`(N*A50$A04-%/+Oe2OF.R`AZAOglpp3#@]-WZXnfuT\OgqcKV/qdgXJ'@U?GHX:'q'dGaDu&"CEF'P:ZG?r[_@9DB_"d`?piT8TlW@hJ[Gs_"gP<%"BQOc7tF9)mN%R\"M6Time3f>9C)$=0PQ?\RsjgYS@4:j2E/mFU2A2fn4Me(8e&su$>nNfEJQ6Y!b7!lFVu+#[B=d-OQ-CYJu)-n%TC:X[,OE02RsF_2g3TpEL.?$TF_M6tGID:rTkmNCf^*i")GE!>)3)mO9N$Or]C7[uBqI!lCLj1dcW-q=A1Y^P=kB9;]1N)eaKp"+%`hhNi!ulCq$bnYPZ&!8>`OLNCWRAi(71Hj/]&jZYgheb]nW:.(FW'SD*"M":$WXHU&+KBn)1BU+OQBDZcO%pMh%h(g74t18nO%*A%Vjh6qSr6Y/NAe4EqG\QKmRVMEi=GY\c.g::GWk;)as.Y=Kq;e:;<BkSiZ)HDb,1eB9\E`ZV+8bP]RoC?l9DcUE&$c5e5$MKjO!pW%YHd-<OQtiEpK6M!fFn#]6fsObK,4`>1;(Nt4AE[6Ge8d`m(/$-L-)+g;sApQ->PQrp"l.#6Vfc`M<it%CZ<A-$5`7OR3Xf!7%;f>%@CY&<7dq(&:%sQ5!Af`r#sV'g]S<AOlX#1o?Q&74ok>0pedV"dr8q,VHK\DoIGs=0/3`;:a4AF3f]aJB>uGHRMBRB#@lJPT2$)J0%7ag17A%`G=F:pjQGj3Xe[uh!N?Ps4cg_]XgA3Q`'V/8LO#NV%to]`+L,kGK)1jb9,=%E"D\rBJWJ=rjeU4XY8oX0(U'?I(b@V#2c%kGm5%'f#Vh=%YK0L`rOu5-PTV%mG5(]c[lO*p[M2*q\,(bs^]d,->rQ!)M=sY<lm)HWM8emN#o!7aj7sl=t8un#(:G$2<:o?B?G!%!s\^h'Ab_b!0k!"%cDUi!8M[!Kg;F=rT;WU;Jj?e\ErPO4o!mFnTsKFRd)sBmqIA-?6joh`bhrS^MCd2a[@H*Y>ObnpZKmgV,)@(%lYV3@&&-mf\rBp`$-uniS4UE%g.CSSk7%+*qEZI]\);dfd9")tg1+1Y!k%cB+^Qd)$CR-h<tKV_@'lU(5l1E.EGN7&'(5lf;."j0%L$QB0?GGW8gSA\*<lBcI+RW@VU8o3"3TVNid\e15qLRriEg=Ks:GFe+J]MUPP60HHYuq`6n7>O!l^S[tFs.,WF0:8Q$ulU#,3I?s%0cP%<j%*Z(enOn:A*OjME@b";E1&@c,/QUrg#8E#K4Mu4R$s4+?ZhUA(*/g.VLf+ncThk:9D>*6`k\Ag)ZXS5F)is.F8g-f;2tGp%>cg^<<-!)%X`&&7D7=Y>;BcF-a?ie$O4R#f/$L_T?n,$d+%_G-6&OU+p\m@D1hdcgb'H\7R_r2^jpE-SUq@3jCGbp'=6We.!NNa0%9KM;.-[bW.',_bpSnm$kdZj?GC.Z).]lAXq1mrT:G]s2"-s2fV9[bo^`g&:2rK$J`IqSu0Sdc!u[5\l%V&A\_nU](C6bs,,Rs2Ds%#mU_CcZOFY2RpDP#6$L1nI/XlL;(j5_\qIaqBI#*U[8Y(d8l8-?s,X*Y-CN,A=?Da8/=.@D#6TM6ATmgI#5pHj&fr[2I4&+<h<p`%.F;T=miR)=OgV=SJQHVHch2k.mcqFkHq$??CTl@3q9raL2&=:[*<>0.$*6D>OMDrMm<EJKpT0r1?sq$j&*"M]%2f:_M<Cf.5&sXu%:AiZA^k?o<)KE5PF-22<S]%kV@LR^C@b4c\&gKK3/)4`/?7gYbY$.dr.nK:_r0i/50Sp^BYJ+2fFUOgJ$EY*MP45r6criJ?chP3I%<7TNJR&2#t"9HED.@#?B]EAAK=nO"IJb[g.Lb/iR?+("`&3-*c)Uaf(3#[TFO2r"@L4f%uEhthp/W;_p@6n18Z=kuR9r."=ZG5*5%bHa!?'8FgF)-8=h,&fA$JW#^Xpiac2)WKom94UD35l0euOq@!c"L0,)3>S:tACdc!6jDZ"3]er+<NE=%ZR+b8`#)sHZpaYH6l7]U%[-UXT])G]+$Xiel'LPnQ+E2<leOigeR=u[^:#9L5V*HQ"3=C"8Y%WR*ALXKobg[p@0*RAQOGS2p>4:HcI5K%lAjN=RO<WW5X94p(%P1H($UFWH8i/eUlM5_+oNj,fG*eKQL#P5Ke\ilS6]Cc?4*,uS`4P);:",KKP:<g]+:_:`h%LL]!NNqaVi8ufk,d8ARJHcYb4KO<e%Q?^)GQt0YqZ48)W^.[fHK(00:Q%NQ.[<*M5BIjYO`?8H;Kt"NuJB0#oMR@Pc6'?P.a3rek]0UCIU2[um=6.gJES+]:Tl^M"@d==0%)JEkn2dZlb?R9W>>5>\9C^\_2RRU403Lj(k;MDu76;14M9ua5t<&n!+@68.`iYZ%C@R[gpkQ[g:&c6?ufmN)7RNFg.g75%P[^n9R%ZaoFs]Fdq]"t@u`cE1P+(b&b:Jh+jbUTgX]=d6LSK*[R-_V@%?B:-CESo&Uhk5iioN3cK3MSjFb8-q]MhM9E&-ON`b(b'kg3Dkm,%bbMnKL>!eb6HZs,qnA"i)+oF&Ydq:Q)Z%iD5.\@$TJ1Q.Vc?e_/$hKtoHKpM4f&JlT+N2"G7qBi7n_iBs3.6W(n(fH"J<WC#ZCPu%YM_t5hu(EMD'608N17.<50<ViFKll?2[Vh+_<_l#F#=N>UdF!PeE=.h-U9RUqZ`*0qH)o_nc/;Ja`8jmdZ\'bh*tdLUC09=q!:u7%#mRM?ccpdF7@>DI@MC@e2I<.g<mZ0^Nd%O*AQPt,$-k?W\qL:2)L;$%rN:p</ie=-KYW,mm=k2)*IqB"R/;_;aU/ZC9&HtF+<d*h%]HftL9?lb<;VA<ODbOY;9\4&?Z7h>sUn8XM?Mp4XB8\C+T$5!OFQnG<J=p&R$g2$8h^r.^DC[I"/agY<o7>3Tp$pe+=qg&PM[-@C%pRK9_!V;@aSI/Df3p8+r-J8jPo3&VTqeotFl'ElfM6ZEOi<bcQ<sV)/]*c<iln4.fK?:d)n+&;t96b%T%(A)Rc'f%^?fJn@_7k:n%pUiSd36K4g[MZ'Yc=JP=Rg5=](<CE1]a=1'eP)iWedN^umT?:V15WDVXbP3L>,-W>$bdcI(Koq'!_1J,\n3OtJrX\`N$]P[+ID\D%XYXOpfB%o0O9^G]R!nSX]dc)2T"UkL^tB)n6)L9M36DK,$MMLiG+F(XDY0kMb85;JWr\f=0mh_!Hn!DJ,_QCZ+Qh";mjiduE0'_r%0jYW5HE#a\BNlmW8IP+].kHt0klbX0B/EJ@:^@W4B<=gFLjV(AF$A\8c33O5ih4cS"GIjG]n#XM&U7'[?hBCen,lDO4n2ubHE?('%msrs]?0D;:JpHR$#3h0>JQe+COMuZ:\bk/h(C)'\o!_6?g:H_g+T2mrRS:J\4)GOuKV?6HS'tXnp([7gK"&Pn[/rZG0LtT_`?J@m%6Rk<t*Y[DmSKiT!W=7e:\eS`k=ag"sT,?NM<ZJ+F%cu-,b!-Xn0\E<J&7D%R26"Csl@t4#VQDZ0VttpN#s*$693n%2-5>5dk<=bK%#5SqYM4cc^^ShSfOEuEjX`A-V`Rbp<2^k_@47Nr!?L[k*EtO4QT^hQk9GM6H\*gK(4YgcVr*qW?mpbNg;2)INf'eABj)#*UFLHE@%Fe?!2OgYJW[ArlXBBJ_u(JrT?^ZgKr)^&S[`B6J0[*[&?9VlUM!tHlW(Q[1\RHNq([hp:DgVUgDBp"DX^8*S"!gtRr>rHtlCgLuB%`dIH2eNAGfq7R,g*.&JjL\%Z&#@MIcWm[XG&.'46_#,bYI$^8q>U2`S]rN9#0#SQs-Io<51.b)bi<>,+.E<g`4<p[i:bGT/b"R!t%/G5QY]GsN[@c>7)*-ok#(,<d1HZ01+E\-X.mbO]8_,k:GJ`I7Zr!^<E`]EVd0DBHu=LJ3iXXhRM>XDei<eCX0]#or<,^S]r9.<DN%'Mm?@ra6IpNU9^FQ3/120GX3,k&d#%r-=Aq`WjuK`?h+:#G%X"1e?Em(2MLm6me)V7ABmL=Jq.4>3$eAR'LR.Qe]R^&ipD`(!r\t%:ar5-R((pF,YOKDeu1g&"9.E\+ah$=PT(I^1^D4r[m3%3%'aEZ4qmT0oj,mANbZn#:3MJGF7?*qdq0rKq9mH,]"Z3np6lg#n$g;c%,OHJ60<YaaP9)G?EogFRpVLo!>:5VpQnS(@TSrR5M/bQ@h:@os/T>'l#8enDE>,Qt*^'eZlHWADc@TR;l]4Ij0[DnsB([$9+i`eR%pf*ko*>/\u"C?.WL2/kpR:Q??]p_.Vqum90ITVC@6EJDMh&D'Y]VAmb)qC,p`!H3m)JlnY^b*/-B2&,-$RV39cplfeaN+`_'kZ#s%!k;@oEEc-!J<p_S5ZEtrMjNse)l2.gUKAd&eVWJK+q+OFH;5%g1!]LNM`*]^\CY&sKn]Zd`e&`f5[Q:L\ti-MAr;dof/j##m1-H*%Z]&mRXcriA\?Ei=Gi'd+"`V0eOR'adU*jag.TtTCPL^0]75K'\m01&A.K6XJNq$Kif-bR^Fd9K@9(e(<]D&Bc(!B>/(Vhp5#'<$p%Og=^9)D)rSUC6DLou"1n42C/E-YS"r!i6P$KhNRn>jts0csB[=p3q[#;CX:bP]C@e6.=<7N<F^,@j8D<8U%Cp;&mEuHh7UTi\Ws<%<='[NXMNmrVT>ZOjnIUU;B!fGUDE_CKZ0&@C44DNPL6V&FJ,)W$oZs`eKRVM_u6jV!7LR"h^TD)L]C&_@](5;fDs*TQm1<X>K]Jd%@,Qrk(L4<MVIAEb@*Ua-0WXh=goX\3cBuR*ph".rq0<4Cn9a^Q*IL9c`>[hZJh,jeX<f.VdWB9=LDe6oPL>./o71ubP\JTA+0^kk%3p+0rUuR"Wa2=`lHcC/ED^P"oQj]*$_\ga*22a1Zho@.&KJrY+9<MLB=Zk'!%R_oM);L!O+pVR?"q10<,eIc:),&+$C9_"\7S9H(%qqgjN%E.#/9I;Xt8m\";Hi*KfLQYu^#FGa\JGQWX+<HB((?^3"'/:8uSE]H8gD1:\Jq24WTjGMT9ur!#eEcq!NTXohJ!J5(LQ=SM%bcnIZaK>=c<@C8BbJiJcAfr/<&;G9Xr7h9\VuP>*\SU_?@-&J"^utEhnLEpCXVkR,0#j=J[&LpM)lUG&0pOMmMcKYsK>6979iQE=%RCl3&]KU2N2LD0Gd<A5%A3lOU9I/)XCZEi,/PX^2-I(op2btnQ#4#jEY>(_("(37t8Umk_6pNRm]m-fcMOU;GY?MOJ#YQI0g[TU`%mbr$bjME9FeN<lnk+slW]KXYrkk$^SNU.<_h1GhR(,cBSDD=@"mBj?Qi#AQgUbgqp[V`.e(Y9N"5g^X2[;MHVG^Yt\#2\Zs=hC6,%SdIO0MUrgHqMKL5;=(Cj-m,qL8sYR^Y:\\,VAL,i+u`Ft9b]<4@>r]7(<Y<if^9-(GefW#r>@"K$_"->J4P^l$fT;S]JKnk'&@fC%OFt`QK6tZEf@l=([D4eaO("d%]RfG"R=<UtdQrU[^YB8;^u3l6-,<l9NUl,agqja]:U5C]b^>dLGC=(AU1?/\r^m+?$8_4sC@j+I%qk]5`W:Rtqg3t+\,WmZf>pOj``AWP(;k1i$?6HC'6#LK?a]/INa1(ESEXCl$-T&D.4]D)9OeOH)6"rLO3FfTPgpbC6XCk>jl""SI%j^YIJ-XF_k8-FHJ.M"F,7/pF2gpaX!'[/eTktXD/?!50)bRZCHaRrBGH;Pi2#bmapb`U^`DnY9G8e\CH[eSoU;ou\@Sm?:j4Jf2<%I;CdR7GmL!E5%jCqEfCc%\SO"bX4dkC3+01N=CF16'u9h#bJuBH='5;XCuC32qYR99@b5QF]KHK6Zk$;NTNK-%E%f^fLS55":$N?%,D2-??sVXZ'!DhX4<3D8&[6&JUFr>%+.VQefCIX_XUG(S`,p!-RJ?KYoo<)-*_i\f28WBV`uEK9">J57R9MgjD[2!n(,mjORM(h'%D4u=%TLnN@Ua@=TiuQt+7Af&>'eoI*8.AqqUL)dFM9.M`aS_6sHK59tbdB-GVVlWS(LbHCW=kE2]_BAkQUQMd(XM]PcX0H/6^QZJ%iH^5=4:e\Zj+3+MKeVVJ45e'/$_^dNb4D102=V12oh1*K5=r@D4?;:<?<t=J9r>u-Epp-S%f3RpK-?Bu(Bn;Q,MGU3^*aX)A:sUS%_a)H\Nku$0V+%W6%scabi_.3:bj*&/Gf$PoHDB`Y@EKkuK[%<XVJpW4+[.s_J]S(-\YDO^@fgOBhRkj_HW0KW0HN58n>I,OmlNRW%G!E/tcT#rbcuI[_GLU:7:MjsBOPVDAAU=ms?FT4p,sN(EW&rs]S8j08I3>p@_uA?*!sf*"7MA_@:a+VtI;nO<"=#`!.D=A#0=CBn%_G',oo-qI5<63O^r2>^Q=OEW8p4.>>jmbO&j$O*R8+tmM(VL/@[`9gNQIO3TJ1DAi"%,iA7F=7ea!4C_0QVJrVfs.#=BB'WpW8a#%KQm(Pna_!=WRH`'c9\XOhGu<tq-=4T+\$A#=\K,*,`'(eLK[*K!bcn*Hqn!ri-BtcZ1HVlqJ]N,qH\-jMIGJOF*lD<ONj$W1LcEV%4j5A@R%J/clVYPsF/W;R#<2d:#A3bQ<,7aL:M08QM83S;BOf(^3(($iVEl'X=Aa;?HcMOj&Knt%([&)/dZEqujj(d%!+r((E]s[&%1XYtDLIJO7W:9!s%kigqEQeYSm`#PVQ@?2nhX2g#bP#%UID3lkok0KVOqZU8-G[h-#>WsO3RieN9UOX5dZ,CJSN9eiJrl->!8uum%/bfRbZX>M'pPb'kBgHV^45"o%$NeWHHk*n6jl=C3p>MDh1X1`1Bb)[$/KuA]Be7&AV;T0LOeE&*>]QLsQah9mdf'W)M>UBSPLQ$9%??()Ip%rq8MuC[;H?S'-mNsg^:a0@B5dnH[pXGbkl4aWS.Z"sdDiSG(oP?;tS+*_sV4].5!9d>]'-3X-;L`jGR[$)%"s=-`EN^)3%geb+J(.qnS!WY/41Qdc_?o(h!6d@X\U1=*n65"i,]8\EEjPXft(%hrOq*^_Ya]j+D'+tUs]<h_.bhkOiX3Viu94O#m#5i)1glBc*%J1`'bA"[L$beLIhGQRuOQL2eglHOLIR_(YGFmfkS#9eA)Z5\P<]BIt+S``NE*&f-h,eN@^/Hd9nFfgmeE&`q2_YeFe<tfU>X=d'$%@9o8n(GEjt.RrFr$sQQlrac+BQ/$:<?Es0bjo"\>mWuDM>qVh207ZJkV[qRa[$im09rs\PjCSNf_HSK\fIsiUOrI7s&-P]snra^I%hq]1Bf#qk"'psm_2=.=c-7occ"Q6FNJEs;NAifFU(D3Fo9:>>JY%l%$2+t7=,qeV17Fu0Ls,qJXAG]n]=`rL4Cj>b.oCWoU6]Am?%`F50LnP"Xs<f;Hi4KiR\H=-X%X(KD/3NXTsokMR[i?ss>EZ9$P+5AJ5Ta,$#<Llp]qSDMHVlO,:E8*d&q:&uhXSRYiPFXCCCr<`Z%9!>LC*B+ncUZDR60AFq-j6j?F:Z>gX]V2TAFB6V2H#H%5]pbbmf#,&.&f=kgjLHbT7broO45bJTN??N=5u`bL4iMGY19&^.Cm:;t%l/l1tnQNM`a)+MiRVjFZGKsIkTb,QGY*,4LQ00d^j<GXXI6GSjYEe/]Biu98U(fCj"Q3EF2VHD?C#\6@H6X(pHenbCk+!i?/F2:$%NV1,0Xg)KqUDd&AF(jpJX/<lXY[`d%]#L>OpB[Q`]bMk4be>ph#)t?ugPeK)So\"+0!k#k&Y5@8e)`il&.9,hjh4/$<.a(H7)K\b%HVtR?]GpZ*5p6'X-fWP6E#/U4CG`(HXSD%!Ee1<-G5p8^da-?DcZ#KhG8o]4fOo9*KK21Q5pRs5K=9>9O4G&OJ7eRE`&<;@\`$1u%+@TDpBYCnC&M&Y/Q$n,E)_ssJ*FG)9]-NMZJJPE:bL)dM"SM;I1t%32^_nemW>&6Rp?K.AFY9[i/#4Zn$EZ2F.W3\G5jHh_RL_>`%Br%?t#:u).PpIm0B&3S=rPc\qY"6rtAbt5Q/5h,DF.\acg;C4!p3q]0h,U[iE9=jm9%H(Md*T[H8_#d1c&l%c`XPpgZVBTo+iQ&'%:3p3CO'l!PVj\?Vf"<S7ca/CN2!iX]Vn$SGUqRd!XBQiRT9WifbJ",K4)(KLBoDE82_.HCj`Js>7Lj--V8%%Fn-<Z24m%*,Qu:\M%+U+lfBstr`(.&?WQ3jF`/#5E_lVbEp2;,2BdedZ.o:2jR;Q@u\@K":#X@XR8l*7=,FsBAT:M1pXZ*H47LrRPWe&hh^C>!(bD8pVX%O(f_`rP4G1dTZ8jmcR.0mA:>g^05O+'Tf2a7[Z,++(A@B1$t5mWmYtBgcO[@l#(nTm3^8EKr&=B`^]?+>R'Gf)68H^%O%CtA2/]E%p8:6<[.0;MC[J1,/CL#cgiYpj.J.)@a!B4mh?>/BX=`^L[6^],O@7eRif#G:7b4!(&Q4m#K%:"SS@W2c8?^7^Qe#qW&o$[3A!'(b%CbeE5DTDR=%"k07fQ4T@Q:?1!*k^=*+r3bGcb/9R+bfo,S(;SuC:KHpR_d^emh'90jd;HaN-!)MUi8gF7%8Y3qd^N`aD"g:=A_=U%B_h#kUq'rIX[`miC>G=8AR3sd1)m]&d/I@WS$]n5WY]`PUS)0-WHW$k8omeg1.G!KFefM5)dM\O;YpeM^bRh[7>L"skK<k$0lG18%4u#>(l'3]7gL.33SgbT^UsFGPHJK,jXPqsr28B:?3k%gl"1S/cL,XW>1YY=?;HN!@da5++S^LafTf5@N;YO1d=@>\'(4fNB,NnGV%,#<i.)uZEqHcP%+!E.O8F_9[)8].QP8#2b(!l-/?2i:D_P0[co-A(?OXLubU@h^<#MGEFcO?gg_d3gPEn>VY+a`SpoJ*$ffcaVCn%Ri>+N';Nl*o5qkGbKi3;`m^dVF$(P[UCVh<ep2lp<c4aPAY/JO6N10/8O"e7cRO@jCA#k_T)75#Z09C[o<clJK`"QVjO:oh")^#&%4[-c]2@5BYZ&>G0mFtEbL'I18NljJDR$u,f/%4tiag#<ld^ihcKM:^%Xe#+7T;8*FigI8KZeI&0oVMsXnf-1U>@jD`]oCj<dj=U-%r6EqbA3g"UrGuN^41jhl*.,+V0"$&<Fo/k_Y_NieM*'=cf&k<"EK%QBame">.G_Rr4V*NjH*-.+II">n1hgj1Un4mYAc#N)GK4Sq%-MZB$rS3[ZQZ!OIpiO[bZ17OTdl\RJX/?mS(c!np@.*#kT"bQ1@a].n!io;mb@S]bgt,F0iu2.%g4CtXWG-29?6,iVjr+(rd/Yto%eCY.Gmj`[:=>$!R(f)`<n0-TNPHtsj(dTWr2hMn%"O(@?Z:(^6;O8C[Ls`SD/l6Pj><Z*R11"#J6>-buS@*SmWcK+V(6%#Sb]H<)%K.BFV0gEc)eRi.S)b=!*'j?jda<1Y[/]`"e1.^k@Fs,%E]Gm:jVA3Z'9;Lu5Uk'MErgsrsZh-;*T>a>a[0r7+bi%5X<J7_l0^)P.%;=lMoe2r?2s&9o9kPcN6Y@=kS$m&f^85]"4K@HfOd=5e_'[X.?QIpaFMhP](U6n7_.=<Y,cI\.fY\b2QH,GA1E>s]L&:3t_/r#iu%DbKrTOC]H3"AW18e4@ELGYAOfcIsMVaBh-3kA=P/Y;R^[BPTD\athmR&k6hc`0LR>CU(F(M$C<J.c>?h2ZIiPj]C^C]IN'K<Q2;D%@K6VXpm@S4JZ'p20LJNUC?j>.$kk\0`[.-B18TbUF@u`PWNmH[c!q*i,i19f`4]2u!_+g]:$Y5tJ6bj+1;6ufG*H2cGfB0d!1Fk:%eW@%OY?m:h5\4%j("OmV@/MHh[,]HV.p#rFcSd92Wr[O=R:S6(\KPt)LBQeS/n@>!"HEgH(Y$c'=TkT<B2VE1B0#fe'kc'q%^Sac%'j`<VUC[;HmS^[YkIt]^;&R]nW*DndcrQTNN0)LZdMK>?OIo.5"LGMX@E_pDC-g%UZ_jP0+0Os4htVZ0i]E*-5-.lq:0\WWqdp>r%4+(D\50c5S4`c:e&"1u,50U);drTGsCmZ8C<Cfm(#aY*).#jQMSpoh-b76oj&Lt'AM.R-MGu,j(]C]$ih`2Tcfkp6)UUY+i0e:^,%$SH64m[^]4/5)H/,$ZORAu/^848+d0Uta4/".DSu?R[iHN$R,:]i:C/Lam+M^UHq"Rh5/h9kbV5:s-&?k=bEU@::jqi\7H(lXDS;%ZVU$^)'d<?J>F>C4if=SI(N@IQ'\r%o=1E74A'`"k.[#(2We;c`GE,56<f\P=f">jh@Z/%Ll<TrBq+U)/h:@eiYGRs2\`%Ieg_4Z%qD5U3W!k8O)hbYQUTREU[agdeaB1+)7i$E;<nNGuh3E3j?:trG9:/QTZ5JA`'$2OUh%0m+gL,5/=rk6V;9&C4lZ<mt-6j08m#)_"%WsJd=QX.)$gQ"ip^0=h^"_K:Lc6LsNq'qAq^u.;Ch9:KC3E>phK*l@)IH>3#]8$Of^+cLZ:2Wn5eXTV`5Dao.(%XdKgR]:,`;FEA%>D7/+jG2lU]EHoaZhfnA5[%Q.4X6*g/"4FLjW1;Jqk;:FdJ/,0gDAH^`3FGhq^IQ->I9#C2Qpo@(!W#R]=4skXuSIAdS`O?H*K`2%@m2qP*72j]YsD-!J1VQdj>Jga:X$sIcLj:m'U0reWmrT2"F%$@LN@*<1rr.Biis#6-X.H=8/7f$"Pf-'1q1dZ-lGQsR3h7H>%@lD%cO,1eWr5:fO"ERQO?(>qnH?D$NnZ,L2%t1NO0#@[oTHbYYUm=9Ef56k%A@A$Wjo9M9(Dd.,b#(*AW:ihj^Eb14eQI5SfXrg*GA8`%Gon\2Zi#p9%"La[YLiifjcpa7<=C*^!!%G%:X^]Pqg#]->5BAj2tT?b;HWZH)d4a*bIa@V+asuN+AS5h@.o%q83K<m-\'=WN"=Os%ruG^n:@Rr1Kd(,S%p&s4^:ukN0DV_!NaL*H,\^0,V9K@hp#ZrQ]TrQWjGT#F/9e'6RT-dM6Ej.fY7R@6<(M2#MX/Lmr^3KL<-fkd%n?2?%op/h=VFn82^bNRC88crR$pd_1JF:KZl'0bIg_[eNO"=MR?>M9)g?]uJ8#pHB$+M3]Z&paECR'YI:`=59`_\'8W`g2sKB[di%A3t!<hKA_XbC8:_Ut2>b]0Y,-ij>rX#\>hZZt(Fp7ROY7@D3F64eMqQ<I:W]kZ5%Xr]["<._Y_ZTm)!XTM:b#=6nUT!2bHEDg.!<%=SR<cR!n'_A[*fINF.ep.uRu`-L5^P`e(5&RaeECchNa%YeUMdAGMPAd5@q4n_Lo`,F!L9fTfCgI+_kFKq2YE\&h4Wce.T:[J6"l%OPKOi]tG>FH<FT('Wm66f[#Qq.+QL]9mj:>:Tm`j?KQ]TR3`m3q6i@h?QYMj/n@#t.#V_RPKe=crha(W6)@X^pO\ra_VM<TQ"[Nd%(4@I[pgdN1?a4X4>f=h@].BC>_P/ng(2[J358Zu-\Y6g5WV1Qs(fi[^D:.J\Gh<o5[k&FVEd^,L8qI2>VZ$GJDu:?.elZ(^4Z^$d%+%6r>V;L%Rk:Kj>ku_/5nLTEWI)@tr,3`3;?!q)7.YF>Yf\4cIFHeO^LA=)n+9@L+2E#^"DL4?jcdc=mn2+<Xm1fp!K+#5Q>sT^I%Islfr<"D&pm=(/^8u3f#L-'P=P=>_>=ca#U>KZfqO<!p;)9+8pfE(q!f`JG+b@Vb!os;[E.iaO^k")]FmL72r3`ArL;^m^pD%b^0%V)55Rl1]MAVtWtg2M?tI*XAQ%^'@q8-BHnBVSF.&c46=-U3p<!<C0>bI+I/`<ke'%?E>Ffhg`G"[188dV0YF6m.9)<[G)M7h,&lO%6UG!ta\G3+?RX3+2nU<h'Q2[pL0K"3P\gJdN0NaRGsh,QWRWm8=mEi5?=rLRM;jZ""W"-F.9!L%WPW78\WnBiTA:ZSU'\@o[q2QH%TJNd'c4oIMi7LFNc`r+cbIcRbn('*K)8k6AGEo?*D5Q'doV+Xn:Jq@ik([)\bVP0"a)q?Jb.TL*>e)/;]q`#hC#@2n1%k9S0E#ch%DXC>c=-ge\BQn?iI((]ols50XOk`dJh%d-n9,3V:L%Sue[=NI'.b]83mqOYs=SViDdc"Hg/L@G0:*i820+4uW>:SG'3j/Oc,0C&2%N?n"M:<TX/)H6=G%kgVU_6\,MG^i?_n2#0u:XHrUj_pZ_'3D]P:XFqMb\,5Jm63gkU@H!;L/&d=4@(?`Q(L*)\,-<!ppAslcHtrB%6+;#Dlk=$qG+YF34"^5a1N^6)d-X"KW;I([DE,#li\-gqgO4ZkY/smP/e1$3[kpsFqk;Wn.mJK;DIZ')L;0%Q_c.%C"_k/"Y*2'T%'RO3]@`em$0dLr:OJ"M"7(^t0:J?1_s6=V0;8o2=:T0G_!g\(BF"d@O.ZZn[)>EJR6[W'W8Tmi+0t$90\+c:n'HY,tWg)i[<MiQ#%Rqu0#I=3FGHE_C0:+:VWB6`TlEZE$i*CF!]jXf`q+(i)p!EnB/fm@CMs,f=(\tXFC:1<U.lt<AJBk1E!:=npk$mHpKQh9^R3Rn.A%j*SD4UI5`jM<97j61D&8Yaa-C&;cs>q[U7*=nl&rktV2;;AD<d[O^KAcBoU[%bk\'_BP>&^s7+pd+X]4/@T$3X4AD+c!&_OLs3T'%>bQEc[!+TH8pf"CF`D#:+#-d[,o3082RF)7V$@hr14.,8DeA1P!%!?*os196DIM,=,e`R%4$^`$S/2%D3O$IOYXa.d,^@Bj^@cNi%+kt8NcLL:]]h6MKBXM>@r71K:C;L",$TEhd^B]3:](tcS^$#/CpA*JGcLFVPT,pij5I47#@^]ah"$51X$\G=Xop],2454faJs(*[%X.n;G]BTnMEpLZfB/h6Q'_29bmC<R4pUCt[GqkN]m+,2b5.]p+&S866+:%@8fQ2^c1"k["fR%EHhF+W\MnK=mNXL@1Sp]V&p<7EN%akj&)]-0Si^5H"`//a>U'),R^_Gjm>"q(rN.F)+mmG4ptEm$FfYE1\E7cZ?H\K)8B"`o/85O[=s98m)#V(=\<Ec2n4&g@^I;_ZN4%`0#iaf/)#uXJ3eT)(W7=Z-mWfr(3N;j:QW.:#:;Gm%CY<=a'3*/cV/t-\ET,GJn!Hc1kr.ZtHrW[l5_nPOWTU8aT<&b9'jC3T+G<%`9F1*K+\XXOGXIBA]LJ!TAe768DA?gI%4"'LZ0R0=)3FlYK0u-fA&ha`dJGhmbYCdWFKthF7@%:b8-h_Isq+^*#TWQYGE^('"&)N%a)ga%nK?7*o?-CF=(L54ZrKQW_tPUr@qbGf3Aq.pq7cb]Zqjb6i;#06HbZloVi3>;%d,Ch]^ItS"1[Cg`0QSNHDU?n2VU9J)S4Jc%gF9Tj=@P5H9FIIWPBbWnj\%Z+'+bMWQGNmq%?pA(e&(OdZcYhN1p9GS]-BYQL/&*]h&@\^-R=rPNi`\H$.=/YU5KPRX&HB0DtiZc%GcjfX&X'i^6f<?CL[4#ZTR.4$D/@](R!$E.F];?-1$q/[TPU`Hf6K@;p[rss4P\Lk&ipX!\'Ms?9#hX<LYK.&oe2kk6T\6^m?mjr%GrVWJ;Eo@HDWA+^LJNNj4qB#Z/cXsY\Fid7LE4oAINECq4X>O=4Ieqpopok(T/mK1_U@(1a$7#6""PgiQKWta`A5&>hM`\@Koq<>%P$=7]Isb$;g=u6!fmE=mWfeWFoEfaI:f3<gkI>^s$OE[j%jbtiLm2(p"7"LIs7r8bAk\W'cbqi6;r69:lrre.+Eu+n)&_t&Lc/#f%A=d95jnESr)JD0jLX8"h8CRG>lPVL["kD&kGjaT>5"%Q/qUkQ5jFV\)'T3[Yj6cU?dBlA54>1dqo"]r21>sr9Jt^gN0#TIc;,]ie%i>@,r4#Mmlg!_*(B,EOc<UH:p>8iRo4j#Rl?\J,tMbbH60\-l)E6Qoaf$f6\4)-c6FpHQ=nk^,oK#N$_+kh!;m/SruYm3c)0a$H?%kg3`=m9$"!iTs@uK/<mqe<f&>k)gR_R[cn5bAS'a86)RBEOn0],B`b1S],U68[\1Q2b3O3NV/gWPI0'h2:g5@TZAOp.2:k1*"^$`%Ed'3.YFqj8+JTE@mm&eD0Xo]RL)9!4\\NqggJ5O!Y.Va#)=ASdL$Mp/J&E(>C,e`80jWa!B'f+RisL"c]<]c!252T@[5+sb'6&ZK%L^80Y)poC<35H/B8ScNJIB,ks#S2B,/V$6EARont\e-JOZnD;n2W/U6M8U(+)i)Rj#\5obpKBWiH!ae(&1@#%nk(Q3D==M$HD:T5%T`6;oioL``']6tpp;Db(<7V%4TU^!b[W@;8_^(TA?SDDYf:QtDI<9>fa6NAXUK<dh?[fZe8Zf+th"kOZo_ts_lW4lD4hgjUc%;!@%D;L?8cE1qGHb&ZAT=],YSLu-dpU9_9:O>(5h7[!<@s'cCSUS.k^JnRJ*5J^^=F7=%iH:GKm-OYV^4']b5Mo^BI2f:HWq1H22!Rl/%W?9Fcg"4,ZB:t%9=4=q3c-t"2F>R0IfU]YMG56PNDlia8c>NBI/fJRgJ:0X`T0;K*@HTg>P08JAIV86S4R>g[ln3K=g<R`_qpPF,%NV_,1p?qdHIa2i7#Gm>?is0k^D*BrX]MG<If'L)2GBWj@qJ]h+^:UkHp2BTCN@,\4<BW_.$KNT.`;=iZnk)D4R^):DAuuuG`p1hE%$eL.^(ME*OQQJ0WjV^S%@lm-,AA[SNSZWF=gh4"]OCA1LUq6B1NG*`BGgd4LX=b"qWk!W-YMthSIU"SsTj<#rHK%Nn@]iIr8ZnEP%gH0`!318j](F%t')ji'mk]pnJ4ZaF#2'=PUeK^*!IpCmH]PlgVO_[rsR__OL3MC6MQXQ#f&oi4_ViJkV0MIfEfld#3BOJs`?0Vlq%49<3E3A+We2qSl?A[:07]m?%kfSOn&ooca^cBO02e+HU`p!`Q)gmbG`>#I?kN')A0Dn96T&@,A4d[RCTXYtC;%MS/?1iKshBrsnu%VX*nQ.sCK:]]g2XpsKcC:XYa#QoKs:nttaGDXQi,I:@-+?N!3+_F2*%\couqRp\aXX>aF'[-a[&l$BILchIE@hK6GYkm$9C3fu@,%042;T>B"'.FM68/N?O^C2dJ(D]&&Uu38SbjWZqJc8UAi+A)Wu?2dJ(D]!5o7314`])&qG%DMT1"J2a#Q:$G<;DR#%De+JmN4#5nl%^mhK."kgaS.;ue(^3"dB8n3+pp%&(HrH]L)S$&)2?,+%H-hjM([6hR2f&M&)p%"q@k$<66Dn98=dDPN=VDhdr5b0Xs8+EJBkgJu3%^`FPr*R6`flURM&GQ7U?rYQ6B_`b(C3dpG9bU<]kJ&`p!/V]TEL<WfO9Ag[g\emV<>qbt@B0O%>o$n12:E>j?Hf8@fS>Tj#MiKbB%"&c]&b!\=;QP`"Fd_>)*V1,mL\#8_8o5pK*d&Tgq-OclblOTg/X\8OUL-B#ep3RDEYWO#aC0q:\m$0r;_+p*SY/cKD-b;C58=n;c%NK@d`N&5b!B?O2^kJgNAgd6H-gW/9_1j?jrPK-C=a-`pDM=-+hR(giTrA.1?K.3<9c!BY<>jIU;0(nqj1j?jWKelf&/=[c&1OQl!%0gCSs(EO"Hr(8rF_*W>cg4d)BLBcGn]$V?>445.5XC)mHp$K#TMV*i.#k[QsH2IG)3/70"K8DUfo4o]do(J/?0LP[Mh*8i5E^q1O%qhMkf\reX,E*$93Y`#(!6#:RTW(3%>6Tl>PXXhV=?e-1@o5T4];b0D1XnP$/1U^(2e^D2&HCU9gf$b^/2+jIYq8jnN`2_fIBnDAQ%4TZ<fg?#(970S@ef(qJ3'`OB8Gau^poM@Q&$?]39#*<j\s5#t)e5R1oaT87baCb#AdsNNt3ms$[dPRaE_\3a?a7`2PqIKq&L1)kT%55d7Q%#.QmN#a#@B"KkHcj;iW0:j7Wh!L;8W%1X5M-L9p/P?cHi9h(Og_ZN1CcuXUMP1[QoR9pcK+-_]0YAXJ\SpXe';eG:kIqtC%&4<a3cO>#mqcB@7_qb=M[gD/u-5=;kCj:>^]4!iEa3/F'ABGi1A'mNYh$Gju9uJ]aS`?l>noCsa8@pA%EPdZ8fk;8kqOqe]Ff\T@%L7,hec`qqLNKM/Lm/-L&LubR'3S*ViHJ>DQ3'j_15=U]0e_B\8&rs@rMeKH:^g'/g6U%WMArj!*9ZL><AT1nadJVc!3!Q-;\psTT%%lSgd=0GW^qM&Lt$Ze\HXHZIRI;cCB7mjkh$o+$ni's;7i41gWrLWCj`eFt?%[E%=`&(lAL/ONNiA#F_DL!^UIMb#@?3aQ%c_p^P%B&!tsZU9P'\Pjkt@Zkf6;`%``?L%*$?!BKNkBA#aYVRBYc6Uk%Y!2_:e))o9WfQK"EmOZaV*$ZKO6bNj:sS&`0H8hfY$tu&`9(j[%R%QAbOX]aD"4#Ed5-Btmn)W^S4(Aih9ZG+1F)SIlnTq/nL.!$+p=G=bY,YWFdX-ALhH>?BZ1E5=q2M.bf=1\<>AL:_HY[Dt/%5Q!%q<4ka4L5:[c6]i77io)d?OpK8p4p7:o3stR]*B/?QQ)pc%i8H\\9G-K)kQqGIeM46Q[V\SrB:1pTA"P!dXJlQq#3E_IF+lhJ%F_f%f%K8V^5Yn4IQt6N'T0/=k$bm+n3&Y_l'c4VIFu9da7Jb!O[YA=eqHWLdEabOdg`KOF*Hm.@K2:-I<4^Kc,*Ri%.a?Ym-emqD1$X,%\8S-T\+`,"bP]fQL:9C_bOP"QBDid_EVIFaY=>F%EIqE:$Tf;Ud']m927\#1M>-h"^?,,`:*hP'<MOuQ4^>PnqcGKH-Ko=("1>q%%i@>j3%m$mhckH.:N]M'iSf&!kdcs/CI(B,e^Pi;b*0A/+3%.IuL8;TYcaVr?QjoPHCG6<@C'<.cA"co?AnH=n4q=s"2,EBB!8;E`%aMIJt!NkX&&0/P;D0TaEEF*A"@5Nbs:LAEbbnFK3eji/CeR/3e/>,qZU4eTndd*\-&_feI\f6IR)MMN$Vq%P8f;LXan!qZ/+j46(%NiS_iYER<f^Uhg\1Z\a#fHI!/%A!C\`]//-NYCR*NNq$WEG.#Gf8mVV0tL\lLOLeWq:I%[%aB%_(du8e!=g3)[dRK.?@W[rfa'Zb%&5I$)Ph[H^^XZ[PI:d\!D1=Xm>!:@Ao2bm]e/NZQAT4Q=Iq)kWi6`5>&;3^fYTs\lH)RiDTu[cs!5W9VSpq1;[K1F'0JOc/ih)Y]%j#E3eG3#h$A)k'f[=l#L*-OKPZ2MAjpA;ii(eP]"44S?-T.I)cC.I/u[a4h*>WG/I\[rjqEbJOiVb87O#/p0-YO'mM>/U"@4Wp?i%\#k]RaI`+APKm9CI\3lWlr_<$;.f1I,X90WdLMYL/pH8lq,$kJ,T69P`ps0Necubso#+jb\IX>+ZDPY4!^*_OGpG&Y@=8.QB4)h$%$ZPUY[iZN'<%l$n/(D`IY`2U"eI-?Kq/"lP,C9G$lN9-1NI8ATi,I#irmnQp?@^h#Y#0=4:FR`"Z,cj[UjW,bnj'C\&X2eYI9B6#%.Go,K\=jpu#:AP*<h=dt.::+7q&`5O2iJMir1n_\q2@uo.3IDUd&DLO.:<+"j+HK.gV3#%4$OT82Uok>q@+5[C>?INm)_,ifMK9Q%q@-Icp[`\P26UB5ThQXf<'.;@@'.e+fMEgSoc'FODsZ+QSC_\`\nhZPb+\D&%>>cC40N!a@.28'a'$V5U!OgAeSc^/XoWhH#4!8?%4h2p!LifJaeaMSp/),@J:8kWA0s=sQr@(nJNmH!)>[G1M&?8+\ofLI6E^Il4#%mODn)T\qoc'FOYEq@pP.Z7=H)7&gY?r[2WL_RX%OIgrXoDg>DhfpR5@Is=)G*AGTcT<JU)rQ6.;Ehf.Vm>^2a#>m]p<MsTdpdHO]RGKADE[P;S1(Sui0P?c'./gmDt",BpXfW>qPC1X%RFSM(\ssnH?YZEM<kj*0R"9eRrU.=IK>k[@?>1YHp$66=TWEU[aHf3h4UfR"2`0tFPLj`;I!juO4nR%bGHuUDUP9KHQ]H'4^P=SF%?S<AU8b2`N[9]J[1YH*Tbj.2qi/n?#q8?(#f5Fcp[.3_`[J[MFZMGSgNX_E.mtB-aLjAsqCc'H&2i2p0",#isP)jP*a;ucPhtV$?%S^fAJ@G<U"jE^\.^Cg`=e/9^=hr"`^Y6]n2am7R%Ik-F;rEc\&k4KZEk"H4/kU[^Gf5IUd9k3AZ'6hCO=oD*WO7*57B$YjP-h*bq%;+ie%>ATP:IN@_?%VPR9ftL(\bTLCW_jAr-EUrr8en\+sRdp"G[G8g6ZMG<FfN<Ft#!^kk\r<'/Dt((rETNR5rE;#.Q.>?!n&iqg%I`K,Pq]&ick4LgmMfTLp:J!8,RFR@[.OPMpf!S-TAbC]Mb9ZZT%<dQp09;*Yf5I<L/BlbB'Z^B^qMd,FoZlb]fXT9U3mbrnrHe$I%b3CnghK#R-IY2i4MP*%IXH[S6giYVngAtX:P4/(R+K">GRIFpe6a]#&L=lmG06V@ha2Lf=<a1?%[`.r]LS_iq&*A7tOdgm25W,CL%]DWKKO0G%_(\9k(Q<);e=Z5$nN"jtEIWVC#?_9@Yroh2@dd2[ok)VUl](6<e5MTN>noK"ip>"5J'@'s5ET[(rR@?G'B<H/8>WK4`%b$R."k`=3YZ_'EGg-3"GiTlYV[/KB7rTW/3qeMh\h#22=s%s&G?Z(:=qFH%JrR[eT%mD$sfj))ZoBGScq75+\f,!NKhJn&&41r=I%nZSqFY7&[[rA^6o1jABOaIJYYok"0Hb%u4__o;H7gNu^4_SVkS/)SVlDHH:=5Hc.L?+k3,k5:j@G@pL4]n;#sHhLXN;-gk5D*7f-%UY7j/j_hJOn*Yt+UQ8KCNdcGeEpih8`Og&dAmsmZj9g/%b-r;tQ^bT??qFtWmB*ti[!mGqrV`kIe]PT(SnC-g$[S.Gq>On&q8W*p%NQ]p,n)Y7Fk[EX<bb&,<p9=:%*@UgK_iln6Nimg(GA$obH[DId8:S?V5'-_im'HS%RYqEOZhGPYhE(DndETjspVYZGIN^_,`asIA%A#\<Kqfgg2$QIu!D;8Bb3VrO6$92ugN*"39UGb'5Q0e*Sp7S6b"^rTm9tDiVoAK3<;pN>3qV6e2?aRN:a6L.3f2d?j?XF*4mE4]'%]lbpTmbGDIf9=7!YAa4qG8GkCI!$[(H2):EcWd<VE24$]DJ.o40fFc/]<_7Q**?>*(=j:7Ir<JIh7T_)]Xi&rmGmVlK#RP5A+.mU%:oukW[%q&I]j%R=G/#WF*Ie8)&PMV1]J)!gq.-Wl3OOgcRN-JDoJq:-<@cA?j0*IBY'l/A?<G!M,<J-f(4X$+7)/`sI=DiY11r4F%HF*-frl+9iY?0?4?b<g2EtitLHZ%f^dq;n:Du]@JT5[uZc!B7f?Fb%SqVde.n+`f$"BV`Xk!-e"C\s"e@:QkC_lF[H)V\2K?e9=F%.\8>>@Q%<&Jb&O&q3(G^m]@2<]3,'k]mZ7HY`-kiC?s*O$Kk0$/Su@"K>P0W-d:/lLHp)\f)>=@!XL"](9rtT4&]MED%dFFgb3D\%l*>mb/)^AJW:mCNCuAC6?T`RbQ%E6*V:2q,V\d,tH'VKMI`XqOO2jo(;*BF%g-o]:,/h*A\9bCWrquHdH[fn9hnD,B.)5L,M$gcD%<ZJBjHe,j4lM7QA9B4OS<SrGrb9Xo5NN;KfrA4>?Im.f-?[q_>bf:[KhqbJD<%;aN2t>Gsl5D>Rc7?5@6f3H?H>JLjY@"F+AAS7I%icWZ7&(Xd3YX/lbpf"9km@X">PN(oarIMH,(\l+JT.F$:Dd5DX_rEc-W*f#P_EVCiDkC+Q.dEV+U-ESgX,k]$kGJ0pqPQ-nQ(S&!%17%+iR9Rq.Be"Q#B_KGTR"'8G@eK@%T9f;QUPk3<PlG0_"5h^3gn2d#;0-p[*_bjknXl@:k27VPIaYd^e>tZWkIh&!mEqO2)fM>9%XK=-4o,AW-mQ>@]Wr@#%Wr9CC4J!mVpRde(!sf%3-io[LAk:Ed51YHQ2k@VrJ%Bafg<0/n=7Pcbs1*LV?9U<GB(O-tR<Y)8m+*>n%`T#-#:Q2u6l4tF`$W?'M2qZd+0ZPkM0>GD3=45ZIM-L?`E2VhP5:IolNPF'-l,_XCouLUun0n4S$QkF'oM>cim!1](SfXR4,5tMJ%U-%PA-Pp+]d4*$Zok!=O_]RCf\IYptDpK5TcslbNWq+mP-#Iu0cAgScVq'f(b:Dnf/q'_71=A3b6,G]c4ZN+[6S4k>q&u;ao=-aC%#i",u[B.uH?7]&+S(AE`ea?g#Btc)U2t1jTkIY2E)sf6Gm;4g>mT.hg/\dkBejOl^C3F:sq2Zdj=I1STVO)P$gcTs%8+:r_SGi4F%DFs4J`2UIr<@tB@<j4TVE4)$V*YmIp'l_)@Vsho4[lut.aDAj/Cali:.<W!'V.U<38HLjEjd!SXr5Qt7ec%#,P!pdp6,MXeE*&bj%GPPpGP^9Tl9332M<SVu4\D47H_j)UQcND8di=D#XT<odIOAm0eG.[Pfa+EmNg#r34+lcC`KM2&['b@mVpdnJ)"^>WKZ:kcb66R(_%+/&SoY)^-S9&+lR>79rLEh]Z]>21'TO5c2q0m?#Z;p?mY032H"N6siG85P5fEMD9[cR`;G]fkuVA`Q+gfbs71O&6`*AZHSd(F!4B%UcZ<nIlP\nnA1=#XZ+8Q_mD%so='p6\b5.VWP>'uC^EEW0\ZIYh&3QN5J\Jgdu9^khC"?:TRSG)oFs6qGOH#\jh:Ukd[q`M_tdaS%?6#BB7K.=p"DW&Gq7B]`"j9Q@.Bq^X'YJ2&r0R'Q#AFgBQ]oc.G3-c0DoYSgm\RO@$KD$Ti]oAlnG&a*,(Xu!$2p`/3UcoZ1LF1#%E(lPLT:HdD&dI_*6j;Sir]-1?@)dYFEAgP-ZX3MoZuB\/Q$Ic1D_(L^67UX`g352Fbmq-#+kk`hI6db`l_?1inb2ifQGWDNK89!U%UoPYDq=6&q@<bkGA5D*4rN18IXa)%<l.:jln&Gpur0a:2X)$V,Zmti+K,)alp$K`6oBGJ'$tJHS=&<big"@n!mC`@[B5FJJphJj8%XWHI!a4k*[6lK^!mJe#.!R994.Lp(1gga,EO1iSW^'mk)H]N;Mnb22AD>JY,0L#C_p=P4&j8PsK__*<0(L:&-]`*6T9FU4(cJ.@>%CYrU=%V'.dcW'U@c5uMrG!6nlnUp`.WH2RmN"&"1cTaqWPqCbVQ(=[)H"6%#WEt"/@i:^oStA2p>T`V4Qaq^9F&,"_C>[*Nh[Zoj%#5-sBrjTUi82kR]?:YeQ7b^l_I=Tf;mAKF5SX+1Yrtmk`aSQ'XU:9$7B(8'5pc6g[@sb+L[=18c](PCeRI\s*+25.3rH-Qcp%.qO%N.(QrU\4@'5KdCE:=$:r4ko8C_0i:.#E*6Y&Tbp.c&ne@+7MSi(n1lXgR6%4n".cTIf$]>ZZtZd4aI>J;:Q#9k50q%V-DpSbYke>%HtHf*H#%$^hRiu,C]/Bj2ZLJ:h)0Rk]rNV/V=?'/1/iDU30k.,bL4l71FBTd,R4'UAo]\n&'?V=9O?B>g/:i&]SoXdGK:Q#/].bX%6L^srn`TdRe^Wrn^ReE*lW4lD4^S$Wf(Fg!o*9b]?Mj'Yf8FEoDE`I1n#j>gIH-C=8)"uDY:_rj#W"ErGVaR(9Dg?rLkUoXY<Uq>%r$#17Dk`htQhdBa3sm#'[ZEk5^,rrIQ:r-sEP(h1Q#cWmc]astguV&)9Ues>?G1\OHN)1>Da$qXqg59h#Mq[I0l$4nKNeIO4t;[Q%hcn-"[/4\pl_%a_c#QI,o^l@Cr[;tM.pJl_^X)h'DOjd1]AFN5bLfdq;<sL.pRg7ASXC40oBRJ\Q7I-]0NXM(m!Hq.J6?__j.BSj%&6l^EjQsk3UAB<1'pm,b]R=u^cM-q@Z;Vddi5GqZHN(n7`Rp;#2lg0/hO`3^&'o*eMi8M:[Y%n7EB_,2E?=fLhE?jH/<!nkZ.OH3%HnfDM!MaAj7+Yeqq6_$b$RK`GKUcmjFRjoMc%,/;2pK2SIt%]Y#-42&$_]]`oY=\oBMsW8huU9AQLW@(d(q?DCOCZugM6_%K-mkk%5HJWWDlqf?X=i`4_lF`TV26`%H5U1k?$Ni49&>5f3E?$crG'lQ4b*,7n)(U(/uZ`"kI486X&kp_Xh;@as#b[W.ru$@nRAT'rX?Kn%7274d'QM1cR%4[U[h,(iBNDn)qL5dIlctHINE.!1p$A0[fN[bo7TOj/$'<PaXoP3V1qquuB%IAMC;ZeRgt=Lf:dSGSgs-9-D-4X;%:98G*iTgsFabsPM>_0Cu5>ZP9^R_-t=^6s>V>/a,dhpa>:<O`#4)qYDNOaLel'=>F[XpMdp[7ata2RlVk`1XoT:K+bHe6R!Nf@p;%I:K-X<D0Zb*o[<kX&&3@Nh?.BKtDOBb^2Y%hcs>bRnoV]`@kUME=MOLF8IS-%)'CI.aIe2cYI3<W8>c^g`^1grqB4OaouijkDKL2%"(fY0;4nPb%r_37P)83j`^\lA<Vo"`27WAon%U@%n@N<C?P4$ll#h7#JVEjOCG_b<aVc9L#<j3<P4\mp&r>3Z7s1ED!_i3P3X*&S%[MJ\j[:N0tD(V[3<oR5Er?>#+f2])Tg,UlXFkRCMP>/I&OH=9r\!P6%]W1_dr??a6p6%YbR>^O;97-D4Sf!J:]m2VBJmZK,7U>)l%Rqmr$+*Pu3?,f+E*o"?<$q?]WEUI-cOL=&nmsdj4C\+7:?fMWeM8.o^QKs!Zd+h1H^tCmnq0[Z,\Io<,%0As0$kS?PM_bQR^DIpb%Fs[in@(#1X;1BFZMu,0Ob+2%p^b5D,!DTt4W-rl53M+MXg\G`9,H]m,o6b8#AbXX+$h$<PHa7YULAe`?%s(M@r7Q]8BdI`!I$hr<%IU;>EA$>a+Ad?p9k7cE+J#di+Ra$h-kOp"$hgBWnL/4_<B.@%mF_Q:gG^UL\orp&1]/C+H2n&9%n63Q>LINFIqqaM>+nO=.gLldt%]7"`arq&PIebSp(^(P>K\5mNlNVrFo@Khip'USOB6`b86d89AbB.NoQV\bWroIB=<[j@9sdlUM++[HG,RlfM>do\dSqViLPIl78X%g'>B4DtTb`h3:q]$)0!E4Sab?UY/?5j&rgsmGV*^e+-M82V#4GpsZC/TAJg;P%B[rJ(q-_\0"L*cHfk.=?g(PF_BaZS_8NP[lO?^%HX5I]>]=*$oniF8<Mr^Hb*OthC<-g0rd'3g]CU&Vh#G6tq!?H2$"^0`?:?UIe#DGoO/ME<-!$u,QG9=8F3E`UTq*KA1hZ!n5+4/N%.c.d=kbLhk;>fEf7E6,C`ZP8s11L1?Y'c8-=(cp[jRBHT-2>=0_M=)1p%Wu7Mq-uLktF.a`m;'G"9?!W@cQG][7nWlQ253Z`n0'p%])F<gj\N&%_6mR*%J.#C,>8H<1u==$&5iT4IsIS$5+Z7PgHB]N/"KsV(PBj+RuFIR9,icH-+WH&0M/e7s*J=W2N=0.l_(+V*r\:S%5Iu(2nbpMSdu.-@VcKtX<9hTgG@*7gp@fZts$&a!^[1n]h#I:^qSMmIog`dVD`2K]J+(RmrFq4okhahR\6.h;o"I$\+EN4o=T9mf%IbHj]nFH#D?e*Ge:-dXGYE-HC/:RA@Mr&-Rn7$i$Z`#f(c-1$Q?\Dd18@*iQ^O'R)6Z'!>>HRmN4VNmb:Ie`.?+Y3ZT9i&\8#Bnq%G@fWI>m>-&_q<P<9/EpOl8J;$&cB3`IJ>kX$$e'7+7uilUO[g4c`[5*!rDo&p!`AYhN0,7]2O;ZG^"-PSGmX1`ZNgVX,G<55KChB%dq:>;Du#g1jTC0)qDktQW<Op)b2o0qZ9dr,cM(C0a2AF,YY;>HM[VZU-]$4&Eqp'!/1Ef_3<\^,$&mZ.nHuKPh.8on`D-.0^^Y)&%o&7TG*;krVMAuTNLY%BDH3t1ma+bBP$K7]R6OV`#$es3$Hqa[ueI1+Hjad`5]6[ntE5j5^mcoMn.^3"g6?i+>G/[PMK[F)=Y[+1b%SLD(M(UbiceItDrom4nZbq;[,h:2nf'mY;GkcS7EY2g$T0m$JMC_n6?-].9VL$e.b/LQ):l@nV?Xo:`8?+mIJ;mVZWGP/grjd4n^%cs=]MW_iR.-17RC*!'2"3j+?anjpj%d;`/'UL6K#e`aNCWS,[]<MSTSHJ1*75uru*X"$7VLIG7'NiSV;>o4G^FY__/W5u!dEE-ho%*XPt,3j&f@N$ktYO+=:rLFsEsX;W*\FY\'TW44<ZQVilFUZ8?Wm5YNZC0YksE6,',EE2O73ARmTFBhg4(Q<mG)BDn%_EBe$Y,^(p%3t>CN3j*5i4neO>fR%E_AC]nR.R:4sMQ@_E.e=]#*a(?]Y,]:%%ZRPN);]:2AC]nRWoNVuh8lVDEE2&YrJ&3i%E+M)5uru*Wu?4-%++n8G*`nVEj:RJRUZ8@LL0>Z6=4Q?<4;M'W3j*4.]\hJ9/N?[I>h)+;deU+FKDMtV-0Y'Hdcui=C]@aWb=Oo&Q:$&IQe<UE0lTn4%p,-hbd(kKeAA(^-I1;_B!BdI`l.#&R*iOc&lcOBN4L9t.2_Uit@D6P<^8eGWC]t9;7GI?PSYn>?i0,C3@?XT!o3MS]M$5e(DEcH]%P:XsppX^2-Crp:tq_sl4)u8ZBIRDuL?7+Fh\]`;C>MO^1_:q7!MCAK#N2ea:+%MHc1m;R<k?5L2Et_VqTsW;:gfroA7Pg<P7Tdbc%s.+oq^$5^U`CXim;K[M-!-7[Cm6c=!lh/<M5QB,jPF:<TQ5"e/9ibSdlhbjPZ*8G8q=j8D;U%Q1\9[pbpXE+sIjSRP,$9>dRk<!_%mDQ,KkpHDJ9DeFr,MOO_krq75N`BnqA>EFeF^Lc9T9<JBQJ9rD=VIl<;mZ%mpGQ_4>oLmjF7mYpek!5[%_kI4YU)<Mo%LfWm`$>%%<`"JeqgJE*rH.)]XTeR#kkC/4#&3'2>5#s#5MS;%s(h?*j/L^IQ``NY@`SDq`REna*:?XEp>bLBe813V.p;R9f+)7`NtM&;UMC)p%Id]i(_9oZCE[HjA*unQJLjGF#on*@RK@g.lQ)T]3CqQaslPlJRQ"J7>g"AoA[/]1L="*!5YO91*pj%5\^\^N"C7>.&id^H9*N#*>%VR:L8(C/IW[o7@Kf@OnY5.pXNmeZkRp?/F.f.5I6I]S%Sqsj4"kM;p5:1""LZTHo;DQZcBQu3YR3'A)T<5";6`4sTM"nd$)kNf*^%qKi)>Zi<_tN1IKX2?%uAW`lQ@lRG&'/\@[hEpuGmPn*<hUP!QkO3?6*;]DB/.X7U'X&SJaTC#BR4I0+@J)`2kiX^N/dXS,o219-6%`Lk]Q4)"<GPk$:TLCbt@C8u%FE2q=9E`LdX^Mi;miKmf\r>V+%C[0$HP7iAV\c01kY6W?Em+]-$5<UqirToTEm8[>n\9bYg92!=,%T>QA@CY5n@lhfR(^AkkGDL1ujdpV89qXN$2$RsuH?N'?Yo\D2OqK(s":\\4]eQ0C=5-C,J8lnab_&E)3rX`/a2t3a!#$cGWNJe0.%dUF*uhcF]AWV1Yk1l[DDg-J`9WaYFJC4Zd\ND7Cf"'SrF7C:&p'5:HKY#XgdUmYdo))JrbKiCu$6WB7A`i[*(S[C?%RUojV2:6dl%7uL_5bAfUbaenVE9%M1.6bSF8hZTYkV4*!j?i+CVWk)Kaa%>t%252'7bq6Q)k#Q:=>J[N!Eoe4B1\LlsBk&fqSN(Lc1JPnAc?!\=%r]7Kdj3Njf@bV+AM5)r"Bfa1d7@Gs\G$I\-F8e3U/^1b`XA`n),qDnuU1kEkS(9.F@"NbX<50CX`pL]-"?gr]NZi*(\[L.J?*5[u%d^YQ4C7M!EGac%_eP%dM3M(:28fFm8'mrNnB"?L,+e#NmV*1JGE84(PT'Vd<]-_9/ReN7_RZ2Yoq<;pt7TrV'ot6rtjf3<7rsCV)%Nt1>.dMhG.Un#G:PUs9QERJT*Le-'=`RMC`23i9f,Y57ajbO[7D??Njf5X0rS^f?lQbBRRd9LWaMp#Y@D4+"-?kAcQ=bRbe`f38g%3mt+=^69<P04UjdMf3f;)kP:+:6"!32S)frpW,7D=X&Mg`oFH\F1cf#Pr)[YAgY^-;6j]-qT+#S-&lZPeB$*CAT!/a^hXn8)<PM4%)`-;i?87L`T58lE^)?@I;;MeoDUe;>Z%k9Fm@1Tri_P>HC>@Io]1@h&Bo(7q<DBiNN"DC?EbH]<<1F#ek$uOlcLXnAM:-Y3LglcP%lhEEZ#>36r,O[6IG5,U-%,s("g!k;9cD"QW<%XBc%<3h8i(.ocMf>XeSZ@b4)hH>D\-_\="3.03&@\[>)d,ZP(n>ERAo;]V::n$0%9Uj&Nb[1acNcWqDf2?+KNe"T1C-!DdFl5";/k2k?.aOG^gqIk]#-DV]2!o]N.U=84``kJ::%3mLbZV-+VS0=bI/YQpd!26Hh)\!H%3jPL>VJT=I?=XVlW+fV:%:ZGNC&h\&2N8qb*/rHrNs/0hC90pP3R/jV=dkp1'Sbl'DQVshBf]pA_M;bD1Pg%r%kI&s5>^3(+UNBi%8+EC`MRh!MAO5i4:2$JnK"<P`^`0FB<f/0)CLKSG*7<bk`qOEm2"0#*DG@'`%5ek/Tf1+-%@reZ4DH@bgf1Na&?53(@_o$!FBXF;%lZ!=C(Hp3ZD<c_-?Usg/NG4Z:1:FV`">o4rA:kSS65B/T;WD*B%`K(d9?)%\_KutX8WoHq;-?(84>U+ck-Ki^ZUh,Ic_EC@c*U:N%&SERSVdX<7OH8dC4<#IrDHar!M]u4JH+;8cE2X^#+#b;Ld)(%oFhF5d-#5p^@&.LDQSeUWUatId9?'n2.\nj[dXonp;E8$(^MUOb%/!<,ZVYDj)#BT:%2GGbRCQ3_4WA6WA7UPa\G[A11nMO(-`Hpcn?.$\R*iCDo8",DJ2khHSdSr1V[p:RAjr;;6FF5"Re7oSL9sD:S%hMKSu2cV*gbb?$2]sZl@AtAA"c/T\@:$B77j$Dipdk9n6N_aLB(F=oq7hYP7?frQ?3?u!NnV3$?)kLqQiH/^9lPdjoGRa.r@H3@0%CSIe#=eaGt,UbW=H)Y;7il:&3\)t<F_;g2_)YP<%i^(A3B+<1&r7Zeud1B:_'WuH2,4l(LplMa\blVd1cD<=ji[Y*7E_E<#m%5Jj%J^X_a4:]^R1hLM.UF8b:[jpI_895oE&JNkjqSU/O0UMMb1E52qYnIJR*lu_i0ZV]ho&<<YjW/4g^/@P<M'ROl78b85^7`H?1]B[(%(2>(<&6,TJ#<3R8ipOa%W/2:#Y=*,Q$Y_Z<Q(c)(St3!i^=TJ@apk5.(]B4!VM:(*Y@\56^'t6gS#CApqK-n2%&J21nr$BnBbrZP%aAT[t^=FKF(n-ui<7+TA.?\l7Z\!+CVXZ!Kn.[G]`eSXfE_\_CCYGHk$$Xa<UZBFQLDn>N,%lP(U7!?+=4^]91>12g`!$s3&f1th%,sut2*4Dj:,S,,u79ZIL=A3p0Ufh'Jq`__0ELn@SW?A+DL4e*rZad=37%r^"nXSc`]ML0s\98=RZE/^5+='%t3_sm'?5#p7#&]G*%7.GH:\->RqRjl(Z/^a?lJYk#W'fnsFNE1(.i5UX%FJr;:Bh0k:1`%6Y4D9#>7&l7k&)Ua0T1H!ab)IMq."$`UB_W/%YD$-pmH@0F%=Q^V%g/b]eiR2mi!9%?c'/bZ]gih^8Q`TCb*s\`ZUC%nMRmlOA8aiIGGWZ/(`Cks#`j[XO*NYGG2>HHkl(uuloXmWo4OW4&K"l1;%.lAO$2Hkc)^1S\Z<@j&RI!*A-<Q+I4oka$D>$FmT7IcBb2oKj(r>9luLut2<.;669n/=0dOp89e>"OF:[pJPV26D8[UnMBMCQ'I^%HG_Sjm^-Y-I'CfG6A7?;.N5N\`R5UgX/YJC[;!/[Hm?u%L*UjCcSlPe*=0lXk<cLm-\1-<(rTO%:IYq\-_+0QE4#grh80g$Wf\f&%f<X&3Wjnj7.3%ndHnWU+a"rq1)@f#o,']GDG%R`\ReO-hL9Jlf&%r`1T$BCe(K4VU+i^9$&Phad35jFM[nH"\8EB@NojkF$@GAtr%?R[AcJn#+_[^&96F"FAr<XC+X@?SIuXdEoKiMZ46U6I7Q_;Zmo.R8;0)^Pi$OAb!g`1+\&dME\1%D7r_\&(`XK;on40P\JoCCP"c%_ZM6b+s+pm''[UtW$I?Z>raOhaB<,6W3tTMjDptcLaN`sZWje?Z$NjO`f3i@rn92LDj!'^G6C)&;#KCd4a&nD24$^j0+Fb`/1o@n%lb]<Sf*./KY2W*U>nXZ55PCnt1a)>?X9u1_'a_[?[;7m.1\YW31d2%NYuh+pi',Z-PDu_i.\,+<R^c1NSDrak!8E\L>mH2Ur3^4"%6*G/HT3=O(B4rdDhIK;iNim0GQ/n+46%rJ$gFWu=,1S6O%8SG0hR0:rnG9%'?[7c^dY0,,:JY'NNC;:t<Fo"#juIK4E.u+d4Q/KF%a)J!K[rPJ-EUO`nVc4"a[Rb3!MVg3^o9@'j3&tF.\>u*&F?0!;"M''u;`3>FBr/3J,+_r"6s*+%_Kt!1;:OXt:Kq7"/LN<FIl5D7%Oj7TK@t^tSkZ)`@)'Vu`d>kTPYB]uqSMYfq%kTuVAjYKeI>mq<q["fGgGWB3\fu!0V!=CNR&Q2PWa.5Z<A['^AC,BE^'5Jkh]apQ%Y9Bq;NM_l?7!HG-1e!g5AV$LC[DWAR@phZTWppf/D/28jCcnC[qL_P+i?M7Ji^8>)'cS5k3D^2iBR;T&\8t!KADEWlR:%-DGe$83%1DLj"jCU5n9,d5of)0O7ME;ktH.,@._p25CSSS59%Ye[K4$qE)1,@r\51[q93ZZfnlq8?lfX9A,Ce?q]!EkGuP$.1V70VKXBG7g9%WN>!mdFKkYCNsgHBO-m0(KHnS<hdFj!h[Idg<a7aL!d23TQj_WDU>(o1Gpe-#AUWY@sqihrF<OFJ)#l3c']hsVB$T\_tM"a9oHHf%f\:dNDg,(g$O!FL:iOqV:.m_O_+&^BG!&R4!P[UMc""sQ9:Cf+[`PkAbK8NT[A?<*[@<J_k[D"*$sAY'\&BbBc;!LF*,,)`K.q=d%]MJ@sf5P.>[]$F=/rk@l9oWU&aV6W`^0qbA,+<2@iE"QP7bL8l$kH,t<9-JOHl=-PZf4'0,)]VKi?aF)_aBf_1*0cYY\'#p)N.>A%eFcB(!+kXfZXEODY8qF@6WE;pL&of2]TEu+d)MH)L0nTJC+cLE'u42J1WZS,;udRm5IYGT@\JRD-!h^V`o=T8%3o2uO]JaK/dcU+%YRWbqBmO(=D?2SpQ>"R=?F`Klb;Xo&eAum1*J,1[_[GUA:S^J-Ufe<p\Dn='.O-fC4,uA$KB8A0futetS^:p"FksDt`j]LoR&8!L%*,1Go"\Wk>IN6[YK<eIPZ48V;i_*B3Q$0eIQ1hke@a4Q1Z(Na\,!X7Z\L]r%,0f]P!Rsc];sPtbhCV:bMC6jL:fGK/W+ea/A(hX)%@ToOP_C__\*Oiqp@;Fpi#tq5d7Y6V3SM"UN[I$g(eCHCD7\NdiJUbbFj>+0^_?O_!4I23kOW?9lp0_)]L0;GO4LaPr#/4M%Dd3O1%?6_&9"q5DM-P_M5.h9`1G=F&rBKa(qjD,B%i<ZD[IiW6G-.[X/\.bsPNqH@&q>eQ>r]!m,1u&n9mlD1cM&b][8N.pr9.Xm\^;8g:%ib8k'X%bn?[>n$SeLh`KR1UhM[B&<2#u2spT@d>K;Qu3Yb?/_BP$Sq5*:"3=H__S/YSMq0>*5\pAR#73@R4f#O]#$9iT&<*'5@"k%LeeY4Ysn@6b<J+/i-q";-&C(hm/T[ej(Eg^frB:eHg?ZM]5A=tj"qj4$>S`s[NXag<Tt*&i4e30CG3.JME2N[X@DVedQG?\RCXh\%][ElP.n[\D2hF;0)VHJriLE$26=</<U+gScJO)cp7'\d\Oj_nSQjkD4L/9I2=ggDKCbCT%2XR5aL3??%OurEX#<#Rb0I!JQ'3pVX%8eObU<EL,?k[=0(FY+fnXM/;0j]bl0C*p^fiN>rEE^cG*ir5">9La_RR:$`^AKYN6$nebEfWNfPBlhq(#2.Ri(AJ*76kL$?9\_a>%^(%A&iK,s,H)*AhgdnR\]lm,UFke`5JR";VRk&NfBpWq9F?i4oMKK]+A9*:@$WX+LAHK>nmsNn!b#PMCNHZkEScZI(#S85Y-`Lu\%.9c?-.=aFp*>P@SFj']b&E,%9N6"7!*sMR=Yb:2*h-KB6D,S.E!(>?JI;M9q?o&rn>&8dWQJ`Qee(TP"8O/o)JI=,2=tepG5:ZY.%mW_TEHI3<?4.m?S@J=(GAMXh9SI@/B&%!N-K+tOs<A?;'TQ&P\3n3h@'9R9QE;C+Y'OD<q19ElDKEkFpo(]JKf-<GU*.%ej!Ss&W%>3?,A^Y#@Dpje34c#G3;(4S=u/]jA6fCE`Mek7jKP%N!sN<*.H_,kZ7_CcV[@Duk-_-M>i`50>d"0E/,gMd`.4>+HZ@p%hqH"IU1%P+W=X:U4SbV*Ts_[0\5t'ssF,Kth57q%RaEq'cdo$G-0MLV^Lm*gW]`==OZbZ0.O2U0-0!#;unE$"&Ft[E<S,AFr0:MM"6V?Ok%R%*;+cP^ZMFRf]:/-S=edm>'c'=.]Nk,12=:s$I)UjSC#XiF7(p7(c709nW7pY./'41CI!AA+;.do;W38RR;p2>j/jk17P5R>+L95.%7d'/U"j7@4?-A%;\9f`h11H;8@gdLak*+*;`dgeMdUnUH%U@)6<2epV!\9!AS-&kY$Q>DrD#0U"jgJo$=^4Hb8CP!h4!RgHBg6bZ%E5$2dEMTl1Wn8mA9G+jW?bm,Lf'SWNBs)i1?R_@UgUXN'U+=*bm&Q"dT>e5g89n8C;03i5*CNi"@0##[4UW`jmV%rGLF=:M6503$%M42Ce*_I[B(d>Gb0Vg\dib_V.hbfEk90f4QRF=aLaHE;L5V:$Y,A8td'g71g)kk1hJ'&BWiqRdl(b=TG;tFVF2Za;3h3Z&.(YXNR%(A9_@76D%>Bj\JI0IAmc8UXEe0nH@)()R^Vpmkg:8;mAI'9!g.im&]T9R,Q@Jh_[/_3SJ&I$*_Q(t8A"0W+TX^mLcg@WZ99#t>fW%3_[snJM&C):,"#.K0$i9^?Gi3qPHN!$Q.?F\]D4qR$#r'`f.9t"G%t/9N[`Y0W#)1*8:O)qToV/)6'07be!'DA(FX50P4U5K/)[a%!:^qc)/1:S(LYH*pqLNq0dEe.N*4L70P66cdfVK(V@CP(D0LUeTp)$TbXdX"h$.B+<&e2u!Fru/2S'(3oUuYO)-;\iZR$I;2r.k8%fM7uF9MbkTcVAb]K3G;hN/<E..4K-"oDg>UQnWt8qh`.Vn5C\O1XerMAjK.!9\?D!IEc.nGVF8m0nE3/!7MdD$':oW0W*1ZDumsH%?]`'d0Yac1g`lAG(_[CDDD3E]=sk.#cA>:M-7G8Q;`^Ht?tsF;8iGL59OP^i0IAJT-Q!N*)<%PN(_a>f2]*3O\5=h3AdsbW\dcY1%BE]6ZTI)@)NR(IN1U82>RdLAiel=XG'*cnl`pCDS7_$.u?s=P`To'5T!+Yl&(Dmeq9Z#%e0W#'hSSj'7JI.g#"j6J-!F%f@5Q_4#%qRRW)l$Y3=-E(E9^mM'=mJpaKP1A)'?qf4]<e-MF`e8>UJhan#@[,!+O:fSUB1/K'D]Rh@=?^,VlY29G>YcTp"OEDh]:MJq5'Z>O%XQ/k$;(F$?dmu@(!%L\m=UB250@Lgj4^*eEU4B?2Hu:_M[#QMPj4^DN%H&hq$.,d4R4;66.2c2O]?ZP[?H9NI&/DLlp,0>hR.`&'%2M+6:DPo?3I6<GIFBZRh7CU7gWCW4SA9'`5i>^$Vj^]4,!B%%6:8]tl0qr#!Vpg5u31Ui7jE+SkUjkp1Vfd8q-`9l[2=%!"dqP>X%pp;^)]/8KJqC#=W2-r$Y,pOcS`?eYW<&`h);ECAcp2S2R95h@%#gtRlS`W(=3h7&9_WeG#-E#<2N_(.!niCV;=maZ'1fAI5"]Rco%V[]:m)tk4^?d].;B:Veq9g%;>'O)916B?>BnK=aY-9VH(Vpe,Yo.E+q7[g(MS=NDZ[,c=tWMS'XMonemfT,+=cZhJ6;:_Fsdjaop%$]^XG:19)N[oFYe1.kS`W^6`M$Sjt!q4'@>7OS#%_Ld&Y'_CkL3iI_N\rO-pNo)#Pi&)?PCf:UGLMa'TIVW/dKA!D0K;(7QP6Lpk%k7KqUWoAuC#n`5ZZe>^>/N]NSJ8_MW"jSKj-Tb7I-3]E/`aodhW@/XAEX]k-:8`&M1TJ'+3X%,nWH7-B$?q%95VX?t@,J7Pg>mB[%K7R6G_X)DK")EbC_Hs,DXcRK0C@XD;C.qs3\a@i41j:^eS`4%iG]],'.1FrW%t/U_L%u<HJWR5mM69g_,H2<d,AGtB;$\7@'_I5r%PKR["Anh6*\X^N;8?rZ9SALS362YB;jV0V>'1K"4SAHmhRpL+q/N.Bb3UP\SU[ZN]<;(JpQ$kpZ6uh!&[YT;SC_Mrgc(N4qjUS;@%0NA7T$t)?/$&?c\?%ADIZr_)(%[rs.oApaH^g,#t0Ha30[S)4*.>T9?#0d,r^l#>8i#$>M@)FgQ:."@WOc.oP"RFi"7$EW!85k<d%f?)8$M.\%b$<p[TJZOkbBSGeL:kLmA!s#)58BQ2U!3f[)20d.pP":Rn%mDV)U+*,VSjCc3MW82[._[QgQ;LjU6YJco#1*qi14Vft%!75/Ho_U2@`>K3+-?VFCFhoDoICaHN8_3k"Ef*i9,o.f7i9>e^9GV?&r"R)]LUW/D!oJop8dO)r(JL9hC#5=)#:oclg]g1RX9+h2%K1c+e7W`1'`YN$e8Z^\,4\i0qGaDL=0ri*PJEl-G5t%a1Rq`V#N)1-!qM1kk0Zc(P4>Ii-$qg0NJK`2GKFO%m(D.f9*FcbY"/(-)%Pp]9NP%%:o.<P)XA$[_[BQD;cTF_REoW\U>6dlrHMoHr-8Hmep4+[kT<:KX`q"m<ohB4nC8KR^q!I%@`jGP%)Y-enq&YD3?6GW_]%7$sjG,s)>$-?#11-T0&,W98t0;lLnU;T)!3(<iSY.eM:DcV:hcFrdESSGE?\g.IB?6,\DUc-&s97.ca"e<0M+@3([S[Rt?>TJGW,%,d<AQ%*i8h5Hl4;)C!B.i0pZ5kX!eOm;fX3oJ2Ff!2dq4]8A93!,*oDn]8?D#E]cT=&4.qJl[[Z"go]T"'l/cM['8GCn[!Pg=lne%!0=R!+!V.nUkt^?OpYSN"SF;,LLAQ^8^`DO2Qe?W,gTRA]"iU3nV_EZ]j-9"j:YOJ"&?7-L:c#[oMMI:V.X!CXF1Yl,siYu#J3#W%=RZc'3`t<hmBOW"fYV7)8S)SO`=2Hl@)4,r'4Npibu'^p%uH_s<=%d@VL-tDFTs0rJ9N`502khYeT?d$%Mf]O/RR-V%H413[:^s=%.YpRf#/h=OAieB"h(;f7B9Q`=3(_&%)&=CT=YGLpV7:B&$&6MJfa:FskO9]["Q?:ip5:3i2_E7+O]^5L1_7T3<s6>`i$?Z+#PlK!%AY??d/dt2M3#$&c7q>bd!]3cZAmL4p^]DLI0d7M>$XpTQ4;lKK`Dh]mA/U+/1dan7U_F'&AR'p8"8Epcbs&N`K@X:jE<BmLL;a0s%'5S$67@/^^TO:eoU\M&]RW]n*o!AGAaLA&`L`B?f/6@'/U<I5M>2J?h%[4+'<7.<V5)t2+e(<Xs#;k*qU%7b'LRE4>iGPT]prZ_>%8"*2AAM>K0=mlhS"31k_+>bkN,)r[2KbGDKOc@?j9lrd4]*',)n1Fm5d>h!eO`KIdNLRd=p=`NP.H74G8heHuIVqDqB4,`nB`3nR%[/i($8BV/5XC7L(-VGSDikB#<3]ZH?;'BqQl6J:jeWJYlJaLs.G_@#jYS.!XBH60.KZZgQ1*"Lf603ZQaZ]h7G@R&\p(X`bM3JVc%h@Y'%O9'`Z#^W(ibVI:-YcHcW_F.RCHta/[/CH"8@X%u&S]mhljkqBm!kch7Na.`4f$`po"@j@@Ra7%h,X<r`3'.[p)C@sIgW>]l%:8snS>*Df7J-6u?GXBih71:S$5*.6q''\Il]R5YB5!6;6k)^8?+<Fck#")"-4Lb[Q$eBK5rMg^AEaH1G-&r0![:a/;$)5S*msC*W%C6\U;YSZ3dpZXr<e*tlr1oGGK/H%S0^eY];..OI);\*70E4MG\H8_I7\#GgT>6f#Fi[6q:HsO!e*Cd\,)Jb8I/W]!>$V9t\SGEfZ%MDT+iN)6c,,gZULU>U7:/qNPgM;2r:.h,Yo$_A8rk;NjLRXl7<2AI-ZCrPYD.%1"riE:bu\q9&oP%jFOP1n7oX\5le5tb<J\^J0j%A7m*oTr<Z!6)XnjRb**<%7PF+,)qXTr2ih,_'mGT,8?nl*["8nPG5EU@YKNb?Ih_\gEb,skf!!XZOe5%KS"qclf=1o958b@6.9Km%!LdFjVog@m+S%Nh*a%cC_K>?%d%kIETV;%,D5p#VG%AuFVB4)4`Q;7><\Qo#E,-<e>gdH*'==b&*.cT)"BVW4d3K8>>f@]F"6W_n%cnq$:a`STrZt6G/ehKLgDRZPGK0/:m2L'`1`[>1%oeEiL&n7R8huVAb=d+qn5[pX:e6peEEK/-RE>,qkR&DF2;?/GS%_OntVf*rS%$B9:bEY%d+O[mioiL&6Nk=dTpnbd,7dK?HR7('`d_akFLT4?bM$bhg2%.iQO!]7Xk5kGC_M@j-G*9j,!p,jn*L4*R)?+*\nh:R/@%Y"`aAI6S.#0l"PdK1.I*S`81GfVXrRWMIZc"sQo+Cba9d04ntB0LQ;O.6:s&;#g`kJ1<'&CEb2JFN7-s.Bm,.k>Gpql\rl#-%V)>%(i9q((\,tCcbROm>T+$Adm6Vg.8p7+%e%Vo2V#$-'t0]Rm@)'C8-u0`9SgQZ/D1;LP<=85)H/@F*s5MaFCWLg-S>J@9)on2oqkLX%*D;7rrn;^94%ll7?;Y3r*KP9jc*A.X.-Y4U14:p>o2(#AhCSsA3]_l7jcYalIAj\G]_DUkQ(!H>5p_ISoarI*K]MfsPXa?uBoqO&%EIW#>N.)qO)UQ.IU5T@girCR02_d]1SiG*77UQF6#)%Q39[=t*EF\&d:Z^X@m)THm1dMGX'R7TkN\uX$#u;.p>+@R\3+nYVg$ao7%]MKc^G">3O@gL]mm!Z7^$2WL<P?(gd&k/T_i&klh'"0NZMpN<6!p3"B[MMA]"<a9Z.B+pD-'F!"BhAFH0p!$/(Hu3d7VeeBF#d>s%q'PMjZ:6hb#D\?<$0qf!74%(>M!"n2,!=GG'Fu4_#>F76)82;T=+_J>H<u1?>P(qFXBA71.E3C,)4%>f8;(9k2l%Vu&nsI^"i_CX%HnQ&N(^g*Rra(dQ(".=G$4T4[lXL+Y,:10D-MV-,Ej0#4CJkg3^1@TgTre%YVFX_87>Fbef\EjPAb57,$WN`BO'r//Ue+6>`V;i'%L(s&UV2mtU-*0GOUIDXSJI.N`clsMS6&`p=AUQ<Y+N,,YBS;jI+C7tIEX$1pN/BIk\eYiU/gulU-/D%?>/`=r8IkgN$sWE_aqtuE%N'6^PDGuW2R9fUB7*LX(-gH&q(B[B.bciQJ7\MK07,&qj-d^k0,#6"^`F'`"]NhUFQpiYD6\5jMN?&lLc52hnMA_Mhjaj?DJ;l[n%EBfk-&Z]Vm8poEAhh.;494B.aM)JYH$dj8(kp,t4$iUsT!fDrNFLhiDS4.rr66c\!e2"9EYlLpJesb1NbtiNj`Rl\-D*c)!p&gs[%A0A*."=?u"#b[$G(fYbX[Y5Z^Z+QBFCT*[;_2htLE+CXN!oS^=9@IH?o?;MD1e4@?,ICf4L6jA\bfpca4;VfZnH=Z<L`jKCO]"k`%?nnsO'AQbsnP56c,pECGMNaIuD!/ZpX\o]de=klZ22kj-8$Ec2c=8K*%BFTm+>3ch8AC*7=u.bO8c`_5fFm8)#"(*X5bGpgosb>u%\S;=87aQB^hC:C^Et=+M!l#P>HGJ$``3&.VoHCcnUL>/<Y"g_4JF@`J$]tZ[1-f>/.9]o>U+PAa.nF^01lZ8eF:u2._3BKt.f+fJ%`iG.X'gAmQ'sK6`MG[.4Sr-D-H8)F4G]h_J7jbK]eR0,Y\78)u!.[99@L<\JW;NGa,(`=EHs9"S&0MUh1l2JTmR)o-%>b?s@Xhqq%!>OorcFbDGJ>1jj]F'f55gdl^\^S5&$?2$(;+Ls6&2>?89*,=58MEsT&U[NqX%adi:H;O_L]BV+FYZ[TLk#sc.I*hdniil5pdmjR%DjS%Lhh#ghMsF@U&aH/;bT[+u&]dtq&jfl\f!,o$^e(F:4<KIei%u.\3"jU>=f[5N.7Ah-!/+[$QHWe?ofJ<Teisrp![*r&Bh8R1%Ok(_HY_Z-&$5oO+Q"G,i.jcF5<[k4D+XBIUQZ0)Y,=E0V"(iDO]UI8k.p$kQfI2Tm75=qK7jChK^8k]@d^q[L$'?^R%$H_1';QmZ%rie`tLjL_cRpfR4S/%],dBJa@*2SaId,:/F"D%`2Z^)WJ6:.Q7;F3ZD@KK4:HgN(5!ROI*)cVV"&?dCU#9VgphB\UZ&eiWsaGA5J%`!!GL8D$oT'Cqg&R"0@C3e]V[3tm]f:/&f8''":qMLssD>4uqb."D[uqH?LG*4D-o"B^$d3ogG%.g?n=5lj*#,k_Pf$,A)m!#eF(%J;qe3GstJa,b6!K/12.=6;Ar-+t$cH[O!7CQeKe0-9r*D`!'a-!CjqVO!H&o?O%f\?$[VYK>`H&AgtY$&"iqh4=2c`W%$:Nb6`-\%eq1&53<<7.Mo$^\$/dGWmUJg`5\EC1'Cb[UEQeOpP6;'A9XSS-'O^`1q@+2S0K>=n/>2(('Dk32'Yq/t>,*>kFAKn)ZTY!iT),s)%Sh)9Laial^gn:uo8VD=PMUi6-HR-f>)JX#ZYgSh(>t8(!lfBfe5](6:WM"i'd[K9f]E+.l[YA)S$5.e,jIX[$RrgXl?W5/+"Hc]U%%-+bR=J=f?@`E;K&!4-af`STh,lTOqN(#4dHP0YPJi!JP&KDSY&TfiG[,MoTW.AF,+jF&.eLU7m!h-&eq"j0Fo:#lc!15730gm"7%R0jNB%7E&bh^8dY9Df\\;@,c_auu,b+DPhLgbdsV+O2(3U6sgR>sa](*9!Kn%/e=C[oln;imIq]IVOOoeInu$C/]@)J4#_@%p]R)%TKV"<Hlp119tF0jY@o1>-6X+^%E`/:>&2`9N^A0@VUg\?"e$jT&hjEXcPihl)Ks2ZN[GW2Iq4:7:`)KkH(G>XiiqgP"s#p2p>HLS%HQa^(!#,WO4q!f(LT@h^P)@X1fYl13lHjL2Cm49go\7>+"j&-J\k;Bf:h"Y0/QLO>r?^^Ao44((o"qp\QZV6c;Ubu$1\06q13;gi%N..GkUHEo0IG'#kNH01`mjAKIS(0M9:PRlSQIMAZR#j0TM5irE&V288f?jINE=9frnH(C3%k>,Q!ni1k1:\<MZiH5^5?ZND2^ra7%j2:p_P;)o.j)\4BgpprIV[:A+ZHP`4*A6=C/Gd-B=AgEm-`&DdDMX9$BFTN^GX7#jU,*,UaeQjW@_7E()gN<$El:3r'<kU"pKDIt%jKD^F>A/E,0RPu!%-#q@Y#AkLX)fNkn^kXC8YH[i_$V\`C)$=>P3$m^Nq^<uj/*B13ehK'pC;F>d[Amub=:1)'CnE>6[9fpcH4PZ%d:%n@!LKGeR><*pWt!J<E+_![jUtD/c"0hpF>1ub?T09#KHaH`[#3:8nCO)N+:P>+E7.X<&MUG+3`'Xc@rIDhcAj=jJ3-Rn7V<mI%#.IbW[*\M[.OYF/X!#/tTY?/,;o?4Q]MpnS*`0i*<QUKUEm_D8%P:j*FJa(4(TPeaR75:68nc+_^3p>@R9.D+6T?Z*k<b68-O77p%QMp"$lEE]GMmXin6]9*j;]MkuJ+MD1#+I:ha]]1,%74Via2.&,ciJd$3WU=^'4"*Xjq=CDiB8AZV6I$-n'Tcu<!%%KXabVs@QY.#%Z)$?Gf@l_J@abRQ6j>@,AgBcBfccHVPtltR_)2KYQ,].DkWBC;<LtS><O)ntAD8W]C,i=qdD^/).>C3N4Yb*6Rufk0*h:;&*\'`@%e\p@LE<?ES@cIi&hZ1t'Vi,XC?m+SAW[>d>K2*n7Ec=OT''b2p6f:Vd'f[85<btmN/&;lhAa_UGi)%Pm]%H$d73j>*nOpH$R?4MQ%-$+ba#emNO7bVHt/SPNKP,WDV_.A#@VH2n#_Te1J+6!UdMkCBN[t*LDZ$6CW\)Pk4h@2G2+2miETT4:I8l-dZ0DTcW-2s@s%u*S0%Gg:!51W4>C=3F8!"]0D;Q`H"XBIJ<G1ds]\f37L$\Oe:-.ooWW..KbepOMt1@G;"mnC/hPX:g9#H&sBAD*uZ[lmF4+6rjP/,a-eB%RFsZHJM\)(!'#OuVL;p(QYZ/DYb_"#F^\L<#T5lBj.YEkks3EgZ3irLZtTg2iNEV3)SV6I:R,E63K^,2hgm(YeAA?8N9QRD$=h(m%;iOMBU<LKEj6S[8X=Llu6adXVG/$LMOC1mbbr[=beU`]TX:m@*5dMDUS)t-i;RWR@n]._"!=l0p$qPA]i"<+o,RAP_1hW&!W"Za+%0m?o2b0hHk))%J;q80EXh[G'L<aolj;3A]O#nkV3&k5%ZiW.q]H2#-8b3;+BDp_RXh/<YN_BBLo4"R.I!61ojd1X%m81'-'ZG`mG%WlbPc8c9g.4E$[`6aUQj#bas=:LL3Mn/I%$a'dY9"/>d`gLcs2>!s:sAOoD^-jPYtfRM$`=4*-=<:MQ]-$@A=Qtq?TNoDB3)ASnP%5_eZ-8B]^#cs_-[ACt`KR<Qd\%0n+.Rl1R:>';['N=md`?GXpP*aoka_4'W`3!HDcldaq0IFq+:XUNPZA>;[#%j]hE.`L"u]IB0]%9H>JY!h*UTO2fQ@5S7Lm`f];Z3nZP'V(Mn6)!MH5=e//M&.Zg8hkKRV3XXe#E2jO>.ngpd.p\F(<%nat+ur:4-%-@8Q[Ag><?r**%R%*lQ9c,KRBBeniS"A](\$2O!ae,K3TRmJO2cPs()1^-9j_/=19JTAg0Hfr!Jef87#!o^EW2QOeN\gbMk+JG&BV,@IUCB$-0E?>)%>XpXUZ.p(k,b/*]g*Ka.=UITtBshsc@aU.M\dCdOOPl$R<[T.u3RC+`6BnG4Y^==I^p6uFBQ='0/IGj0\/-%[iDRlMgp_C[JKDF$%[$;@VbJ>A?\nHis=5$W7Su>a7LUm,S81#r#!scEVEPEMU-e8\ta0@>XV.TBCN]M_]`)-Qg,@tQ3,pf*gc(YZo/BQ6KhqR_,O_puB%lP%mcV>u-t(G!QlC+G5h/gOc3Z;Qi>"#_An6H6E/EObgP<`P=0*4pOt9sL;7Z$I10QqP^>PgTj3@M=,ZaV#IY@B!WV9*@JO0EaZ&%TGeYN#?RbE;8;C-k/pA4aMQ4E$WUXO+t[BRTL=o-'*SNZ*9"()?WSsK)e^4*`E/9a[-Td76*2%C[eM=]&=>`#(5T]ai:k<m7\CDY%%3%D=jF1qWjpTY]nJ`c79$,RO_A$+BN9/u\Y_WV"67GCg[$;RH_u'%+Oc'QS>f9&\S`q-+!B6T<9<"(7#.J(o<Zb]?M87L^3$TG\%p_<K,URhg.<"`](hE].M%-S1A]I>(gT[8?D#uoV.))"1^&UTZ_PY#[/.&rK$#XK(:P2t6/5q1hdpJj;t21D(Y^2f;;RGU`?JNdmK%"!R#^,SCs0CquDG1laO&]@3uPW3&%!HUT)KOQNViUd,k&O<bMYh!PlMa(]c%M5(C5SrltU8Z@=\4K!=R$(2L`a$G=L_RP=(<?[o2%a;(UG)k7%DM(:#'Na*4fS$SJ/'riT4>9O-MbbcQe"0L!\-R<K?;ng=r/akQijqq\5j+mbfW/9WTKf#\2r\"0O5h2sEX4Yl@BTefR%m%Yl/.;mX/'gN/WkS!:u(BN8#I%KBYKtipqW=3I6_2-#q[X9('(Nj!-d5Q#rR"$A(4&0;n`CTkOcZimj_PN@pMfPd#fjj9g?*&2=%32^'@l?5aa</.Bl]Zi^si33Np+!j#O7Za9[bEnsb+==>/`<F=TMF_7\06).mHLV(hOH^:M+pNiJerj7gEgR2C_NYi;4Xs'1Xi^=6%(KZZ<C((5)TWo#>7R@?Fa$urWoN"JN>gf2q]g.eNE1Y?=?Bo?G_i,Ss69,Gg==u""Qus>oGSVj,>.-ZPs%RNWb.dF3("p`Lll)OR%CBpVpJ0Y/B]jspWh(#Qg2+R?BRK-c2cC%_]9%M28^h-ECd0X?J/qE""LcE7$8AB5'F*_<U=P2&^:'[(TSIhQTdDY9ho"o9H#S5)b%43<h$EDW["g9k%HU1@Fg&1U5`c&:q0](TSpa<f]s2@sMO/rZqB2TcLNBW`C_`N>/?Ym4#X3F><ElCYs0't%6]!PrV&#/UA'cG0j7%ZpgF.X(9J_1KNT3Uq-c!9mU`l[#@`;cf07,VT=rK-&q+0M]0d^2RffpRtl)`F/Z9)P_+KS?CNF#i$JRVOb4FS-@6"pfU`M4$JJHE%,CCq*K\2HDe4M>;X[21W1r3lc:<!Ss^)!9_f7k`L4(7>4B2fMsSEL<=9'Cc%iQ"rY/&_Z8.m;#!Ei:+?'fj]0h"W$"3T<TMo!$Db%c0D\+1C_4?BpqLsk!)T;WC8*A/^OX_D)b%ldlC)-HWss?i_.'GakheS^J9f?KtL@m3i1V.)T%.'Y*(hsE2CR=s1$Uf06B,#bFBq>%O/A_L9pM^;mWm/N-!c]egg9'=p;qtohW]/k#aF)Y/mrcP,h,76bq)UHl"uk^2?e2Y@Q4CJXW[j)(Dhjt*t=WNE"T.He"CB(D46M1%Q&Up*JKc$50o#pAiR(U.!gr!@j+c-!/i_]4Cjq3cb6BMnq4r6YW$$+_JcH1W&<@/^%s(=+K"Q,+-_uH,A/0#i34r.SJPS)L?GN1p%_+]T7=p_\A7):9mc<-lrjBEWC3oGCj0R:l&9=H0#F/Ce2a@MbQpFXG@83H.2A6;Su*sn8?Uo`aZ*IeL&&qUsA=To:$'j(mKCasCc%p/;>a9`gX^21+m,YT%7"[RTf0j6e@0Ygk1i6pWDcPnoY1G%`5A)W_n\dY_/XE`GBVD)q`;arrWV$?O?[KrrdmVnAjX>Trp+K$aEE%5UN$NODcs]B'E!?<CeG39Sp,m9Aq\'7EZKIU4O4f'.U4\2'cE/c&/EfoF`q@89eSkpI19nU-48q"e)ZcA,@+iZ:p0A9`A4;Sb]Di%<15c]b$A"?*3Rju<K"me;:8)e@<CI+7,kT$Ln*K-/Q+Sg%Q^Yc2TU[a>=<W[Ys0n=A@%+)Ku$$VWEI@U+c-6r]`b61,eS[6XPj>q%J`*#ZJgW"JC^O9@;f8F!To(*/a:@((;4sZo)VG4R03D3+C3kQ+<GJ`g,#mDQp:R)Sc(Rs^8KC'[.*G.cUT_Z4"_*e6ZNt:3CsoP6%&dK0T$W9RSKoV=I99qG=1Yo+pCElNr1#Nf.,S^]!\[$d`"iGhI#8Z%kLaIFCb%Qbk$==.IRVeVo9(o9ih=`8_4kT`AQ#dX*I$NAg%#0$ug:q%(_%;7$eTF)HC9;i",'Iok'3m)aD[T@nEQ:Dcm2:s#XPul89^J:mKC]qm4%Z/C!,*3R/,?C..@WCb'P&dLDjFKnjLPd9!%G1NUZ,^E.qkr%^%?$;$<^'CdjnI]qa2,M$qR!][!0laP93ROLb_\"R78ZW!p&uJO63]W.%%b(NSMGsp*"u0^.8tH-eYRTL@ic_:1%_lRZK#bS"n82M=Eg!eD^S#H8a_S!bl(=6*h?]Zr_';(RIQP*B/WJ&7o>o^OnXCYrGd&P*N2#LHKC8R`$(:A"^YU&=r1H"n=@W'ek%4VmOSFKQJR)LWVSK-/;K0L!d9'"o$53h^f$\ro<?(A$P>l('9!ZAph@1"[1iYB_`>:,E/,Z'*s%ijK&nX.X$Hg$]_(Y*"m48&&DJ%--g8^/fhQ='K.#6>,6f"0UB6M];-FYN)W]nT%cqMPlYDT0[/>MX994j@<#+6XZ==*S[^I#Y0m$Y9fES10S)JRY";#3<K[o+d@/69%P([>](mI?1@N%=E#G;9]hi!A$n"A@To#j9.,uZdH<"6lB"g\jCL7ICJ+@*!;7\*#I@6k`./m0`f9"%8;1<HII)MbJ/Ik98rbE@U#%ZiH)uoDiR@nW:S<b0r)m.Z'U!+A%N2/RZ.*%<j-X/QB]?ot\SF-,-'Xs!kup@iBe)(+8!B:k[M$?RD$IQW-b-4kHU\9':qs`ZL*K%\h(rh<#fX//^`QTX(>#+=scq32Se]B@j\l3[FS)R>$Q6Y@PB-r/1&+`#@`=&i[%s?p4g&:o((cU75Abd'_)b+AR!(g88'ZKG-1Ng%RmPOZ.>4p6V,es<4/%N2@3][/$>,sn-[UrP/'3^.n`+eK"_BC%`N9lq6["P7hD/Thd1=;6_d]@J&p$K#8]I!Jc<B_&E1Uar-^5@N%a*BMam6'$8b(9hN*,-R2QQd+Y:e@?/6mT#Z+p@jBpaBh'0LGEg<!Us;:EIk"WU&gD!XbVE+@n!?+4o^\Ia/<p37>,$-?t<=gGmVr%aVqubI&(emY"GEeK.;[$&4)O;`:X+)[&m>[5$1ea#!U45!\l`=AeZV<Yc-c&\/YQ$YidLLCF]m<@4F!&fK_ViG\Q<9mk>a%nS5*-%26,(=W?Oa2TnjFP1R\epmQ)j=26/+/k>cQY,Dd9"_FU7W'd#%`kCPO"gZCCk)//7Onk/MnY5X=68Y8o@P/:ID;KQ.M'$$MO1_m/F%7q1N.26pH]<M_*Z$FS-EZP7Z$AD@m^R,b@R>?u4U"/'WPa\"rFf["r/<9+nA".':l!:8ZriYY\30';"EM[0br[OFRf/nkL:"M:",%.kOreOch3LP\P#S>mG_:,3THB*8t4eaLMi^]V5(r%S;`68BaBHZQ$^feTAB<LaAMLi#+`.Zk;7-@use.?'S1)6bN>=MNggL4:aeO%h'9lQ$BU4T@0]=,Nf-L`.h[D$`M6T_A-h1.nO6Fc%]6MR%sfYsGZ"-[GkHN[Z-jG`SS9Tm<!`oP!BQ!\\#/oe0^i&R)3j3BX!fiU%EY9Z]Z.%bk!D)=Bn:6QHpK?T('a)%,OE/?6N]tg<$M,C16K7m#+pO@JiooXnSd.+GeZtG)AW8VUqgDY*jg%T[<ngf0\-\;(*EgD;%iSHAZ_ms:J)1%aNK#4]PJYV=I?J\NjcCIi;J-db%pgCVo2*0(fAnI?sR8lRNBaIQIBmc'%g9C0#>VQP<a6*`,NWXpS3'=%Z=NcH9%;s_UH)ORWY#<=^lBIF_qjT\`uC^pPaY"eEu0CV\n=(8Pt<JPMg5j^Tn7QHfqo3<SKDWMQ"6B_`IOJif_<HA9]Hq9+W3p!F*B,'0D%P2mX+I8qNGCiX@pRMN[o_$2u7&A4;dM?VON:6L3$LfGX%d?XQ-j$\$n9GM\\77mV\Am/5h&u^+9"_ZXY_5WWMZWk!*MLZNfp1C7G%?uHm!dlea#)'ncQSW)QfS<mV7AA]9sa&=6I0s@:3'gE%V@?P6;+jI+1cUXVEAa<lMo+VR5[WdUkW%cgSen@d(Hl1Polsb[s*c"u3%R$L$uAaZ`&ma'SsINN?lPYhm0bT84H3%bM,1A4t9,I'Ob>X"beeOGE!$n;h*knF;\,W]^#,p)>NC0VTh=g9?@erm&W2Y(2+9"[2M%ZCmR:)U`M[9TB](pg.R2)+a$<<?jo1@@;q"n!"W:%Z7<A\H[GH=CahKkr',p)I`1u^`2'd.YU.64cY%iSj!8D.c_VR;qc'[_JZH2%5fUkqN8qdB**5a*S/P>GRS*IhTNZX7(,\.a^KYQeI&DV5?Wki1$$n]?5:na)>1%LZ9t`)m9V^hnpF,5!1$0GbnfTS<o$/Cm"[2$d%@OgbGQ]sMk"'<ichLc!^8S!RM7ds?lfKZo\-F'oiAI$s>W5+QGmO)7J5qABVW2YtLNHm4KUE3u9-PSeN)JF@5[[JnscI%d(jnMG,%NqW4^If/j7dDu!R?On,i8(H@p;mY(o]%8l)^Y@WDn,C__')fPUs8M%kUdRe*rdulaY"(;:F?Fhk4<U\=#NY9];fh\6Dr"NBr+LP*%qt%)K9k=QOo6U?7Zi<_t`;e?Zorhk:[]+KOZ-NBh?Z*h)rf3fS9WMq)cLd#ZX6FiThSUe=%-DnokD0?T&VTPh(0,u-*k5OMh?0QY%Y>P$,3u$"WGgJ,fmd9d!"6mHLU`,P)MQ/F+)MN);.`CY2@T?R'NQe@%[@3R"&q$3rQO=R=9,2W2[m*q7o6W@.no0*Q@!Z_bj+Rk"%%Lt[OrP!d?_YoPmO+-F:rODk&rP:\"Z%CKTnO2_Dr/Zp-IXIet^$C%?ji9!\g/Xd0=aY#bj80?OW*FrZ.i;d"P&'reJ*\9E$u.ka%-*g.jE\+Zqj\&ZL#@I0grTE3b0%?Q#P4%-jC@rGTA:!A"k8t]jDLVT[j5]RDK:fdENcmYY:bGY>m>q9[s3ZVXYL'c7UYWiVo[gC#%q<=.lT0MalGo)h+ki:k#>p!tOIXZLFIroo/E5-VQ>iu_^qr*%07]C-Fp%mP%cU1j!eknE[gf19Sn)\fjHa"J<LDK8N"G\TKYC@9?%&l8f54&k.6!CEHZ0faDUd""P-R%\`kP2M8c5X6i7bVX#P^Wt>RrI`Y*X>+%P%NQLG[Y4omk?d;6H%`06Y!N)k12$(Pg<<\;)WNJ_%::(JK"o?K7-g/b^^m_3\nR0dZ/7+el'm$_#]<3oN]+$<W*`EH_cEB(#-_W&LBotn8%9W^S];5#!.k>?cB\YLnSZ*Yd>X?J:,DP"Y%b>HZqd,=6Fb?Qf`-J-m5mXI$J!aGcGphMl(;Rtd"rT;H]mSAYd!1FY[=E&:KA7HrQUd))O78a;\"`WYSTI,GbY96te"-E4EK0'LI%J1=CgjH<Mn9Ls<,`e#O3",@UjFR5GK.ti<-)Y>UMdm?FL3-@!CbQF++\q^-tb+$;)[LaMp`qYI;ZgkCd^NjmZgTppB"(4#Zjt*I!%QQVZ:6QDS?%cYX*?[g+f'dQSZFh8orq?9;t;.HJggf[IARu.OdcP9.jgf\_SQRmk>'m>Z72h+Sm5:M!JTI]muIice*&6[/,1;:`"%R4?u++IJN";c$r7&0Q!^BJF.5^o]]*MD^hRd7%W7Pkh("&g%jR$+K"S1KP>tb=l&t9:3#3W5"a@dS+@ioN_7;PN0`j=`FaFirJE&%;Ud`5ETg\6.V^!BZZN%@<[]P"D(_,2YXND3.kC"qFgY(S[?YUpC+D!P>$L9,L"+](k(:SA;MEpora4d3+Wd+"-lV,a?1%Y1DcZBd%WR+GheH#J\8=WCBa?0Z.&W2*5!2I..A<-bA#"Xda`;dq9PURbG&m3f0P-J!e"r%e!&iYcA-5shTW82Pu>6FCG!2WN!/%!!hZA5u$%0t^Iqf9$$WXQ_;HnJ@+h^7kf-c'i.H-:!>?q3hEC+co##gJl)dT.>ds"?Y<;.L3&/'qi8mi%l#UGf1eVZ!Ge0B*Rp$Y-FX>g\>oc%U(;[3,u]d7@L0g(7GC.]YB)@TP%cb``pRjHRi)pW&e('[rt,_EloZiHD[nojL[#epH<Ao;Cbmr,U)FXJBg?D[M,cne9]pLjZIP%r%'QES23R<iDMqWh`b-_CMUsN@NQ<&(5V-KMe=-h(*9/UmRpts;bs51o**[-.<S,LU$a7?)2"LDTdVbn3E5m=Z1+Kn5hdM>_D!43Nk%.*;OW>XMU(lO+?p#l$erPaeD?#&l9M4ApTq,RqZ3"Vp%`K/Z*!Y_KCA+M-^$'+$it>q?<uj%C,1O82jsBCApS5AT7p/<009F/Nbl%Kmki@adLUd&9s#`"&LmG]NGe#ckj]TFtBI6.*m-s`<?0dOGkmB0[(+OZb\#b-u$MU[8ihq\68`+8Dp+jiN.'"(3@mg<hi!6DfbYn%a^T(c`iek2YO^e:a?B:@feOC7$hToAa1*rFE(!1!/._maPB5BR6C%`68J"k^*J[cg^emL0$;kn1'cP5kOde3(S*#kTN03=ZPA;^_%gbsVPW9?gKZ"0jHc=2<nP\geFDlW/8/t#4nC[<,:^K@RkN%?s.?S0hi>,'moH?'M7'[_rF3.T/FkdDeFJn/MW?Ik9"'7t+"IU^A=%f%>QY?6+P=W1%m$^s,.JLpG$P`bjbfM&ILZK]?=r>[mb1&3@Vg[Y4omk?\oMdqEc]h;eJNF/VOOZ2<'DTa!;ip?CLR%NU^"!@;XI%R94EA5u%7[i,MIn]u5++AB#3ZYM`7$:BJ"0;6g8HFJE"s(:8Z\1H"c&XtfNRDS+uVgriqXO!`K24mr>M+nu#O**NS79D"]@a5Be<%o\rJ%XMYh(GY!(9^5\5i!u7coEYUS>![)_Fh=:P%O>kK0O=leTOMoTB:tAaq$5]q0MCHK]FBKiU;Z_^Ma__Cp3AgCaQRp-)2>.m]%^\J?Cm@*<]2Z/1I$7K+\U>HqO#)?AU?P,=Y1fH2cJrW8=h;V8XYrG[k3>>c60c<JY&l_::Yb7pLdg?R:WJR6fNLB6UgEhX;?KREi%(fQFMj8R;s':3a)TdBQ[TjqbT+c'dXFdk`+C>pU74G^OS1Z(JB998Ud8e-OXW=Ed'R6a2N0k8t)Ei,*1>#9pDEeTA9MO"YL/Gb`,%(*cKfG)uJYInlLuS!oZ,2h.Eh57Ib&dM55-J<5p/nn1OJKW>Yc`^%BR9O-j?KT?7L\^?N)9ppS;;C\Je_[*\>8W8k/<NF,k`bjbf%M/)Bt;aIX^U.,5.r?0$kdC.E[leKZg163d6fKJ[&<=U%le5F[2J$Fq?WKL\HIWO]i*88></)9:pEmA-cLQZ<oL+mH8g-^rl\9-^t%Y>GkEeC9S%*LTK4^a.dWNMCp&,_R7-/7)1`6)1=Ij$_DePmP:HapK;M'h1)4RMHfhSNE64k/$*s]12b6b+?LUTTDf,%"\ia,MWT&%g0fJ\F6>Md>^>eK!4`stf&C9k`3*,\lVDkcSgP7A'J2-nM2$?/a;N^>9.#Wn;.DoP[di[Zqh`@34Sc7XeEErFfpPI?Zog\8^ie/M%U1A`%jr1kPr@_bZ'.Op\YL_\o>,'mo3lVQW+f5IRUk/$j$Gj1T[>%eTR/,M]8d?A#/B$Qr*0>b?@>V?]aj-Ulfd[dAbKtpR<F)In%_g><6C'3/*Rd%,pTHP8.D7(oO7PA`tF3.mAWQ+?ls-q[t/d%.((IO$%eMAc(DtY0'4W?p*=J=W<MGauh<%k1X5goc-GloJf$@*5&%Y)m/6757XiAIBDq8I[\i<P)e$&Zg,U`_;T)n`rlN+e&t-9Jln.Sl.*$[Y4omk?\oMo,(Dch;eK9F/YrjraH@kkj,H@^H$BE&N<<*%(,A[Y3X<!u*4Df-*WXW47[g'M](iE:R/WiMn\S0RP<d3J4'm1@Z'EJ^&5QSc<csfW%3lK6;^8>?i9FPj":_ft*`fX!1fXLP0'8>9%!)nm5KDl[n-R:Xf1&bVkY-2PrI^A2Sm[kO5ks5_s>@YN0AC#km+kSj:[&>+j#Neab*`C7U?R=c3!l2@.d![]h52KPi3lk[/>1I2Q%1sDPd6B/$M"Y?&kC`nX1YcX4FL-^\p(N[]-J>pQV62ukr;aWGO(uqgnrH,D7^Y/4slkq?"."_5Y.EK>68V@3Y5+(R7Bsl?o#Tb64%OuB#3Jq=sMM6o2V+@QV_V(]tWjok6"9snP1%_,=JS)mJcKe7'"&-kY!.Hj(F2^qac8uh.tkeEK09q6SNj0.Q8"1]F[FaeDmaZ1!>%0NF38!kbgT73#GA/`_H/dfIlc#"\IH+B]R-N/]-L0d18*7-:FIAAbu0eq=qS<&I*U-&ESsRjs5c'CHRB7E0?J-HM/R,rV4hQAXc9%Urp8=qS1196eF@-,ZUgm3D8Z4U5.k+c&lMkO`&i;3m&`R2F.m6%pQt#lTrnL@,l%ZTumL9.k;]c^%%2J;&(@d,8DT`b2jc+:keb8%<*MZJ<oK'47*$qC*F-L]2T#i/MH5E6[q+c0.[S2;C?lr,s!geSF%sO+3=H&$r\N/::$_D?.8S6R)Y2IAE=lIn!#SZJ+U<UWU*+^N%#&raEGS8"\#0?G3!MuAYE+M=)<H&kujXScqe7EJ#M-GZa<erqGNr`.Jk1Y1dd>G%V>"p:#BB`\SQc>,&lQ5B,R471oiu!:972Z0/%cYo\NJF)PQk1+4'Xr'[%%^$@K4XBRjTug2CU6MBf,%cro<E>3kbu/S94:Vhq>o/c7(@FX.D$m,(>][/Z:f:HJ3<-tqM#!8%Y;VC<%Q<VDl`Wh$'<JZ<dYHSA>Q63PkTKG)H\u?DimtAjkP'97jfZ&8/bubdXaAie>bE8EQP_1g!(*a6ag'SJ%)F)J7#Xf(5AW,8-D5pQ6%[OS*JC$o7VQcG2&lQ5BlWn6AeGhMju`\II%SrDhSY0V$`4S]]u0.kptL]ab"A1&sb@*!OET^#Gngu=D84Phpr_5A!aSOmd-!W"X[%b/MQ'$'cqib9UeDDlP(oaC5q-V:lj7aB2fX.O<I5;Wgr_@TZN2pIP<c=`Po\C.2Y1`D9'M2Sen]B$#$jM:I\_)\ej.L<Kjl8kc2A%P>u&Jh$O9^Z5s2Z-lku-(*@],_JCM:V@nLt@+?m/i1UDoDi5MI/[^S;`%n_)PRaQ'P8_9^9/hhZgJ0S!,pp;V8eto120P&X?S'5e%+bI`/Mli3\Liabcr\oTRbFo8@M87(5pAN!4k[dXij"h)`/M"f;kTq0Z<0'$2WbMePOD2KUPlXm"=Y^-$?*@M9YG?-LOOk`i!B,ZL%oV/c4=hACU.l:f(eAGNH%j]cZ4lh)KF2Eh:`qYIq:Pb\T9D"]6a'_XM:`+_7>75`./HpAPW8NRBZ$#!Ad8^0CN<*Bs#Qc%(0d'+I%"V%Y2K^n8,8Os[/H_daJTQ/`]FeZI)5Qt_Y&AS`O"_HFTgRB[>R7l\ij;PYNr@\q*F^,.kj"J,1iOFOeqTY]]IrdM[3E-`&g#D%n%DEne5&hDW'n`<l.aB!CkH1:TJO^seo:%oQiiW\P`Z?K\sbiQKA7V,>tm/LqkgNkEmNV%\9r.f_5i!4IppWND)2Kf*%"kZpmJUK<Y%RYEB/4^*fOld`aoHk@VK=F"YY8#K@N<I5bk;s.q.OMT-`K>G&G1A\qA'19PJ'$2%i4lOPZgFajA:[6;-4(Ves4#?`)-'BUIH$n^:%P86T957`VKlQri(jUAeEcrgfhffr[p2C&=&Ujj_e39:T**>(<Z4/jda_+;-[eEBPM+DgF9-j!)F8kl#4.iq]pTsOI/:s/kG7?[%\%6;W?ekZ0d_fVE]QorSS_(RSf%9Z#g?$Y=JOINCh$fBm.PXNuSk\k\=HqJq*W]o5">\0FZNR:6c'>e9NSPo)TW-5Rs%QSCPU%Mt=[%ds<Q[#+E6J"m,q,WLL#<0[q;;2&"k]Y$NJ$2je)sX.<[8;EOLHSkk\0s30NhhdQ*QGmNM51&V6)'LYgcVB90*gr!b#n_m$;W+\mZ%'AH5G'/_\=6-g[[hp(d,b(8@.Q<86!9,r8Ph+hdqr+Ja@h'@5Wpg&ei&0;pJT=6/9fVFB8:"6r:?D&,fMrAX(3j_'rNJ.;oiKhrS%#U$E23?d,JO9qR&fL+E@W@snKLS:TlkS,WNMIFIUe4b]BY<.,S9W&Q@7_8l6g)7=G[1fHV<J15_M+%$TfCpjF?/Ejo+Rc7*h'!'V%3]P#eEI<m_;$T6@Iio0&!USuD8n:CX!5ahI)8"J::b'%"?Ouihdur"8UlXYtU;9=Vr:E;XC8p48dngI0e5=Z;Cu5oDdlL+MEcIig%c[<Lf/JE@-biA"].-I.7O"Kre$&,(+/'=$d8'@HfOB9dNTch),-be5g!s!oVEW[#:P]0b[+YMi9U3S:5Wu_+UWef(IB<]c:5J5A,%_%F.]"="p!4j#LHSgT8jFbnalEM<S3*5COI'9O<Zj"$$7XcE=2*hmq@B[X?M3"#^Aj#Ass=;2YCq7<0+,WZ*P8HL$Doc?&B!H)oc%@hGE+b17'3R9=DU(-0?Ga"3a<(-([M&g6gCq'n4#T@\N.L1fZL9gchS,'W2E*H.F@"l]!ZA[BGsHH>4h"oU3)Z`pJ$2HM.PH:,T4%=Zm0!gZVn9g<k2,eO-Gd].gBWl]7?Qfil\,[>(>@UM$a'42HI$[n)ltaMF#Aq(hmY#`n6N=$,M2adkG@chf'&Jb&ZRd3ts90BaRK%pCu@U3./QC[<7ijWta;f1``EGJF\pmS+T<s$03)3<0X:Z75,Pp]L6-a)c3qR6-tnS#V%ZW*jt/7m)Z'lis/5[,O;r,>K7Dp_`C2&%WN7Me1Xkf=lZC#(.uS$mnqnLJH&k[Up8(TE<V<[%,Ao!h+RTh\k=_%d_[_!Gd<:aH1DmLB>)uqShQkQAZ.,>=@VY#\cuoQgq8#rK%p/Tl?1:c*nY'.tEU3>Pk4c<oG_W*.^[3`u]H&1T'U5@g!`:s#uQOcAWS-JYAb5itJU]R46-6iFRnLYp_eLEZa(5=>/I/;Lm9LG&<%l)7RSj=E2M`l!ZXhdZ=n3=.%)NsJ+Ul$6\KbqVP%BD>TiDK,N6A^gB'4MJ,E/?PfIJf_4CLK5AJ;*tg)V+/c83H5rOc8?36+:8>K%$qY:)Y2LSo^)n6U_Z`?8oLO@`A087R4(?#aB*]DlFNmTWPj@85H\55W3k4[2=?TF_O00(0Zc.`oG%UP5$Rb3+bi:5>Zm]+M*mnBi%>(\RXl%ga%LFNCuGLR]kcT&M0L.l)SMA:hnnED=s$]:ZfC^g^rM2u@BW\",32i7eYIBu(MTr:*q&aa9\Ae^":9@W6R@VcZ\UXYUP%ND_n1rLO1W1VC6LNi4S;$M#]n8E_(_D8URVPcP1W]d?aq/5!s<J5[N'mDt_J_IQLs`)lfD$aL-kN/rsi^AYFJ/6o]n)L;T*rSgsK%I6;76TW$:+@<`F!C3s8(+$/R%9hXS9.@tg6X4$eIIdV0c?li\NgmP4UU5*jI,FsXDL\#^X5ZX#A[h^8VSSndL6UD@@YK@HH85;Q:%K5**+0b3+N>K`1#2Y`62'Fctsk,0#!BrK+WDCHbR%,'-Ih\5%X@?"/h.Q9uibkG>,cnF':Te61eHM"t3KI1t5%gi1QNdU0l@rp^(%89`$2f&\'1">mC'A:<\X[e]H]QHM?c#qBKR@k='_TYXhk^3'Tg]/DT'ArrmdEk!Nh\ULUMq'D/4cp5D,_i=,ea_+DRPT]HM3o3C7%B7s:s],f=T,T'iaXWV`B'[qgY@@r*\qLX1:q7dR>':<qspS;]+)//XlWON-<=58UbQ&?R4WlF.Np:?pSIA<RdG07^sG38J"$KW(?%RP8V8O09O`JjSOC57aIc$:9Sq2"XAK9dl-4-DVW`:m.j<,Nhm1691`6.(.kF2Pm:tm*uGS-uc(YaTuIVJ`M)\#mOj-Ej[Z-9i>Un%hm5_F7Kn$a8E?8(89VUr5"A+"h"u(TBES++_po`@6+Y*.cTAkPWW\:e8VK\rOEmSsX^)tkP(oEV7^%&YJKYR@O=[4DOEVI%XS+[u%8Qml=\(W8AMqXTNpFDK9,JY$V^9USPa"ff"fDE!JqSqKdo?l`Ie/"jKM1X\/TdX/6Ur(d[&V1u,\Wp$,Ud,Sn#UKldi]E$77m`>,%()Ab0NF)/=!_YKkdJt/"V4b8([(T3?47!mAC8X0FC1gl1ZVWtA!0=<7P_e8c5FP[F+d>3ZW]_@Te:aAE+"m,DVLlK+SK/?=diTW4%METu-7i(bc.j?"_(4p)_SMmog>L?JQ:jQXaR_\1uO%kRnIL]MRQ&qmG@W87d[ea2>'#W%(Bffm>;*4CENeOb2,!<S[(cC<(dZ7GO%I0ek/#p\gPg#Hho#<H3L:7#TYHikEYo5[7ioBil^,ripB9KZ3@ENQ>`Sc(Z[7?lFkAtS^g@dQ]?.N23Ip<HRJm;bOTjYaEqc>YY?%SJcjV')C#Mf%Oj/RE&Bp8C[1Lqft`n4W2tYXSHHrkjsNiOq^YFMnAiDboT5"2r*]9+5H3EK];tqD@Jba"Ca.I'N&l,d!c,>42&^0%8[A;pFP.7@9>fR0Gincab9jn*k4+^"AR1R&oT7>0P0:Gtg3siI^j19X9DSp8Mr&GQUn70h^C)J]N#1ga8LL@@[#cjs"6j*IK'W,>%;:@UeeZ6@k=ejGhb/9rsk4K`"Ac>SO+fJ\+p[\s=4#TddHkK,<<[p%M#SQ;mO.=4"adYjfB*=FFE;8ShQ7LFTTkLYV,o3'2A10(0%1OU541nulZPoHQEk528uRhqC;hW,D7,kMQQc(1.\31Fq6E_KAQ85U4(8j\pe>ZBe&pO+aZ,a8qa7#YDT(Bu=^dm*LC[[%5Fm;Rq>%'G[*cs6^ha+po7AKIoV\4F>#ER(ar&Vfe6$jl/`YT)!i]HY=kFj!uXgYaOMd4XBY0-bMiSCA$6J@QSt9SCkWOU^cHEZN&F+_]!!_%HBQK7aG^q0_)SJ+41j%F-,$DHiAb^')Jo&j:G3EUc+V!U>q)Xs6t1<)HX`M)BT:HI>hgaH1Z*+N6GL;Fc_8WIG^O']4QQ5'58kL;%OO0Vcd.Nrfj/M+O<0UZf?'-+2R?I[TG%KbdQ7>TBK9SWR9JLH;Tm]D``th+_B&ENnU)B@e\E0G5%^'g;HX\5_f,1?m1d!CJB>390%QJ9(AprX5,'Ms$C%gfos`BcYeKO";7N:QRp+q6fXac3[F,>/T'$hV.PV]'5=Q>hnAEKUE7&E1D9D:psu9rRi`'Fcttjt$apNeEX_%@N`Zgl!*$Yj"q!VPcLYBEDjHcpKQH@^Eh<^h?3BEg5-<N]V:17hJj$BZoaO0_k@J$3NsWCBH7uT>bf%ZW<'!$TcolJTd4tPL:`.*%`%$0FHuWk((/cICm'fhKQun=C'hl]bLL;`%&:r0,qQ9(?Z#m08C.i,-.A"%uWuL8h`+n;KpIB;tr(Wt#0%0-L>joE*';_3tkaQZt%E6==SS3K5?RI_RBZ,F4H-f6ZP[(#\'=uK>V0GFu)UsjieQ41SUF/E^tSS!u;;OLC>-a"Q>q6dV7QfSB6V"5)\/<RYo:<5.Yl19q`%?_1&5\WbffM@YjcjNmso%PPph-MBO+00)TCU+I%Y+)lN<V._P-gkq7'nHW_V%V`4S)qidsY'.sFOukJu<i,C\<*LnkmF=#A,,N#'%A0JK>:CqroST?2`n[.Ko-5^&>-Y6>P1[2-&GQrJkE11FgEb5,GJdSJr._(/ROIJ"<qGl3*"'k5X%jcG^pcT]\Ii6ojY0.3!aQ>WG%87m>&:lq$YN#X)Nc1Q%<$]*::[1HE$3?11]Dc=h3Cuc]^h:6Eq9>WWN2N!C:^./ZrM:TSr4E?MlMUg`DPIA1Q2KFn<;//bAj.^e\%qlT:X?ZN]?U[\'$]-jR:r/)O.H;>"`HHV0$!Fhsm?>:2m1sp1f\NEE',"sm<JiG.OU<Ts-U_%/N8I'+">J&UMhH4TYSA@\8/78iS%O>J^p=Fu?WlC8P^H_)(P+B_(]QHG(_4>Zq:`Uc`?<h^6K?WfLlP?7AfcbEdK,Aua5k.?b!pmbJL/K,-i;uM9ON3)8kf@Z*Yb9B4^%]22OaA0dn.(QO@+$rsqI*tsp._+)3;lp<l"^a*G4Pb(jn9$-e=0KcuPBNm)YPi.tkpFMiJ$]hJAS/%%jGXW/%]]8'ERoL3:dC9Zh%F?996$*N1ndl7K(>Y4I6pDecT?V]scWsoG.*GUC5Jd,0"+bMC3+%(&D")6B,EQF*d1gI[A_)'\]p%3N8a.\)Y(B39>H]NE7,f#2j%MuQIB)2Up9g9>XlTOi_!*UY0Y_[_I^,HA4o8>Tc@,Um9"\4g+">"^lob>M;Up<?A`MTmhrb=/]-`ojhF-\eOAPbt;J\1!sEIa8sH%o>9PR$>B$;?I;,,^P[\Ve08SP,r?hZX7$[i&B!%B$(]^$U"WE+:+7)toY!n26,eMc95$V"KsjY<`-)GE/Jg?<n]^`SQI+-8a+o>^%4UFQ/3]U1MA'X6H%(KY6h7a"2WoLE4l;;U'U4bVHaG-1@5tLLeQ^Y@K3K[doVc'@iQl;;B8:)qT+>O(t290lWX@m/eg<srM.%[qt%cf,g)ZhV\kR?G4ULNJ!1rR4<8JgsF)0r`C](1sCA2`klUS"`e[bXeW4QRjROPr\6c8uE0IZr@MO`=pi6l$Vigf9=KR-aK-$qU2&a%+.J#o$88!*qiTZ*e<4LNaCQ1P/'j1_\0lokN9'+kE<F[q()04D)b%_Xhg!kJ=c1d5MRh3!m/,B.`:1-o;Hk%\(WA2fmo_o>(EQpb%69F'^^G*HYKRTVJ<n`=V*S-b/SOf]R-l!H#&*6]fP7#KJ7DKK.Tj29?6TtRj+=4Q<JTFk\Q8oqVY9fIlJnE@,liN=EdW)lfY*6X;%<!Y9#:CId"&@J?CE)A_RrLV!7#3#*;`=lhAiZghJf@iJW3-n<hf`p`p&$Bag-n9@^Qq#=I2R.Z4eX!cu.Rh<ghtmTrO;g4RD$,b/%he/GQ`:aX>>8eP!`A?E?=[M@90TV8(oF4GAWrEbm`I?Z@jO].n<kj'DTWI34$!l11Tr-q74%%D'U[MJT*>4_^m_q_q9=VT-RtOOQ%QV_Oud\ml+I(rYfrK=gA1fqo]6UK\%KE_QOF$=21"M^WTG<>bS0Pfm5/&f-HW,gfV[CYLP-PTS=\"rOXUK0bCr9[,(?n3tD7:ugK%95u;)[s`$]GWSN7WSAo@1Z*-$9B!HRiEL6kMB3E,26L&_KN`K?P?qUph!%7_Pu,.,0eM#-M4nT:Pu*)cGqp)#gmPm9KUPbQ9BAVl%T)!i9Hg$/0oPr.H'qB5?9JQ(/@jKQu;k>2IGdbhpgr88M:V,m*MYal+YHgJs5df]j=14JgW'Qb4)2_)T9]&<+bp]urEha>pHp8nK%CJ/>86!hr+6LXE^7:u'4B?!3*Ur8Z=[%`^#HaGhp;I9.lCHQ@jkV6',^mS(T%OQ0D2<MB6F:r=''s*[p_.MRE"f!K1,`W41MEMqC%jLk.K1&0bn-s''bj.ppPn+SB,W!f2'5L-?2Gsr5M]dHFA^<_c1+e+-7WY-6(6#''$EeaY[>4XA>JNb':Ye?`+8+*p)";N]oC=+>&%8l<QFF`$5=a/BFVLPt)Yl\Bk:D>>_:e^[/<b?ZU#7p3(i9KWcqU^<IWEc.Ar+WFdOI9+<CdN4]6RCa'WNl[BtMl1#b4:O?Ja\Z5?%Vd1831h5$iL;QILbk4=c^UeZub&?JeT(hTCjbP'ag[+)DNCT!`ac7%QWY52k!g9gD:_00j0c9@fiGc3m/TLeNlpco-_=[Y?clA*E%"'R1nH![k+S+EZuV7'?@PiA,"pFMtVHN]D5]mhqc71T^<6UE*/j10g]FNIJL,UIl*4'5`nIkIE#?qG6SRF9JZaNRO=R#t36<M#GL%b+86C,udC6/X79OGinlHTjM(lA!U3gOO/>j6j<"'r2%iue[bPEL*E+KA#i4p::PUWUiRS=U3l+!OmDp>N,:sRM&c8U%9X(KE8[I(%Z-bMbL_blPZj`!Y6]pHTQ_(\#-cS'=29OItE3gtLi;9WKka2&od!K.A?e\'"j:sg'oSu;;K@?W/BlZ^oIHC'TL5c%63&7oe"OAB2%rS^@<;S5aD;+=H9KgA7Ken\]4g#-h(=t3-@U"M4dXCsdAC5!RP\g;.<G4X9>Y*PBi61>*)DcJj5AH,%k&U8]brNdhr6P&GZ)Ud:p%;WsBO34hOU9Q,Uu/p7`0eg_gVg-elo/V-i8$B8A9_/p0ZT&1gBEF-/`8`ms7a]pEW(bU\YL>T7H&pqLU6SdPjA0RjrJ2aKn9Eh=F%7FI1*f^oe9c7+Ys6WPm$WGHG-[L3B[B!fJj;Sc>ZLs[DZ`,50_"`o[L1gF9&JgYa!Z"MrI,a[%/GsMtO]Z4rhU%!<`j\io@9!ek9%4CeStoML%n$>(HdTS)CXNhjPNJl/KrA-?t)7ZJ6E,B'X?9eb0!:!:M2Tm1&A+dl\C1:*0'oT7;#OZ6bi$b+=d."Kb)*+4pB:_*fE%mOe7\_R@YpVWCF+?mmL:%]U9jiJo>OCFIK7U$^U)<6Zgc9BC.j4S/N3FkZ89nG#PGnE(uQUDR*e4EUFE6^4ei"VGhu&a+^3@R[`N%0%#k/*f`W_+c`Y$dp]VcEeJ9f>#G]e0)<<iHMHQDNb]NN4K@^,:3j)?>SotAO0P+-MZZ?7`9KFM8Qt,,a4H?l:@`uX13q2+P@VKQ%l$=PQ8@^'-BJ)-h=3rEZfs/lq;Lp-Ah!d"Yl)4W^h&"'Y`dSV^2)-Zb;V&:9i.>Rer9OJ^`=iGVV,dZbLo"qd:5mMfCP:Ein2CZF%=amEgq$"lXEFm?V^@ktkb8Ya5k8hFmnu1ln+)g.<-5NE'(LE8XH$JSX*;1V;_d&n?_kaRl55)NaB$@V5j_1?aNM=7blOdY_5h[39%05.9e9;P]r_UeCun?`['>:MF$n\k*)(!ePSPRp`*(16sS=lffMV"9TKVh\O]8n0?B[^j[fVa6I-a5OTnd:,Xe!dR$h+GZ1EahrFW%RtudWd"gP?kkCCi.KaQN$q8-Ihu'jU"h$U4\L<W:P!kS;mtp";*MmJL4>)M(^>H8Ijrce#Z@pX<L0r=q6LQmQ-<sj7RKA&^'s;JI%2\c.NK9K#)aD0=ZlpJ=)U906qHbC>VP8/0Z*qttrZo3u\0LJ^Bff)-tBK]O6SCV(FU`Hc((:Lq)L8T0Yg=#K#.%^6`WtP7T)K(DK%j!u39@Jsu&&@/oB6G=anWQC>\V.C;YBIn7=9>`1=.Z/#=La3(:RY;a($8%4]4-_YNZF;*uQ9LPG;,hB*4cD`A/Oq7!79UB]Yu,#d%qOZ=n%ujG$9>feaGinn*9'DW.U%BCna'ZVIKNIf-d!I%F+0DdH8EV`h^D2l-75;Hp$,,QDc_!E"d3R$RMA!=Y%E:_dr*#e4/P25O%0#imD_+*&SoKkVo_klQ+7?e2(V/:WVN,sj#6(3Od(F==gqYa`I2P`$<*a`&6;%O%PkTQRBa=$@7J]g^\MGKOJ<")=o?On\qU_?5#%o@FnX*U38/&-<N,@e4oA\%O'ppu,];;Dd%iRW[,:-5U@IP[(b_@WI::pYPVW0Ga(:9%.f9@gJZnI`K&J642G-(Cp>sm%-sYcpKk_%8HdV)'Z:p.Tj?ZBTP1(78q[R<9h4hlI3H!Ejoeb<dciQ#43b]')&LCcp!6h$A[1>e.4R7Qk,/sUi%AoX-l,QUPde@SL8T0Yg=#K#%.%^6``tF7k(?Y.PSJ&5l=7hU$4!_2^Q^[a)%s4Jjo]50UFgRc\_Rg<X8X:?'k\S9Gmi"b(JgM4bPVgf??$Oq`f^(>/'Fctsk,0"6%rS\kfQ=A'n4M,nT"Ae:gB.N(2Bq785ca$,\J9cNRfqd(%^Rg3shBAA1XQppa#%EK\F(2mA..&cIG#"gsl/1Hd"2ED"pl5L!o-2U#%/;t6Nd\2;am7b]&O]s)I'G[*cj(X./<X''V99F>VhVdg0qOSPm]k`kdddXapT)!iU''e^E0TWCgTs;`jq@>6Q^]'Ss`7,#QKEY9N%5*cHV$LaVt.A9ti$9ime'2f6LqQ:3L.QRVDfRga.)g+>[kD)laQ`2K+jSMfDX!"%u4T_tM\:r19]HBe\n7&:?bt,[@`"]B'\Bo(6%8IH%h@+o;eL]sAK"s[Eg_HE0PUh%p)kPUp#U\[pKh\jI/3-876C&8:.OUHP%@bP25_X)WCds;>>5C3bs;8_-7?VVhWX1AY"7Z\P&%n-1fdbk&]C'`/^fHZ.prFA`:T$Z)q10<#<M81$nZmjNQo6HsPZX%:7J-u"0%[O&Bd-sb+4)K\X=1%]Wo%$`m^g[@"?)H"H(eh(Qi%I`Zm0NqUlU=qI<Z%/go-OZCpM4V`dPbY3:X$[SPNLd%_1*u96\#c4:KSFld'BUg0T7oX\S^@(3E0jJk4,'#1[p6?o"Uqr,sO0KO!%.g$o1fnF&hdHAk3_YX%&3jeBm?=#l/ln.3)cOsE7nrDQD_Gt4VE>9P2;F[ZLnd"7>S!=Ed5LNdJEVYEP?nS,_eOLmQN'6aM7QPKF%LO4dc`N&46a=T!daZC8HM>Vm4oE@)C9.3I7Mn.0[5jG*9?D[9ko=iQD+sMN_##9&#qV6ps*]EZ]9*%B-)FD+(gN'uhSG'>'XTa1G%Ps/I+juPWq'2H5C#e;Vm^jMs?H$-2daSX*OoF]8d6^lZ*>Q%oOVAsHn).2;[;tT&Bi:9'1'AR2Wf$PO:fOp("*Y5U:2H-ZSD5PVW%?Zi54UN]>N/P&K##Ti;:[(hc5PGNA'KnAk@l.Kk4JjVN0`U[85Dkk\%ZL$uNs+<cRG4`ccXu]c.mYA#\D!PZpJqLZ<0(>X6n"tdg%CCM`g1c>3=,atAWD0mR?QLgHj2\b3dr+,Z`<%C+j/cISYbKa*VY#F$e\%.)L(+hlM>YU;iqFV%!#'JX)IH7C1.%DhjK8ahVO9/KX%BfUO7k7JGk_hMKHVF!eQ?V0EJRotho:["V<7[sp$O/);;'G64Y.`e.1SQ&kiJ-lc?kMNXB=4ng44el`Y)gJ.0lVC?<88T=?q4Z&n%FHHK<HE^X!3c3-^$",tGen+4W)>)_QAS3E5C03Dt,<6tHG2M^72RB7a!Ti:0i:Wq%<^cWphKYs[[j#h-`r#s`7d'BPdED,7\Y;+M%#]6@`B6j6Ahq]gX["E=SQNb>jIM864?^#iH!B33u,BI79<O/[A<T!>?@%q.N#hVrT*=$Z/6h21uLsV$AQ5@psEn"bmi,]?t0O!WS%1I4D#4,-+sB;6-qjC:fp,=roqqD(ZM=tR&+jZq<&1*0Wk#%,u1"c0#5@hjAP'+LCKpq[_al?'t#Lh:sr&q)oOd1/!Q@=4GS@U;=Y%a;+s@+pC&O@g#l(/7luQSe?[O:W[^ab)r`_:%W-iBk;nF_:)0<2S(;AEs`Jig(E+0];lGeUlSKFb&MRF$<iUKAkc1HQr[hGp0q@-%Lf7*>^Q?`Lh%/1f7eF"A=/[:Im-GNJEQ,YsNu4]7?/=10*hFi$W,L?R;8"IZU3`LY8W@$HPK]f]6FR&mVd4(CN/WNfJ3J0OSmt9f%+hSh!Sh_nbr6>o3jRLOSOP@^JSPV4*@5EFlJfjlEjC&<IJamDnll&'_$>J;2F732$-e\cch#.fOju??jEo5=(Qn<tN;l;g<0g.PL%+pnYUZr7dFn"V<.j#Z9;eVd0fGE(HYhTW5F(9"g6-PuJ2EZ4"YaV%F4K!4Z"XcThni:b@uG'Z"oE]DO?XRmWZNbm"F1Pj2)1QW96%KlcaYJT1a2c7*nMIY/;=.qo7Ok\4!&V3SXr0<[mpUqhiGR;I`1@+Xs*gWfpd"s771QB*]8SJM;Y1u1\g-F^A/s7"-YKSt,tdWY<&%-Eke8l?s_i<ThMu`!kD*Q@Y:7eDfDsN*F"iB?.qP;l=2a0RP=j8-)@>B#V[8_`b=ehk5;C#ln%5()fE[W"K%LX5>N(A3nqD]CR3q%oV2/N^_N'VI$`(/gh[.jPIE)@VAn=]Fe5HLI:%)^]Hd,T$8CFaXML:"L2'5MZbDbN_".J8_+#M<k+e2:'##\IMOI,Rf2PiYkRC,)%@MqYcb_qki;<-80Z1]DXBB*2Im$'f]E2R,NG!8'Zrc,KOH:73BM-_HS'Z,C94FKM`>paGt,I'GYB1/,'IL1Z22Tf1@3EY%aNWj`G%%;0%C_48PjdFj3AE02V4:ad9d@J"EaV[tHTA3dXMUrl/-FrE*eiSuj;D`^UfP##noNZ2T/?ZU8O5iSPLoKl,*a--To.MiIV)%_#X%\ZdP+P<mp&%qU"<*0+rDZU9;\^l;A:M*AXQ9%lPZa!IY)p]TMi]2nIGaRj(cJ7m:sfg5_g'1<#o3j-O^#T&m;LQi6:ZqDmYI*FY:%V/aUCU<IgLV!cX.j5_abF-Il\`K5Jq\M6WfR)?.\0N9@,E(=`dGo4D`LYJcuE;>iNM+=#cr?Y-ZIgL']bqVD/#mSqHJ3]-T+rL#"%,hf.em10"dJCuZrS@4bl61Y]jb#>-LXuJ).Mhc)^"@USCbj$a\F$<,9(`_/Gi?O)pafSfCW:'f2EhpCW-+R2;]\Z-B'G639'-]bl%S/a=!]eP2@c5++9UW`$ciZ)KGj_2HpiBrSc!7B!$Om+[GlqE4li<Ua&*EUCf!FZ?3&F_L/bK^+Ym.A;H!)U2$X;GEEWe\tCC$\.q%I"28S5!eem:g@//G_Ur>?<u.'84nbPlgeo"dpW[aJkVjXQ0m$>>+rXF6NK4<k_pn/VuhG#CYbX$SjuZ7)!ha<aP>_@WilF.%8!0$%'t\b%3l4aH2WJ]%V[XqDU[;gO.)FlH4p+[K$(_[K>NgEs]+]@AA*\e6ZQjn?Z_&"*-@#'Rbmr%4BH'LWC+sa[!hHMVL\;i45OFa%%(>H0<BLC+9?1oQiSF$#A'5:qeNfA\*d3QhU:\8?g@K1AL7X=pf3_VXOj_<kY=7XtU+6RR5?NVYsOF-Ee(bRmUE+4aM)QC4j+mNRF%BD*l-(lf8t7/1<EiImFlMlc\^4H!>hnP&\W;ZJbt!j1s%n2N?C\akC`m9C<g;TZfm(%-LH7+m3.(^d!`BAH$[%2h2Vgh;eSAOk'V%\E\1X'gY=;ER,^7'PJlEj9GBi5strZR1X`:"R'@Ij;;UA,iP;*S$cJBZ#9=pW8Z3%\;agD$;e`mWuR6+8m=iO\2d'$]!Ef^!4`sk%Pk)]%(Zb9!AUeL<cVVr"-\R4Rg2;M/[FQR+c/J6$@RHr0l,3"uiR8T?J7_a@\,kLKkanJ=m,/f5n3[(O[rU)u>hhf6Meg$2XNNJ1%Xj%K!)oZ4ui<7edWi+u3Y99A,D^7Xa[/tM63fBgT%Buk`bgA?8E@L23\_kS*;(Q0&q,fZp&GI2Y5Y.WYI:fF'fl5QKIqAu>-r=%Y%6IqoF<bJ^>SH(k8@H/pWKajOli,SZ)3)^Jb`!-YU*+Tb9](cn14&dlnN9!Nn8T@7G!ABrJ>E2VEhQK":8/mSCK8t*[*A58<Z6BI"%ZfokmU2%_f-nl?QUIsL6;h0[pfV/<\7"N2&cPmf;3ZJqCD@`0U(U,USKNm=CNA*aE&oA;`(_JD<T*Z9n4;%S\Khdgt/fV=7OGBrY%6\usgi?<)p>3ceBF(;jaS_=K&=@P1)%$/0S-#SUI@Y\dPMN/.P"K^LkG8+0r2ZpRj'HA;J)A7oqj=K&!F2JYGiDpAQ*Gg<[M%7h>%+&:$X&?-K,<Y-2s*OX?P[,ME4[_*$L?M/</*&GGp2`0PAU1Xf/A8aV#EG<7]%=JpRa;Ag=_c:&HlL8q3]ZF.j#UQeeCrRJ7i^07g%MXXP*9+-XJ>0%,WTeI`\Ni58b_pF1.@RISn\:_)W7\nI-ApqWa,331J6?!0R>[ZK1_g)DB=>1/0K;#?kI3a4lZ3V/7MFLPlr#VTM%WJKU8B-g\di1Y`1aHo`aaUE/+oVk97c#c;bHrp)+7=W5fm<N1MQ^oaTbDh^pn89Hg'OfRQ>jp/p%1sa+0]2:k",XW_&5-2Od$5U4%:LpXi!AJU1Q6'^TTo.l7(k,U$I+gh<da=t\9V/tPXbX+%3a\-t<lF2Qfos)H6n>OC]T#\Y8R*<.DeE(1<er*]/F4'PkE\akMl[[K%_[22b*tjWSQOd0U^pUs/RN4^:3VqT/^fm?i5N^POH+[4L>1u:TOb]FCjs:Z>ZWsbG37%(@-lsaXN6ejeH=!&u%hWB`G3rs&:dAf1%&o)oKk[jRFP<@8:nn&=E-RWMCE;*ke!/C]kA2e^("l::dUeS9J%qVPrmHQ^NX7?b<2Q8AT;SOHu0-@<)+i`r$SOh6P35(CTeR(cb%&o8!R#3prJ*Q"Ig[],hJ._(<\g"LA'i2VtEh))HV*n!fq->O1@VKY!N.*?];S@utRJ[QZ2P:,mo#2s-XFJ'I@i$L$<:/7C<#5G(d%\KSj&YfO\7qn#a&-Y>_[Blb0+:Jc=N@`;:_)_"M'Mh9d_#\lB+G1F([l;Doi,f5$;pR6N"=G,i@g8AkalhP>%O-=(u\GG>L68*n)%U_<C:U,B`a*Md7><#n.AD%Ni;;X=cAIZ+#I?B<hh^7m.pD360N+A9KSSq_OD$)Jl\_faR$3*RY58$GDb.6`&4kgP:7a5odLZ(Z+U%<=7?J!b<G<SDT-ej!0TJ5Ie(Ba7Z2Sb#c*oO4=*9??<h$>41[i[_o#>3DQ]t3m]QnONtiK2AGujY1bn&\Jl#SUO5RW)0L`hP[eB]%5BV73Slr\j>;2'eE#-Sf4Ma(JCR_,:G($<`MRH!3QFOLKgNoqPMPSjZOVo;G3+]Be`Ls`'.pONpF6n1oAeWiD^N*@Z,dJ7&.#t4+%lq9eQnWB@C=q2,m3sl(9iY4&M$cj'__;LL4MoM)nq+2f/mD]96oj,u8S(:W>3eaks?-Zp3LE!jP@A3'tkXr46de_#ko\l_kG!Y*t%VY+REie8mh/#LhB&4Ud#kA-n?]h]*lE?H`3SN'Ct8>4dLq@.`lmU^$srG2i(Hk#QJ*V\"SNTOd!Vf<$hY+LN!*?SZW3jlch!9u`!%H"#9cW"$)p8K>#X+#_G]I>4%K/<b$Bos0ll;/&J)5LF"fd:mNXp8SdAV2H%_&0tkPcM]?4Wk$J(EB>^f^J'1o"L0%7Sm1A,$qTaE%`cpd3]aFa>UjL[,_)%Y<7TX6SS1SPeM:6B3A3ii*/.-$k.&GbX'AnS/Aet-lO.=e5b6;[9F$l/@V'ts_fqWH3^$HH[!*t^GMj%@]%Ei8%h8fHbnoi6Bs'ZJ"tO_0@/!C>s8)cqh1Zm(loMf7!OV:Q<)S7`c&b4bXD.$FJ<,.T+AE/@?L`fQj3pj8QeHeFgPdOUiU)Q\l)%hP<>.f]>GTKs!?`ntM`r[YGDr5j]qcf^Qj_%jRXWa(9qtFrSugXuTd]BAB0hQd.cMHG\9k(89]EmUV^r[)+d\:`0hD"6_#$7korX%*'3&SM)8'OV2XI(#_bmn[5bAsUu<>UNl2j:"d)2$?rMe=Vf.ahil4eJ40'cga^10uW_.Uec`0L`Z8+`TH:T:>M]^Q9>T0s0Okh9-%2/sE#oKGAgDpZ2a'[WPK4#^E^BdKdB$a4!$:Bl7$:`kh3>2H_d\;_tlCJKF*fdMQ`jHrg<:_JBb:*lGW"Y+A+I2_u&H]H%!O*a9r%6<AAFI.D/#`&j0rl3qo\d7RoIUaaIq+N5)f_0lNLlFd",1OuQm*=KYQ(tVBGV;qj:X%i[n`["XfBe;t;J98$to<Obm$FZ$8X)R4p%_Uml.]B0cIC$$FY#^!&Y)VRdL\52>Yfd*</"6\J!X>s.jl4@`,hbe]SB&nGm)AXK1P3L7IE>)S>>kB<b%<6oZ""n=Mr,29U^n[I<%JgU?$TsuCe1YL?RE#Vdaf:2oDQJQW#/AqXFPimI>.uh:PI!\HOf^QO&^5<3tHF4T@<kX#":n!b4dSkid/T>p=U$".8Fh/,CiSEbh%"r/pV-S*5#W#,Lon:LUO85NU9_rm*QSohQ*3E*WV"Ls=773tRgA6KR)dg+//(&gE*6o6[hhf5+e^QdY&!Ck"?!OE,]="-dI4E"Ko%k<Y91*5^@gBK$3Ea(%q6cI7V7aJDIFEb7V?i0o(D&`ofri^i9)?-Vkjg!C[S?1n`/qnFDc8K=;i3'h=;i:+\0#d"nQ!!i*V2KdEp%Y#e39O&ub'1j48H=_``aE>pd+>]c-JlGtcT4E#jWOW_g>gV+,;Sl_L!P/Ek]o`a"EjGjDS8c8pX5L[=4']:%BM?TC([LYaMU]h$4%<Jj!--isMs;\?=UdoTFje0k#uZKVPc'Z2oa@Fn9\`^P$Je4)L\o,')A?19f9&-L^RE";*XU,[kn`]:IS%3$F,MQK[]*]46S<"pC2%3K2-#prV(a,+<<TL@Z673aE2iAjmH+-ol7(&1PXSJ'[[**Z=le4ebBR+kOF3444g'G$KR/=B7m8c4gNX>Fb3Yku3obSK)T<.gf?A%WCR1/7m3*EW(rR:ogPCA\FrL\LosL"<#*Ge3p$5_=&"]sMrZlVU;F6[./]sGgZ[qgU6>b1aTQB`:*]B3c3;;=ad8J1K^uq1NF@3!%@AMC>0p3S::b0]LNo8?m&q-:",H-le<a$okJCmsMbQ%t"]b;^3j7&I[&B6.OMk7bH)js`k\_F''GL<n[:_d=)f/QEZBH'e)S-:(.%*fbeKZieu4)JY<.*TC47DuHD&8rQZE*fkDBP6`Dn#iA]?dcsBD//CTBTpY,THhQ-Rg.H.j[o"17-0Mn*q$fg^E<.WT>N.q="ISpG%[KUjK_q4/egZ_Qt-MY<+$0fVYH%#!t85:gh0U60?4F*^rMp@MX=bgs0A7tdUZg1>)9=]g&Bl?mH"5=/uZ6:DHI<bIRgdXHpqOQ^6%Mhk1>4/deS#q<dO%dK]>3N)Wt>is6X`*IOT8k%.u$E$h5<KuF'N_i94FL[iaaTU2HNQ3W04subYN)[o:_esRDd4)rU/E<dF3#p#]%9.CWMm)`Y**nJS`MYuZI8>!O?f3IJ^MJX9'QUu"YaN7T<7b$D75>'0c@H4"&c=,f2\dlkl`\*c>E*,Z&PJ-/_+DYTN=u3[Jm^Q]F%Ml1&pX58A)JZ`Og,8:tXGZ@M#+ZW.EaST;@AV?pVJ!7glS@-:$`n9lRm?+bQ.#O?ICNU$&qGnQZ/FXe'ir_+?^'UqC?ZWrDZOZ,.%G-6gmK>94L]nuSJ5g5CToNS,tAOHUh8KgMjo5k9_c4V7S\YJW=Mh?88P3r`=pi'n((c:g/Ptpj+b(0X'87oaC_[rm7RS<ZoR$X@?%=Sh?^,_l^WS2-/DQEt<XnB$9PZr_9VlJjfhIJfPh,G_p0mXhdt]Bk=Jp)XYi.P,I6KI&7=";$itgR&Qhg=.TUB.YtbQQj1je'C`b%41aK0Go'?=Lc(`V%6ht?20AUV>4cMr&\'&UF?8&"gbZ?NG/K((Fr$[=W3IZ^"k4(F<Rmg)1AJ`+@C8.WpS(U@Z56T2Ns-hlUq!+c%8*98S0$1?#N?+[MZd/gk3ko]=@K^'Sd8?$QZ)';D"\E_`h<=I)ZdT"<)M?F@OU,AFSrRUU:(2NYO\)S268Q[u!5Gt^YqmD7jbhOt%`C"'eI:P"1A[S/"TQ]rdR\kT2VN8Lih3En"%Ta]LbYfmNpT@o>-Ne8>?>l]k4jeXs.XnC@G;P#Os7+S,rqn?_>ea*]qEOr@qg\M:%s8LuhgP)KKe,TB-5CELqLYr(77AeneI.eZ^poiS)8,j]-H[2'*Dd3$To8#!km9XHN6i+iA^\bp`rornN0&AH6pN*nQGKemhI<H^p%4[&i#$*qnRT//VkQWd2@2Vosas-5APIsaY2?2#uho\_DD\V1h@0]hX5Jj;q!X=qu0p#hg?:l=X1)uoLGf7I@jr^,/nII'LW=174/%<T^O/hp$0^oBBK3A+=msIZMJ:(L?rFqC)C/eZZiJd,k#-pj#d46fulo1E4d*QZLqVZoRPcTTd60e55oNYR!GD^rIAg#1pWpq_9Ro%J'f0jkf'.j9:Ft3>6I;]gh!M_,5>'1\;Ar$:+=sf+,f&e&UZ-]f00B<]JU6a6IGabdeK-Z5e,+7Pj#gc^6"%lU>'Fl.,796CZ&\3%I&qnfBamJLl0dEQ@9>0_rl_Kpj8Em\rVN4$fqE-ZLEA^.qPWesq]du[?e"I]^AmWM^WZ*Gp#eR=n<`s?jquGCqKo;7J,&_5kjgrf%o3]7XIY%+_hnJp:YCDc9pYUK#h:&i_q=MSFO5Km#=9%mHhgbLi&)[A;=Sq7TJ,8lr5(35"qsQ8b:]Ec]o&9=-I/4NLp$'Adrm)\d%*tWa/2ZM=2rr.EF_`.T;F&<;N~>%AI9_PrivateDataEnd